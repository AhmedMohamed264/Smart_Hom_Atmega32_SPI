
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003668  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00003668  000036dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004020  00000000  00000000  000037d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000192a  00000000  00000000  000077f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000911a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000927a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00009409  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000b44e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000c54f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000d4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000d654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000d916  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 89 19 	call	0x3312	; 0x3312 <main>
      7a:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e3       	ldi	r26, 0x37	; 55
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e3       	ldi	r24, 0x37	; 55
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 e3       	ldi	r22, 0x37	; 55
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MUART_voidInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART_Interface.h"

void MUART_voidInit()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*UART Configuration*/
	UCSRB = 0b00011000;
     c96:	ea e2       	ldi	r30, 0x2A	; 42
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	88 e1       	ldi	r24, 0x18	; 24
     c9c:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
     c9e:	e0 e4       	ldi	r30, 0x40	; 64
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	86 e8       	ldi	r24, 0x86	; 134
     ca4:	80 83       	st	Z, r24

	/*Select Baud Rate 9600*/
	UBRRL = 51;
     ca6:	e9 e2       	ldi	r30, 0x29	; 41
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	83 e3       	ldi	r24, 0x33	; 51
     cac:	80 83       	st	Z, r24
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <MUART_voidTransmit>:

void MUART_voidTransmit(u8 A_u8Data)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*Polling until transmit buffer is empty*/
	while(GET_BIT(UCSRA, 5) == 0);
     cc0:	eb e2       	ldi	r30, 0x2B	; 43
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	82 95       	swap	r24
     cc8:	86 95       	lsr	r24
     cca:	87 70       	andi	r24, 0x07	; 7
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	81 70       	andi	r24, 0x01	; 1
     cd2:	90 70       	andi	r25, 0x00	; 0
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 f3       	breq	.-24     	; 0xcc0 <MUART_voidTransmit+0xc>

	/*Put data In TXD to be transmitted*/
	UDR = A_u8Data;
     cd8:	ec e2       	ldi	r30, 0x2C	; 44
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	80 83       	st	Z, r24
}
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <MUART_u8Recieve>:


u8 MUART_u8Recieve()
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	/*Polling to wait until data is received*/
	while(GET_BIT(UCSRA, 7) == 0);
     cf0:	eb e2       	ldi	r30, 0x2B	; 43
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 23       	and	r24, r24
     cf8:	dc f7       	brge	.-10     	; 0xcf0 <MUART_u8Recieve+0x8>

	/*Return the data received*/
	return UDR;
     cfa:	ec e2       	ldi	r30, 0x2C	; 44
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <MTIMER_voidInit>:
 * A_u8TimerMode  ---> 2 ---> Fast PWM
 * A_u8TimerMode  ---> 3 ---> Phase Correct Mode
 * */

void MTIMER_voidInit(u8 A_u8TimerMode)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <MTIMER_voidInit+0x6>
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	89 83       	std	Y+1, r24	; 0x01
	/*Timer Mode Selection*/
	switch(A_u8TimerMode)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3b 83       	std	Y+3, r19	; 0x03
     d1c:	2a 83       	std	Y+2, r18	; 0x02
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	61 f1       	breq	.+88     	; 0xd80 <MTIMER_voidInit+0x7a>
     d28:	2a 81       	ldd	r18, Y+2	; 0x02
     d2a:	3b 81       	ldd	r19, Y+3	; 0x03
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <MTIMER_voidInit+0x36>
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	69 f0       	breq	.+26     	; 0xd54 <MTIMER_voidInit+0x4e>
     d3a:	71 c0       	rjmp	.+226    	; 0xe1e <MTIMER_voidInit+0x118>
     d3c:	2a 81       	ldd	r18, Y+2	; 0x02
     d3e:	3b 81       	ldd	r19, Y+3	; 0x03
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	99 f1       	breq	.+102    	; 0xdac <MTIMER_voidInit+0xa6>
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <MTIMER_voidInit+0x4c>
     d50:	4a c0       	rjmp	.+148    	; 0xde6 <MTIMER_voidInit+0xe0>
     d52:	65 c0       	rjmp	.+202    	; 0xe1e <MTIMER_voidInit+0x118>
	{

	case 0:
		/*Normal Mode Selection*/
		CLR_BIT(TCCR0, 3);
     d54:	a3 e5       	ldi	r26, 0x53	; 83
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e3 e5       	ldi	r30, 0x53	; 83
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
     d62:	a3 e5       	ldi	r26, 0x53	; 83
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e3 e5       	ldi	r30, 0x53	; 83
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8f 7b       	andi	r24, 0xBF	; 191
     d6e:	8c 93       	st	X, r24

		/*Timer Overflow Interrupt Enable*/
		SET_BIT(TIMSK, 0);
     d70:	a9 e5       	ldi	r26, 0x59	; 89
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e9 e5       	ldi	r30, 0x59	; 89
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	8c 93       	st	X, r24
     d7e:	4f c0       	rjmp	.+158    	; 0xe1e <MTIMER_voidInit+0x118>
		break;

	case 1:
		/*CTC Mode Selection*/
		SET_BIT(TCCR0, 3);
     d80:	a3 e5       	ldi	r26, 0x53	; 83
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e3 e5       	ldi	r30, 0x53	; 83
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 60       	ori	r24, 0x08	; 8
     d8c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
     d8e:	a3 e5       	ldi	r26, 0x53	; 83
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e3 e5       	ldi	r30, 0x53	; 83
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7b       	andi	r24, 0xBF	; 191
     d9a:	8c 93       	st	X, r24

		/*CTC Interrupt Enable*/
		SET_BIT(TIMSK, 1);
     d9c:	a9 e5       	ldi	r26, 0x59	; 89
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e9 e5       	ldi	r30, 0x59	; 89
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	8c 93       	st	X, r24
     daa:	39 c0       	rjmp	.+114    	; 0xe1e <MTIMER_voidInit+0x118>
		break;

	case 2:
		/*Fast PWM Selection*/
		SET_BIT(TCCR0, 3);
     dac:	a3 e5       	ldi	r26, 0x53	; 83
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e5       	ldi	r30, 0x53	; 83
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     dba:	a3 e5       	ldi	r26, 0x53	; 83
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 e5       	ldi	r30, 0x53	; 83
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 64       	ori	r24, 0x40	; 64
     dc6:	8c 93       	st	X, r24

		/*Clear then Set*/
		CLR_BIT(TCCR0, 4);
     dc8:	a3 e5       	ldi	r26, 0x53	; 83
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e3 e5       	ldi	r30, 0x53	; 83
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7e       	andi	r24, 0xEF	; 239
     dd4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
     dd6:	a3 e5       	ldi	r26, 0x53	; 83
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 62       	ori	r24, 0x20	; 32
     de2:	8c 93       	st	X, r24
     de4:	1c c0       	rjmp	.+56     	; 0xe1e <MTIMER_voidInit+0x118>
		break;

	case 3:
		/*Phase Correct Selection*/
		CLR_BIT(TCCR0, 3);
     de6:	a3 e5       	ldi	r26, 0x53	; 83
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e3 e5       	ldi	r30, 0x53	; 83
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	87 7f       	andi	r24, 0xF7	; 247
     df2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     df4:	a3 e5       	ldi	r26, 0x53	; 83
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	8c 93       	st	X, r24

		/*Clear then Set*/
		CLR_BIT(TCCR0, 4);
     e02:	a3 e5       	ldi	r26, 0x53	; 83
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e3 e5       	ldi	r30, 0x53	; 83
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
     e10:	a3 e5       	ldi	r26, 0x53	; 83
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e3 e5       	ldi	r30, 0x53	; 83
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 62       	ori	r24, 0x20	; 32
     e1c:	8c 93       	st	X, r24
		break;
	}
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <MTIMER_voidSetPreload>:

void MTIMER_voidSetPreload(u8 A_u8Timer_Mode, u8 A_u8Preload)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <MTIMER_voidSetPreload+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Timer_Mode == 0)
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	88 23       	and	r24, r24
     e3c:	29 f4       	brne	.+10     	; 0xe48 <MTIMER_voidSetPreload+0x1e>
		TCNT0 = A_u8Preload;
     e3e:	e2 e5       	ldi	r30, 0x52	; 82
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	80 83       	st	Z, r24
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <MTIMER_voidSetPreload+0x26>
	else
		OCR0 = A_u8Preload;
     e48:	ec e5       	ldi	r30, 0x5C	; 92
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	80 83       	st	Z, r24
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <MTIMER_voidStart>:

void MTIMER_voidStart()
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	/*Start Timer with CLk/8 prescaling*/
	CLR_BIT(TCCR0, 0);
     e62:	a3 e5       	ldi	r26, 0x53	; 83
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e3 e5       	ldi	r30, 0x53	; 83
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 1);
     e70:	a3 e5       	ldi	r26, 0x53	; 83
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e3 e5       	ldi	r30, 0x53	; 83
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	82 60       	ori	r24, 0x02	; 2
     e7c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     e7e:	a3 e5       	ldi	r26, 0x53	; 83
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8b 7f       	andi	r24, 0xFB	; 251
     e8a:	8c 93       	st	X, r24
}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <MTIMER_voidStop>:

void MTIMER_voidStop()
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	/*Start Stop, No clock source*/
	CLR_BIT(TCCR0, 0);
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e5       	ldi	r30, 0x53	; 83
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8e 7f       	andi	r24, 0xFE	; 254
     ea6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8d 7f       	andi	r24, 0xFD	; 253
     eb4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8b 7f       	andi	r24, 0xFB	; 251
     ec2:	8c 93       	st	X, r24
}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <MTIMER1_voidInit>:


void MTIMER1_voidInit()
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	/*Prescaler clc/8*/
	CLR_BIT(TCCR1B, 0);
     ed2:	ae e4       	ldi	r26, 0x4E	; 78
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ee e4       	ldi	r30, 0x4E	; 78
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 1);
     ee0:	ae e4       	ldi	r26, 0x4E	; 78
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ee e4       	ldi	r30, 0x4E	; 78
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 2);
     eee:	ae e4       	ldi	r26, 0x4E	; 78
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ee e4       	ldi	r30, 0x4E	; 78
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8b 7f       	andi	r24, 0xFB	; 251
     efa:	8c 93       	st	X, r24
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <MTIMER1_voidSetValue>:

void MTIMER1_voidSetValue(u8 A_u8Value)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u8Value;
     f0e:	ec e4       	ldi	r30, 0x4C	; 76
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <MTIMER1_u16Read>:


u16 MTIMER1_u16Read()
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     f2c:	ec e4       	ldi	r30, 0x4C	; 76
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <MSPI_voidMasterInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"


void MSPI_voidMasterInit()
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	/*Master Selection Mode*/
	SET_BIT(SPCR, 4);
     f42:	ad e2       	ldi	r26, 0x2D	; 45
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ed e2       	ldi	r30, 0x2D	; 45
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 61       	ori	r24, 0x10	; 16
     f4e:	8c 93       	st	X, r24

	/*Clock Select Rate bit*/
	SET_BIT(SPCR, 0);
     f50:	ad e2       	ldi	r26, 0x2D	; 45
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ed e2       	ldi	r30, 0x2D	; 45
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
     f5e:	ad e2       	ldi	r26, 0x2D	; 45
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ed e2       	ldi	r30, 0x2D	; 45
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8d 7f       	andi	r24, 0xFD	; 253
     f6a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 0);
     f6c:	ad e2       	ldi	r26, 0x2D	; 45
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ed e2       	ldi	r30, 0x2D	; 45
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8e 7f       	andi	r24, 0xFE	; 254
     f78:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR, 6);
     f7a:	ad e2       	ldi	r26, 0x2D	; 45
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	ed e2       	ldi	r30, 0x2D	; 45
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	8c 93       	st	X, r24
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <MSPI_voidSlaveInit>:

void MSPI_voidSlaveInit()
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	/*Slave Selection Mode*/
	CLR_BIT(SPCR, 4);
     f96:	ad e2       	ldi	r26, 0x2D	; 45
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ed e2       	ldi	r30, 0x2D	; 45
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR, 6);
     fa4:	ad e2       	ldi	r26, 0x2D	; 45
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ed e2       	ldi	r30, 0x2D	; 45
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 64       	ori	r24, 0x40	; 64
     fb0:	8c 93       	st	X, r24
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <MSPI_voidTranscieve>:

u8 MSPI_voidTranscieve(u8 A_u8Data)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
	/*Send data*/
	SPDR = A_u8Data;
     fc4:	ef e2       	ldi	r30, 0x2F	; 47
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	80 83       	st	Z, r24

	/*Polling waiting transfer complete*/
	while(GET_BIT(SPSR, 7) == 0);
     fcc:	ee e2       	ldi	r30, 0x2E	; 46
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	dc f7       	brge	.-10     	; 0xfcc <MSPI_voidTranscieve+0x14>

	/*Return received data*/
	return SPDR;
     fd6:	ef e2       	ldi	r30, 0x2F	; 47
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
}
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <I2C_Init>:
/***************************************************************************************/

#include<avr/io.h>
#include <avr/interrupt.h>
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
#include"I2C_Interface.h"
     ff0:	00 e2       	ldi	r16, 0x20	; 32
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	e1 e2       	ldi	r30, 0x21	; 33
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	10 82       	st	Z, r1
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e4       	ldi	r21, 0x40	; 64
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	92 e4       	ldi	r25, 0x42	; 66
    100a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	80 83       	st	Z, r24

    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <I2C_Start>:

void MTWI_voidMasterInit(){
	//SET clock freq 200Kbps
	TWBR = 72;
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <I2C_Start+0x6>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	8a 83       	std	Y+2, r24	; 0x02

	//Clear 2bits of TWPS
    103a:	e6 e5       	ldi	r30, 0x56	; 86
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	84 ea       	ldi	r24, 0xA4	; 164
    1040:	80 83       	st	Z, r24
	CLR_BIT(TWSR, 0);
    1042:	e6 e5       	ldi	r30, 0x56	; 86
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 23       	and	r24, r24
    104a:	dc f7       	brge	.-10     	; 0x1042 <I2C_Start+0x16>
	CLR_BIT(TWSR, 1);
    104c:	e1 e2       	ldi	r30, 0x21	; 33
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 7f       	andi	r24, 0xF8	; 248
    1054:	89 83       	std	Y+1, r24	; 0x01

    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	11 f0       	breq	.+4      	; 0x1060 <I2C_Start+0x34>
	//Enable TWI
    105c:	1b 82       	std	Y+3, r1	; 0x03
    105e:	20 c0       	rjmp	.+64     	; 0x10a0 <I2C_Start+0x74>
	SET_BIT(TWCR, 2);
    1060:	e3 e2       	ldi	r30, 0x23	; 35
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 83       	st	Z, r24

    1068:	e6 e5       	ldi	r30, 0x56	; 86
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	84 e8       	ldi	r24, 0x84	; 132
    106e:	80 83       	st	Z, r24
}
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	dc f7       	brge	.-10     	; 0x1070 <I2C_Start+0x44>

    107a:	e1 e2       	ldi	r30, 0x21	; 33
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	88 7f       	andi	r24, 0xF8	; 248
    1082:	89 83       	std	Y+1, r24	; 0x01
void MTWI_voidSlaveInit(u8 A_u8SalveAddress){
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	88 31       	cpi	r24, 0x18	; 24
    1088:	19 f4       	brne	.+6      	; 0x1090 <I2C_Start+0x64>

    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	8b 83       	std	Y+3, r24	; 0x03
    108e:	08 c0       	rjmp	.+16     	; 0x10a0 <I2C_Start+0x74>
	//Initialize slave address;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	80 32       	cpi	r24, 0x20	; 32
    1094:	19 f4       	brne	.+6      	; 0x109c <I2C_Start+0x70>
	TWAR = (A_u8SalveAddress<<1);
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <I2C_Start+0x74>

	//Enable TWI
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
	SET_BIT(TWCR, 2);
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <I2C_Repeated_Start>:
}

TWI_ErrStatus MTWI_SendStartCondition(){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <I2C_Repeated_Start+0x6>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorState = NoError;

    10bc:	e6 e5       	ldi	r30, 0x56	; 86
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	84 ea       	ldi	r24, 0xA4	; 164
    10c2:	80 83       	st	Z, r24
	/*Send Start Condition*/
    10c4:	e6 e5       	ldi	r30, 0x56	; 86
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	dc f7       	brge	.-10     	; 0x10c4 <I2C_Repeated_Start+0x16>
	SET_BIT(TWCR, 5);
    10ce:	e1 e2       	ldi	r30, 0x21	; 33
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 7f       	andi	r24, 0xF8	; 248
    10d6:	89 83       	std	Y+1, r24	; 0x01

    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	80 31       	cpi	r24, 0x10	; 16
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <I2C_Repeated_Start+0x34>
	/*Clear The Interrupt Flag to start the prev operation*/
    10de:	1b 82       	std	Y+3, r1	; 0x03
    10e0:	20 c0       	rjmp	.+64     	; 0x1122 <I2C_Repeated_Start+0x74>
	SET_BIT(TWCR, 7);
    10e2:	e3 e2       	ldi	r30, 0x23	; 35
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 83       	st	Z, r24

    10ea:	e6 e5       	ldi	r30, 0x56	; 86
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	84 e8       	ldi	r24, 0x84	; 132
    10f0:	80 83       	st	Z, r24
	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
    10f2:	e6 e5       	ldi	r30, 0x56	; 86
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	dc f7       	brge	.-10     	; 0x10f2 <I2C_Repeated_Start+0x44>
	while(GET_BIT(TWCR, 7) == 0);
    10fc:	e1 e2       	ldi	r30, 0x21	; 33
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 7f       	andi	r24, 0xF8	; 248
    1104:	89 83       	std	Y+1, r24	; 0x01

    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	80 34       	cpi	r24, 0x40	; 64
    110a:	19 f4       	brne	.+6      	; 0x1112 <I2C_Repeated_Start+0x64>
	if((TWSR & 0xf8) != 0x08){
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <I2C_Repeated_Start+0x74>
		Local_ErrorState = StartConditionErr;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	80 32       	cpi	r24, 0x20	; 32
    1116:	19 f4       	brne	.+6      	; 0x111e <I2C_Repeated_Start+0x70>
	}
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	8b 83       	std	Y+3, r24	; 0x03
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <I2C_Repeated_Start+0x74>

	return Local_ErrorState;
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <I2C_Stop>:



    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62

    1138:	e6 e5       	ldi	r30, 0x56	; 86
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	84 e9       	ldi	r24, 0x94	; 148
    113e:	80 83       	st	Z, r24

    1140:	e6 e5       	ldi	r30, 0x56	; 86
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	80 71       	andi	r24, 0x10	; 16
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	b9 f7       	brne	.-18     	; 0x1140 <I2C_Stop+0x10>

    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <I2C_Start_Wait>:
TWI_ErrStatus MTWI_SendSlaveAdderssWithWrite(u8 A_u8SalveAddress){

	TWI_ErrStatus Local_ErrorState = NoError;
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <I2C_Start_Wait+0x6>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	8a 83       	std	Y+2, r24	; 0x02

	/*Send Start Condition with low*/
	//CLR_BIT(TWCR, 5);

    1164:	e6 e5       	ldi	r30, 0x56	; 86
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	84 ea       	ldi	r24, 0xA4	; 164
    116a:	80 83       	st	Z, r24
	/*Set slave address in MSB in Data Reg*/
    116c:	e6 e5       	ldi	r30, 0x56	; 86
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	dc f7       	brge	.-10     	; 0x116c <I2C_Start_Wait+0x14>
	TWDR = (A_u8SalveAddress <<1);
    1176:	e1 e2       	ldi	r30, 0x21	; 33
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 7f       	andi	r24, 0xF8	; 248
    117e:	89 83       	std	Y+1, r24	; 0x01

    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	79 f7       	brne	.-34     	; 0x1164 <I2C_Start_Wait+0xc>
	/*Clear bit for write op*/
	CLR_BIT(TWDR, 0);
    1186:	e3 e2       	ldi	r30, 0x23	; 35
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	80 83       	st	Z, r24

    118e:	e6 e5       	ldi	r30, 0x56	; 86
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	84 e8       	ldi	r24, 0x84	; 132
    1194:	80 83       	st	Z, r24
	/*Clear The Interrupt Flag to start the prev operation*/
    1196:	e6 e5       	ldi	r30, 0x56	; 86
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	dc f7       	brge	.-10     	; 0x1196 <I2C_Start_Wait+0x3e>
	TWCR = (1<<7)|(1<<2);
    11a0:	e1 e2       	ldi	r30, 0x21	; 33
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	89 83       	std	Y+1, r24	; 0x01

    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 31       	cpi	r24, 0x18	; 24
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <I2C_Start_Wait+0x5e>
	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    11b0:	0e 94 98 08 	call	0x1130	; 0x1130 <I2C_Stop>
    11b4:	d7 cf       	rjmp	.-82     	; 0x1164 <I2C_Start_Wait+0xc>

	if((TWSR & 0xf8) != 0x18){
		Local_ErrorState = SlaveAdderssWithWriteErr;
	}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <I2C_Write>:

	return Local_ErrorState;
}

    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <I2C_Write+0x6>
    11c6:	0f 92       	push	r0
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	8a 83       	std	Y+2, r24	; 0x02

TWI_ErrStatus MTWI_MasterWriteDataByte(u8 A_u8Data){
    11ce:	e3 e2       	ldi	r30, 0x23	; 35
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
	TWI_ErrStatus Local_ErrorState = NoError;
    11d6:	e6 e5       	ldi	r30, 0x56	; 86
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	84 e8       	ldi	r24, 0x84	; 132
    11dc:	80 83       	st	Z, r24

    11de:	e6 e5       	ldi	r30, 0x56	; 86
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 23       	and	r24, r24
    11e6:	dc f7       	brge	.-10     	; 0x11de <I2C_Write+0x1e>
	/*Write Data on Data reg*/
    11e8:	e1 e2       	ldi	r30, 0x21	; 33
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 7f       	andi	r24, 0xF8	; 248
    11f0:	89 83       	std	Y+1, r24	; 0x01
	TWDR = A_u8Data;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 32       	cpi	r24, 0x28	; 40
    11f6:	11 f4       	brne	.+4      	; 0x11fc <I2C_Write+0x3c>

    11f8:	1b 82       	std	Y+3, r1	; 0x03
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <I2C_Write+0x4c>
	/*Clear The Interrupt Flag to start the prev operation*/
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	80 33       	cpi	r24, 0x30	; 48
    1200:	19 f4       	brne	.+6      	; 0x1208 <I2C_Write+0x48>
	SET_BIT(TWCR, 7);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	8b 83       	std	Y+3, r24	; 0x03
    1206:	02 c0       	rjmp	.+4      	; 0x120c <I2C_Write+0x4c>

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
	while(GET_BIT(TWCR, 7) == 0);
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <I2C_Read_Ack>:

	if((TWSR & 0xf8) != 0x28){
		Local_ErrorState = MasterWriteDataErr;
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	}
    1222:	e6 e5       	ldi	r30, 0x56	; 86
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	84 ec       	ldi	r24, 0xC4	; 196
    1228:	80 83       	st	Z, r24

    122a:	e6 e5       	ldi	r30, 0x56	; 86
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	dc f7       	brge	.-10     	; 0x122a <I2C_Read_Ack+0x10>
	return Local_ErrorState;
    1234:	e3 e2       	ldi	r30, 0x23	; 35
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z

    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <I2C_Read_Nack>:
}

TWI_ErrStatus MTWI_SLaveReading(u8 *A_pu8RecievedData){
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62

    1248:	e6 e5       	ldi	r30, 0x56	; 86
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	84 e8       	ldi	r24, 0x84	; 132
    124e:	80 83       	st	Z, r24
	TWI_ErrStatus Local_ErrorState = NoError;
    1250:	e6 e5       	ldi	r30, 0x56	; 86
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	dc f7       	brge	.-10     	; 0x1250 <I2C_Read_Nack+0x10>

    125a:	e3 e2       	ldi	r30, 0x23	; 35
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
	/*Set Ack Bit*/
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <I2C_Slave_Init>:
	SET_BIT(TWCR,6);

	/*Clear The Interrupt Flag to start the prev operation*/
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR, 7);
    1272:	e2 e2       	ldi	r30, 0x22	; 34
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	80 83       	st	Z, r24

    127a:	e6 e5       	ldi	r30, 0x56	; 86
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	84 ec       	ldi	r24, 0xC4	; 196
    1280:	80 83       	st	Z, r24
	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <I2C_Slave_Listen>:
	while(GET_BIT(TWCR, 7) == 0);

	if((TWSR & 0xf8) != 0x60){
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <I2C_Slave_Listen+0x6>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
			Local_ErrorState = SlaveAdderessRecievedErr;
	}

	//////////////////////////////
    1294:	e6 e5       	ldi	r30, 0x56	; 86
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	88 23       	and	r24, r24
    129c:	dc f7       	brge	.-10     	; 0x1294 <I2C_Slave_Listen+0xa>

    129e:	e1 e2       	ldi	r30, 0x21	; 33
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 7f       	andi	r24, 0xF8	; 248
    12a6:	89 83       	std	Y+1, r24	; 0x01
	/*Set Ack Bit*/
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	80 36       	cpi	r24, 0x60	; 96
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <I2C_Slave_Listen+0x2a>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	88 36       	cpi	r24, 0x68	; 104
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <I2C_Slave_Listen+0x2e>
	SET_BIT(TWCR,6);
    12b4:	1a 82       	std	Y+2, r1	; 0x02
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <I2C_Slave_Listen+0x50>

    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	88 3a       	cpi	r24, 0xA8	; 168
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <I2C_Slave_Listen+0x3a>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	80 3b       	cpi	r24, 0xB0	; 176
    12c2:	19 f4       	brne	.+6      	; 0x12ca <I2C_Slave_Listen+0x40>
	/*Clear The Interrupt Flag to start the prev operation*/
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	8a 83       	std	Y+2, r24	; 0x02
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <I2C_Slave_Listen+0x50>
	SET_BIT(TWCR, 7);
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	80 37       	cpi	r24, 0x70	; 112
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <I2C_Slave_Listen+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 37       	cpi	r24, 0x78	; 120
    12d4:	f9 f6       	brne	.-66     	; 0x1294 <I2C_Slave_Listen+0xa>

    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	8a 83       	std	Y+2, r24	; 0x02
	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);

    12da:	8a 81       	ldd	r24, Y+2	; 0x02
	if((TWSR & 0xf8) != 0x80){
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <I2C_Slave_Transmit>:
		Local_ErrorState = SlaveDataRecievedErr;
	}
	else{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <I2C_Slave_Transmit+0x6>
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	8a 83       	std	Y+2, r24	; 0x02
		*A_pu8RecievedData = TWDR;
	}
    12f4:	e3 e2       	ldi	r30, 0x23	; 35
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24

    12fc:	e6 e5       	ldi	r30, 0x56	; 86
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	84 ec       	ldi	r24, 0xC4	; 196
    1302:	80 83       	st	Z, r24
	return Local_ErrorState;
    1304:	e6 e5       	ldi	r30, 0x56	; 86
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 23       	and	r24, r24
    130c:	dc f7       	brge	.-10     	; 0x1304 <I2C_Slave_Transmit+0x1e>

    130e:	e1 e2       	ldi	r30, 0x21	; 33
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	88 7f       	andi	r24, 0xF8	; 248
    1316:	89 83       	std	Y+1, r24	; 0x01

    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	80 3a       	cpi	r24, 0xA0	; 160
    131c:	51 f4       	brne	.+20     	; 0x1332 <I2C_Slave_Transmit+0x4c>
}

    131e:	a6 e5       	ldi	r26, 0x56	; 86
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e6 e5       	ldi	r30, 0x56	; 86
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 68       	ori	r24, 0x80	; 128
    132a:	8c 93       	st	X, r24
void MTWI_voidSendStopCondition(){
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	1a c0       	rjmp	.+52     	; 0x1366 <I2C_Slave_Transmit+0x80>

	/*Stop Condtion on the bus*/
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 3b       	cpi	r24, 0xB8	; 184
    1336:	11 f4       	brne	.+4      	; 0x133c <I2C_Slave_Transmit+0x56>
	SET_BIT(TWCR, 4);
    1338:	1b 82       	std	Y+3, r1	; 0x03
    133a:	15 c0       	rjmp	.+42     	; 0x1366 <I2C_Slave_Transmit+0x80>

    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	80 3c       	cpi	r24, 0xC0	; 192
    1340:	51 f4       	brne	.+20     	; 0x1356 <I2C_Slave_Transmit+0x70>
	/*Clear Interrupt Flag*/
	SET_BIT(TWCR, 7);
    1342:	a6 e5       	ldi	r26, 0x56	; 86
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e6 e5       	ldi	r30, 0x56	; 86
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 68       	ori	r24, 0x80	; 128
    134e:	8c 93       	st	X, r24
}
    1350:	8e ef       	ldi	r24, 0xFE	; 254
    1352:	8b 83       	std	Y+3, r24	; 0x03
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <I2C_Slave_Transmit+0x80>


    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	88 3c       	cpi	r24, 0xC8	; 200
    135a:	19 f4       	brne	.+6      	; 0x1362 <I2C_Slave_Transmit+0x7c>
    135c:	8d ef       	ldi	r24, 0xFD	; 253
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <I2C_Slave_Transmit+0x80>
    1362:	8c ef       	ldi	r24, 0xFC	; 252
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <I2C_Slave_Receive>:
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <I2C_Slave_Receive+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	e6 e5       	ldi	r30, 0x56	; 86
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	84 ec       	ldi	r24, 0xC4	; 196
    1384:	80 83       	st	Z, r24
    1386:	e6 e5       	ldi	r30, 0x56	; 86
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	dc f7       	brge	.-10     	; 0x1386 <I2C_Slave_Receive+0x12>
    1390:	e1 e2       	ldi	r30, 0x21	; 33
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	88 7f       	andi	r24, 0xF8	; 248
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	80 38       	cpi	r24, 0x80	; 128
    139e:	19 f0       	breq	.+6      	; 0x13a6 <I2C_Slave_Receive+0x32>
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	80 39       	cpi	r24, 0x90	; 144
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <I2C_Slave_Receive+0x3c>
    13a6:	e3 e2       	ldi	r30, 0x23	; 35
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	1a c0       	rjmp	.+52     	; 0x13e4 <I2C_Slave_Receive+0x70>
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	88 38       	cpi	r24, 0x88	; 136
    13b4:	19 f0       	breq	.+6      	; 0x13bc <I2C_Slave_Receive+0x48>
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	88 39       	cpi	r24, 0x98	; 152
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <I2C_Slave_Receive+0x52>
    13bc:	e3 e2       	ldi	r30, 0x23	; 35
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <I2C_Slave_Receive+0x70>
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	80 3a       	cpi	r24, 0xA0	; 160
    13ca:	51 f4       	brne	.+20     	; 0x13e0 <I2C_Slave_Receive+0x6c>
    13cc:	a6 e5       	ldi	r26, 0x56	; 86
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e6 e5       	ldi	r30, 0x56	; 86
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	8c 93       	st	X, r24
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	8a 83       	std	Y+2, r24	; 0x02
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <I2C_Slave_Receive+0x70>
    13e0:	8e ef       	ldi	r24, 0xFE	; 254
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <MGIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Interface.h"


void MGIE_voidEnable()
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    13f8:	af e5       	ldi	r26, 0x5F	; 95
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ef e5       	ldi	r30, 0x5F	; 95
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8c 93       	st	X, r24
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <MGIE_voidDisable>:

void MGIE_voidDisable()
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1414:	af e5       	ldi	r26, 0x5F	; 95
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ef e5       	ldi	r30, 0x5F	; 95
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 77       	andi	r24, 0x7F	; 127
    1420:	8c 93       	st	X, r24
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <MEXTI_voidSenseControl>:
 * 2 -----> Falling
 * 3 -----> Rising
 *
 * */
void MEXTI_voidSenseControl(u8 A_u8EXTINumber, u8 A_u8State)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	2a 97       	sbiw	r28, 0x0a	; 10
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTINumber)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3a 87       	std	Y+10, r19	; 0x0a
    1448:	29 87       	std	Y+9, r18	; 0x09
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <MEXTI_voidSenseControl+0x2e>
    1454:	66 c0       	rjmp	.+204    	; 0x1522 <MEXTI_voidSenseControl+0xfa>
    1456:	29 85       	ldd	r18, Y+9	; 0x09
    1458:	3a 85       	ldd	r19, Y+10	; 0x0a
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <MEXTI_voidSenseControl+0x3a>
    1460:	bb c0       	rjmp	.+374    	; 0x15d8 <MEXTI_voidSenseControl+0x1b0>
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f0       	breq	.+2      	; 0x146c <MEXTI_voidSenseControl+0x44>
    146a:	d5 c0       	rjmp	.+426    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
	{
		case 0:
			switch(A_u8State)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	38 87       	std	Y+8, r19	; 0x08
    1474:	2f 83       	std	Y+7, r18	; 0x07
    1476:	8f 81       	ldd	r24, Y+7	; 0x07
    1478:	98 85       	ldd	r25, Y+8	; 0x08
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	21 f1       	breq	.+72     	; 0x14c8 <MEXTI_voidSenseControl+0xa0>
    1480:	2f 81       	ldd	r18, Y+7	; 0x07
    1482:	38 85       	ldd	r19, Y+8	; 0x08
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <MEXTI_voidSenseControl+0x6c>
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <MEXTI_voidSenseControl+0x82>
    1492:	c1 c0       	rjmp	.+386    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
    1494:	2f 81       	ldd	r18, Y+7	; 0x07
    1496:	38 85       	ldd	r19, Y+8	; 0x08
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	21 f1       	breq	.+72     	; 0x14e6 <MEXTI_voidSenseControl+0xbe>
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	71 f1       	breq	.+92     	; 0x1504 <MEXTI_voidSenseControl+0xdc>
    14a8:	b6 c0       	rjmp	.+364    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
			{
				case 0:
					CLR_BIT(MCUCR, 0);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    14b8:	a5 e5       	ldi	r26, 0x55	; 85
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e5       	ldi	r30, 0x55	; 85
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8d 7f       	andi	r24, 0xFD	; 253
    14c4:	8c 93       	st	X, r24
    14c6:	a7 c0       	rjmp	.+334    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
    14c8:	a5 e5       	ldi	r26, 0x55	; 85
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e5       	ldi	r30, 0x55	; 85
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8d 7f       	andi	r24, 0xFD	; 253
    14e2:	8c 93       	st	X, r24
    14e4:	98 c0       	rjmp	.+304    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	8c 93       	st	X, r24
    1502:	89 c0       	rjmp	.+274    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
			    break;

				case 3:
					SET_BIT(MCUCR, 0);
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	81 60       	ori	r24, 0x01	; 1
    1510:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	82 60       	ori	r24, 0x02	; 2
    151e:	8c 93       	st	X, r24
    1520:	7a c0       	rjmp	.+244    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;
			}
		break;

		case 1:
			switch(A_u8State)
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3e 83       	std	Y+6, r19	; 0x06
    152a:	2d 83       	std	Y+5, r18	; 0x05
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	21 f1       	breq	.+72     	; 0x157e <MEXTI_voidSenseControl+0x156>
    1536:	2d 81       	ldd	r18, Y+5	; 0x05
    1538:	3e 81       	ldd	r19, Y+6	; 0x06
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <MEXTI_voidSenseControl+0x122>
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 f0       	breq	.+24     	; 0x1560 <MEXTI_voidSenseControl+0x138>
    1548:	66 c0       	rjmp	.+204    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
    154a:	2d 81       	ldd	r18, Y+5	; 0x05
    154c:	3e 81       	ldd	r19, Y+6	; 0x06
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	21 f1       	breq	.+72     	; 0x159c <MEXTI_voidSenseControl+0x174>
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	71 f1       	breq	.+92     	; 0x15ba <MEXTI_voidSenseControl+0x192>
    155e:	5b c0       	rjmp	.+182    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
			{
				case 0:
					CLR_BIT(MCUCR,2);
    1560:	a5 e5       	ldi	r26, 0x55	; 85
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e5       	ldi	r30, 0x55	; 85
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8b 7f       	andi	r24, 0xFB	; 251
    156c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    156e:	a5 e5       	ldi	r26, 0x55	; 85
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e5       	ldi	r30, 0x55	; 85
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	87 7f       	andi	r24, 0xF7	; 247
    157a:	8c 93       	st	X, r24
    157c:	4c c0       	rjmp	.+152    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
    157e:	a5 e5       	ldi	r26, 0x55	; 85
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e5       	ldi	r30, 0x55	; 85
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	84 60       	ori	r24, 0x04	; 4
    158a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
    158c:	a5 e5       	ldi	r26, 0x55	; 85
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e5       	ldi	r30, 0x55	; 85
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	87 7f       	andi	r24, 0xF7	; 247
    1598:	8c 93       	st	X, r24
    159a:	3d c0       	rjmp	.+122    	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
    159c:	a5 e5       	ldi	r26, 0x55	; 85
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e5       	ldi	r30, 0x55	; 85
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8b 7f       	andi	r24, 0xFB	; 251
    15a8:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    15aa:	a5 e5       	ldi	r26, 0x55	; 85
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e5       	ldi	r30, 0x55	; 85
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	88 60       	ori	r24, 0x08	; 8
    15b6:	8c 93       	st	X, r24
    15b8:	2e c0       	rjmp	.+92     	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
    15ba:	a5 e5       	ldi	r26, 0x55	; 85
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e5       	ldi	r30, 0x55	; 85
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	84 60       	ori	r24, 0x04	; 4
    15c6:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    15c8:	a5 e5       	ldi	r26, 0x55	; 85
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e5       	ldi	r30, 0x55	; 85
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				break;
			}
		break;

		case 2:
			switch(A_u8State)
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	3c 83       	std	Y+4, r19	; 0x04
    15e0:	2b 83       	std	Y+3, r18	; 0x03
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	91 05       	cpc	r25, r1
    15ea:	31 f0       	breq	.+12     	; 0x15f8 <MEXTI_voidSenseControl+0x1d0>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	23 30       	cpi	r18, 0x03	; 3
    15f2:	31 05       	cpc	r19, r1
    15f4:	49 f0       	breq	.+18     	; 0x1608 <MEXTI_voidSenseControl+0x1e0>
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
			{
				case 2: CLR_BIT(MCUCSR, 6); break;
    15f8:	a4 e5       	ldi	r26, 0x54	; 84
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e4 e5       	ldi	r30, 0x54	; 84
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 7b       	andi	r24, 0xBF	; 191
    1604:	8c 93       	st	X, r24
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <MEXTI_voidSenseControl+0x1ee>
				case 3: SET_BIT(MCUCSR, 6); break;
    1608:	a4 e5       	ldi	r26, 0x54	; 84
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e4 e5       	ldi	r30, 0x54	; 84
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 64       	ori	r24, 0x40	; 64
    1614:	8c 93       	st	X, r24
			}
		break;
	}
}
    1616:	2a 96       	adiw	r28, 0x0a	; 10
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <MEXTI_voidEnable>:

void MEXTI_voidEnable(u8 A_u8EXTINumber)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <MEXTI_voidEnable+0x6>
    162e:	0f 92       	push	r0
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTINumber)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3b 83       	std	Y+3, r19	; 0x03
    163e:	2a 83       	std	Y+2, r18	; 0x02
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	89 f0       	breq	.+34     	; 0x166c <MEXTI_voidEnable+0x44>
    164a:	2a 81       	ldd	r18, Y+2	; 0x02
    164c:	3b 81       	ldd	r19, Y+3	; 0x03
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	a1 f0       	breq	.+40     	; 0x167c <MEXTI_voidEnable+0x54>
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	b9 f4       	brne	.+46     	; 0x168a <MEXTI_voidEnable+0x62>
	{
		case 0: SET_BIT(GICR, 6); break;
    165c:	ab e5       	ldi	r26, 0x5B	; 91
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	eb e5       	ldi	r30, 0x5B	; 91
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	8c 93       	st	X, r24
    166a:	0f c0       	rjmp	.+30     	; 0x168a <MEXTI_voidEnable+0x62>

		case 1: SET_BIT(GICR, 7); break;
    166c:	ab e5       	ldi	r26, 0x5B	; 91
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e5       	ldi	r30, 0x5B	; 91
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	8c 93       	st	X, r24
    167a:	07 c0       	rjmp	.+14     	; 0x168a <MEXTI_voidEnable+0x62>

		case 2: SET_BIT(GICR, 5); break;
    167c:	ab e5       	ldi	r26, 0x5B	; 91
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e5       	ldi	r30, 0x5B	; 91
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	8c 93       	st	X, r24
	}
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8EXTINumber)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <MEXTI_voidDisable+0x6>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTINumber)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3b 83       	std	Y+3, r19	; 0x03
    16ac:	2a 83       	std	Y+2, r18	; 0x02
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	89 f0       	breq	.+34     	; 0x16da <MEXTI_voidDisable+0x44>
    16b8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ba:	3b 81       	ldd	r19, Y+3	; 0x03
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	a1 f0       	breq	.+40     	; 0x16ea <MEXTI_voidDisable+0x54>
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	9b 81       	ldd	r25, Y+3	; 0x03
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	b9 f4       	brne	.+46     	; 0x16f8 <MEXTI_voidDisable+0x62>
	{
		case 0: CLR_BIT(GICR, 6); break;
    16ca:	ab e5       	ldi	r26, 0x5B	; 91
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e5       	ldi	r30, 0x5B	; 91
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8f 7b       	andi	r24, 0xBF	; 191
    16d6:	8c 93       	st	X, r24
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <MEXTI_voidDisable+0x62>

		case 1: CLR_BIT(GICR, 7); break;
    16da:	ab e5       	ldi	r26, 0x5B	; 91
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e5       	ldi	r30, 0x5B	; 91
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 77       	andi	r24, 0x7F	; 127
    16e6:	8c 93       	st	X, r24
    16e8:	07 c0       	rjmp	.+14     	; 0x16f8 <MEXTI_voidDisable+0x62>

		case 2: CLR_BIT(GICR, 5); break;
    16ea:	ab e5       	ldi	r26, 0x5B	; 91
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e5       	ldi	r30, 0x5B	; 91
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 7d       	andi	r24, 0xDF	; 223
    16f6:	8c 93       	st	X, r24
	}
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <MDIO_voidSetPinDirection>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Interface.h"


void MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	2d 97       	sbiw	r28, 0x0d	; 13
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	6a 83       	std	Y+2, r22	; 0x02
    171c:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinNumber < 8 && A_u8Dir < 2)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 30       	cpi	r24, 0x08	; 8
    1722:	08 f0       	brcs	.+2      	; 0x1726 <MDIO_voidSetPinDirection+0x22>
    1724:	06 c1       	rjmp	.+524    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	08 f0       	brcs	.+2      	; 0x172e <MDIO_voidSetPinDirection+0x2a>
    172c:	02 c1       	rjmp	.+516    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
	{
		switch(A_u8PortNumber)
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 87       	std	Y+13, r19	; 0x0d
    1736:	2c 87       	std	Y+12, r18	; 0x0c
    1738:	8c 85       	ldd	r24, Y+12	; 0x0c
    173a:	9d 85       	ldd	r25, Y+13	; 0x0d
    173c:	82 34       	cpi	r24, 0x42	; 66
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <MDIO_voidSetPinDirection+0x40>
    1742:	50 c0       	rjmp	.+160    	; 0x17e4 <MDIO_voidSetPinDirection+0xe0>
    1744:	2c 85       	ldd	r18, Y+12	; 0x0c
    1746:	3d 85       	ldd	r19, Y+13	; 0x0d
    1748:	23 34       	cpi	r18, 0x43	; 67
    174a:	31 05       	cpc	r19, r1
    174c:	34 f4       	brge	.+12     	; 0x175a <MDIO_voidSetPinDirection+0x56>
    174e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1750:	9d 85       	ldd	r25, Y+13	; 0x0d
    1752:	81 34       	cpi	r24, 0x41	; 65
    1754:	91 05       	cpc	r25, r1
    1756:	71 f0       	breq	.+28     	; 0x1774 <MDIO_voidSetPinDirection+0x70>
    1758:	ec c0       	rjmp	.+472    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
    175a:	2c 85       	ldd	r18, Y+12	; 0x0c
    175c:	3d 85       	ldd	r19, Y+13	; 0x0d
    175e:	23 34       	cpi	r18, 0x43	; 67
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <MDIO_voidSetPinDirection+0x62>
    1764:	77 c0       	rjmp	.+238    	; 0x1854 <MDIO_voidSetPinDirection+0x150>
    1766:	8c 85       	ldd	r24, Y+12	; 0x0c
    1768:	9d 85       	ldd	r25, Y+13	; 0x0d
    176a:	84 34       	cpi	r24, 0x44	; 68
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <MDIO_voidSetPinDirection+0x6e>
    1770:	a9 c0       	rjmp	.+338    	; 0x18c4 <MDIO_voidSetPinDirection+0x1c0>
    1772:	df c0       	rjmp	.+446    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
		{
			case 'A':
				switch(A_u8Dir)
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	3b 87       	std	Y+11, r19	; 0x0b
    177c:	2a 87       	std	Y+10, r18	; 0x0a
    177e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1780:	9b 85       	ldd	r25, Y+11	; 0x0b
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	31 f0       	breq	.+12     	; 0x1792 <MDIO_voidSetPinDirection+0x8e>
    1786:	2a 85       	ldd	r18, Y+10	; 0x0a
    1788:	3b 85       	ldd	r19, Y+11	; 0x0b
    178a:	21 30       	cpi	r18, 0x01	; 1
    178c:	31 05       	cpc	r19, r1
    178e:	b1 f0       	breq	.+44     	; 0x17bc <MDIO_voidSetPinDirection+0xb8>
    1790:	d0 c0       	rjmp	.+416    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRA, A_u8PinNumber); break;
    1792:	aa e3       	ldi	r26, 0x3A	; 58
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ea e3       	ldi	r30, 0x3A	; 58
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <MDIO_voidSetPinDirection+0xac>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <MDIO_voidSetPinDirection+0xa8>
    17b4:	80 95       	com	r24
    17b6:	84 23       	and	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	bb c0       	rjmp	.+374    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    17bc:	aa e3       	ldi	r26, 0x3A	; 58
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ea e3       	ldi	r30, 0x3A	; 58
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <MDIO_voidSetPinDirection+0xd6>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <MDIO_voidSetPinDirection+0xd2>
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	a7 c0       	rjmp	.+334    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'B':
				switch(A_u8Dir)
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	39 87       	std	Y+9, r19	; 0x09
    17ec:	28 87       	std	Y+8, r18	; 0x08
    17ee:	88 85       	ldd	r24, Y+8	; 0x08
    17f0:	99 85       	ldd	r25, Y+9	; 0x09
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	31 f0       	breq	.+12     	; 0x1802 <MDIO_voidSetPinDirection+0xfe>
    17f6:	28 85       	ldd	r18, Y+8	; 0x08
    17f8:	39 85       	ldd	r19, Y+9	; 0x09
    17fa:	21 30       	cpi	r18, 0x01	; 1
    17fc:	31 05       	cpc	r19, r1
    17fe:	b1 f0       	breq	.+44     	; 0x182c <MDIO_voidSetPinDirection+0x128>
    1800:	98 c0       	rjmp	.+304    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRB, A_u8PinNumber); break;
    1802:	a7 e3       	ldi	r26, 0x37	; 55
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e3       	ldi	r30, 0x37	; 55
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <MDIO_voidSetPinDirection+0x11c>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <MDIO_voidSetPinDirection+0x118>
    1824:	80 95       	com	r24
    1826:	84 23       	and	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	83 c0       	rjmp	.+262    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    182c:	a7 e3       	ldi	r26, 0x37	; 55
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e7 e3       	ldi	r30, 0x37	; 55
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <MDIO_voidSetPinDirection+0x146>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <MDIO_voidSetPinDirection+0x142>
    184e:	84 2b       	or	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	6f c0       	rjmp	.+222    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'C':
				switch(A_u8Dir)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3f 83       	std	Y+7, r19	; 0x07
    185c:	2e 83       	std	Y+6, r18	; 0x06
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	31 f0       	breq	.+12     	; 0x1872 <MDIO_voidSetPinDirection+0x16e>
    1866:	2e 81       	ldd	r18, Y+6	; 0x06
    1868:	3f 81       	ldd	r19, Y+7	; 0x07
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	31 05       	cpc	r19, r1
    186e:	b1 f0       	breq	.+44     	; 0x189c <MDIO_voidSetPinDirection+0x198>
    1870:	60 c0       	rjmp	.+192    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRC, A_u8PinNumber); break;
    1872:	a4 e3       	ldi	r26, 0x34	; 52
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e4 e3       	ldi	r30, 0x34	; 52
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <MDIO_voidSetPinDirection+0x18c>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <MDIO_voidSetPinDirection+0x188>
    1894:	80 95       	com	r24
    1896:	84 23       	and	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	4b c0       	rjmp	.+150    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    189c:	a4 e3       	ldi	r26, 0x34	; 52
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e4 e3       	ldi	r30, 0x34	; 52
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <MDIO_voidSetPinDirection+0x1b6>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <MDIO_voidSetPinDirection+0x1b2>
    18be:	84 2b       	or	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	37 c0       	rjmp	.+110    	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'D':
				switch(A_u8Dir)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3d 83       	std	Y+5, r19	; 0x05
    18cc:	2c 83       	std	Y+4, r18	; 0x04
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	31 f0       	breq	.+12     	; 0x18e2 <MDIO_voidSetPinDirection+0x1de>
    18d6:	2c 81       	ldd	r18, Y+4	; 0x04
    18d8:	3d 81       	ldd	r19, Y+5	; 0x05
    18da:	21 30       	cpi	r18, 0x01	; 1
    18dc:	31 05       	cpc	r19, r1
    18de:	b1 f0       	breq	.+44     	; 0x190c <MDIO_voidSetPinDirection+0x208>
    18e0:	28 c0       	rjmp	.+80     	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
				{
						case 0: CLR_BIT(DDRD, A_u8PinNumber); break;
    18e2:	a1 e3       	ldi	r26, 0x31	; 49
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e1 e3       	ldi	r30, 0x31	; 49
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <MDIO_voidSetPinDirection+0x1fc>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <MDIO_voidSetPinDirection+0x1f8>
    1904:	80 95       	com	r24
    1906:	84 23       	and	r24, r20
    1908:	8c 93       	st	X, r24
    190a:	13 c0       	rjmp	.+38     	; 0x1932 <MDIO_voidSetPinDirection+0x22e>
						case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    190c:	a1 e3       	ldi	r26, 0x31	; 49
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e1 e3       	ldi	r30, 0x31	; 49
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <MDIO_voidSetPinDirection+0x226>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <MDIO_voidSetPinDirection+0x222>
    192e:	84 2b       	or	r24, r20
    1930:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	2d 97       	sbiw	r28, 0x0d	; 13
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	6a 83       	std	Y+2, r22	; 0x02
    195c:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinNumber < 8  && A_u8PinValue < 2)
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	08 f0       	brcs	.+2      	; 0x1966 <MDIO_voidSetPinValue+0x22>
    1964:	06 c1       	rjmp	.+524    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	08 f0       	brcs	.+2      	; 0x196e <MDIO_voidSetPinValue+0x2a>
    196c:	02 c1       	rjmp	.+516    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
	{
		switch(A_u8PortNumber)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3d 87       	std	Y+13, r19	; 0x0d
    1976:	2c 87       	std	Y+12, r18	; 0x0c
    1978:	8c 85       	ldd	r24, Y+12	; 0x0c
    197a:	9d 85       	ldd	r25, Y+13	; 0x0d
    197c:	82 34       	cpi	r24, 0x42	; 66
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <MDIO_voidSetPinValue+0x40>
    1982:	50 c0       	rjmp	.+160    	; 0x1a24 <MDIO_voidSetPinValue+0xe0>
    1984:	2c 85       	ldd	r18, Y+12	; 0x0c
    1986:	3d 85       	ldd	r19, Y+13	; 0x0d
    1988:	23 34       	cpi	r18, 0x43	; 67
    198a:	31 05       	cpc	r19, r1
    198c:	34 f4       	brge	.+12     	; 0x199a <MDIO_voidSetPinValue+0x56>
    198e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1990:	9d 85       	ldd	r25, Y+13	; 0x0d
    1992:	81 34       	cpi	r24, 0x41	; 65
    1994:	91 05       	cpc	r25, r1
    1996:	71 f0       	breq	.+28     	; 0x19b4 <MDIO_voidSetPinValue+0x70>
    1998:	ec c0       	rjmp	.+472    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
    199a:	2c 85       	ldd	r18, Y+12	; 0x0c
    199c:	3d 85       	ldd	r19, Y+13	; 0x0d
    199e:	23 34       	cpi	r18, 0x43	; 67
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <MDIO_voidSetPinValue+0x62>
    19a4:	77 c0       	rjmp	.+238    	; 0x1a94 <MDIO_voidSetPinValue+0x150>
    19a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    19aa:	84 34       	cpi	r24, 0x44	; 68
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <MDIO_voidSetPinValue+0x6e>
    19b0:	a9 c0       	rjmp	.+338    	; 0x1b04 <MDIO_voidSetPinValue+0x1c0>
    19b2:	df c0       	rjmp	.+446    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
		{
			case 'A':
				switch(A_u8PinValue)
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3b 87       	std	Y+11, r19	; 0x0b
    19bc:	2a 87       	std	Y+10, r18	; 0x0a
    19be:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	31 f0       	breq	.+12     	; 0x19d2 <MDIO_voidSetPinValue+0x8e>
    19c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    19c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    19ca:	21 30       	cpi	r18, 0x01	; 1
    19cc:	31 05       	cpc	r19, r1
    19ce:	b1 f0       	breq	.+44     	; 0x19fc <MDIO_voidSetPinValue+0xb8>
    19d0:	d0 c0       	rjmp	.+416    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTA, A_u8PinNumber); break;
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <MDIO_voidSetPinValue+0xac>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <MDIO_voidSetPinValue+0xa8>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	bb c0       	rjmp	.+374    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTA, A_u8PinNumber); break;
    19fc:	ab e3       	ldi	r26, 0x3B	; 59
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	eb e3       	ldi	r30, 0x3B	; 59
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <MDIO_voidSetPinValue+0xd6>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <MDIO_voidSetPinValue+0xd2>
    1a1e:	84 2b       	or	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	a7 c0       	rjmp	.+334    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case'B':
				switch(A_u8PinValue)
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	39 87       	std	Y+9, r19	; 0x09
    1a2c:	28 87       	std	Y+8, r18	; 0x08
    1a2e:	88 85       	ldd	r24, Y+8	; 0x08
    1a30:	99 85       	ldd	r25, Y+9	; 0x09
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <MDIO_voidSetPinValue+0xfe>
    1a36:	28 85       	ldd	r18, Y+8	; 0x08
    1a38:	39 85       	ldd	r19, Y+9	; 0x09
    1a3a:	21 30       	cpi	r18, 0x01	; 1
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	b1 f0       	breq	.+44     	; 0x1a6c <MDIO_voidSetPinValue+0x128>
    1a40:	98 c0       	rjmp	.+304    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTB, A_u8PinNumber); break;
    1a42:	a8 e3       	ldi	r26, 0x38	; 56
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <MDIO_voidSetPinValue+0x11c>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <MDIO_voidSetPinValue+0x118>
    1a64:	80 95       	com	r24
    1a66:	84 23       	and	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	83 c0       	rjmp	.+262    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTB, A_u8PinNumber); break;
    1a6c:	a8 e3       	ldi	r26, 0x38	; 56
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e8 e3       	ldi	r30, 0x38	; 56
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <MDIO_voidSetPinValue+0x146>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <MDIO_voidSetPinValue+0x142>
    1a8e:	84 2b       	or	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	6f c0       	rjmp	.+222    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case 'C':
				switch(A_u8PinValue)
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3f 83       	std	Y+7, r19	; 0x07
    1a9c:	2e 83       	std	Y+6, r18	; 0x06
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <MDIO_voidSetPinValue+0x16e>
    1aa6:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa8:	3f 81       	ldd	r19, Y+7	; 0x07
    1aaa:	21 30       	cpi	r18, 0x01	; 1
    1aac:	31 05       	cpc	r19, r1
    1aae:	b1 f0       	breq	.+44     	; 0x1adc <MDIO_voidSetPinValue+0x198>
    1ab0:	60 c0       	rjmp	.+192    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTC, A_u8PinNumber); break;
    1ab2:	a5 e3       	ldi	r26, 0x35	; 53
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e3       	ldi	r30, 0x35	; 53
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <MDIO_voidSetPinValue+0x18c>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <MDIO_voidSetPinValue+0x188>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	4b c0       	rjmp	.+150    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTC, A_u8PinNumber); break;
    1adc:	a5 e3       	ldi	r26, 0x35	; 53
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e5 e3       	ldi	r30, 0x35	; 53
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <MDIO_voidSetPinValue+0x1b6>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <MDIO_voidSetPinValue+0x1b2>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	37 c0       	rjmp	.+110    	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case 'D':
				switch(A_u8PinValue)
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3d 83       	std	Y+5, r19	; 0x05
    1b0c:	2c 83       	std	Y+4, r18	; 0x04
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <MDIO_voidSetPinValue+0x1de>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	21 30       	cpi	r18, 0x01	; 1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	b1 f0       	breq	.+44     	; 0x1b4c <MDIO_voidSetPinValue+0x208>
    1b20:	28 c0       	rjmp	.+80     	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTD, A_u8PinNumber); break;
    1b22:	a2 e3       	ldi	r26, 0x32	; 50
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e2 e3       	ldi	r30, 0x32	; 50
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <MDIO_voidSetPinValue+0x1fc>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <MDIO_voidSetPinValue+0x1f8>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	13 c0       	rjmp	.+38     	; 0x1b72 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTD, A_u8PinNumber); break;
    1b4c:	a2 e3       	ldi	r26, 0x32	; 50
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e2 e3       	ldi	r30, 0x32	; 50
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <MDIO_voidSetPinValue+0x226>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <MDIO_voidSetPinValue+0x222>
    1b6e:	84 2b       	or	r24, r20
    1b70:	8c 93       	st	X, r24
				}
				break;
		}
	}

}
    1b72:	2d 96       	adiw	r28, 0x0d	; 13
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <MDIO_voidSetPortDirection+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <MDIO_voidSetPortDirection+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNumber)
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3c 83       	std	Y+4, r19	; 0x04
    1b9c:	2b 83       	std	Y+3, r18	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	82 34       	cpi	r24, 0x42	; 66
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	d9 f0       	breq	.+54     	; 0x1bde <MDIO_voidSetPortDirection+0x5a>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	23 34       	cpi	r18, 0x43	; 67
    1bae:	31 05       	cpc	r19, r1
    1bb0:	34 f4       	brge	.+12     	; 0x1bbe <MDIO_voidSetPortDirection+0x3a>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	81 34       	cpi	r24, 0x41	; 65
    1bb8:	91 05       	cpc	r25, r1
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <MDIO_voidSetPortDirection+0x50>
    1bbc:	1e c0       	rjmp	.+60     	; 0x1bfa <MDIO_voidSetPortDirection+0x76>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	23 34       	cpi	r18, 0x43	; 67
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	81 f0       	breq	.+32     	; 0x1be8 <MDIO_voidSetPortDirection+0x64>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	84 34       	cpi	r24, 0x44	; 68
    1bce:	91 05       	cpc	r25, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <MDIO_voidSetPortDirection+0x6e>
    1bd2:	13 c0       	rjmp	.+38     	; 0x1bfa <MDIO_voidSetPortDirection+0x76>
	{
		case 'A': DDRA = A_u8Dir; break;
    1bd4:	ea e3       	ldi	r30, 0x3A	; 58
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
    1bdc:	0e c0       	rjmp	.+28     	; 0x1bfa <MDIO_voidSetPortDirection+0x76>

		case 'B': DDRB = A_u8Dir; break;
    1bde:	e7 e3       	ldi	r30, 0x37	; 55
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <MDIO_voidSetPortDirection+0x76>

		case 'C': DDRC = A_u8Dir; break;
    1be8:	e4 e3       	ldi	r30, 0x34	; 52
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <MDIO_voidSetPortDirection+0x76>

		case 'D': DDRD = A_u8Dir; break;
    1bf2:	e1 e3       	ldi	r30, 0x31	; 49
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
	}
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <MDIO_voidSetPortValue+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <MDIO_voidSetPortValue+0x8>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNumber)
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	3c 83       	std	Y+4, r19	; 0x04
    1c20:	2b 83       	std	Y+3, r18	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	82 34       	cpi	r24, 0x42	; 66
    1c28:	91 05       	cpc	r25, r1
    1c2a:	d9 f0       	breq	.+54     	; 0x1c62 <MDIO_voidSetPortValue+0x5a>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	23 34       	cpi	r18, 0x43	; 67
    1c32:	31 05       	cpc	r19, r1
    1c34:	34 f4       	brge	.+12     	; 0x1c42 <MDIO_voidSetPortValue+0x3a>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	81 34       	cpi	r24, 0x41	; 65
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <MDIO_voidSetPortValue+0x50>
    1c40:	1e c0       	rjmp	.+60     	; 0x1c7e <MDIO_voidSetPortValue+0x76>
    1c42:	2b 81       	ldd	r18, Y+3	; 0x03
    1c44:	3c 81       	ldd	r19, Y+4	; 0x04
    1c46:	23 34       	cpi	r18, 0x43	; 67
    1c48:	31 05       	cpc	r19, r1
    1c4a:	81 f0       	breq	.+32     	; 0x1c6c <MDIO_voidSetPortValue+0x64>
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	84 34       	cpi	r24, 0x44	; 68
    1c52:	91 05       	cpc	r25, r1
    1c54:	81 f0       	breq	.+32     	; 0x1c76 <MDIO_voidSetPortValue+0x6e>
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <MDIO_voidSetPortValue+0x76>
	{
		case 'A': PORTA = A_u8PortValue; break;
    1c58:	eb e3       	ldi	r30, 0x3B	; 59
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	80 83       	st	Z, r24
    1c60:	0e c0       	rjmp	.+28     	; 0x1c7e <MDIO_voidSetPortValue+0x76>

		case 'B': PORTB = A_u8PortValue; break;
    1c62:	e8 e3       	ldi	r30, 0x38	; 56
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	80 83       	st	Z, r24
    1c6a:	09 c0       	rjmp	.+18     	; 0x1c7e <MDIO_voidSetPortValue+0x76>

		case 'C': PORTC = A_u8PortValue; break;
    1c6c:	e5 e3       	ldi	r30, 0x35	; 53
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 83       	st	Z, r24
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <MDIO_voidSetPortValue+0x76>

		case 'D': PORTD = A_u8PortValue; break;
    1c76:	e2 e3       	ldi	r30, 0x32	; 50
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	80 83       	st	Z, r24
	}
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <MDIO_u8GetPinValue>:

/* return 0 1 */
u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <MDIO_u8GetPinValue+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <MDIO_u8GetPinValue+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
    1c9c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	if(A_u8PinNumber < 8)
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 30       	cpi	r24, 0x08	; 8
    1ca2:	08 f0       	brcs	.+2      	; 0x1ca6 <MDIO_u8GetPinValue+0x1a>
    1ca4:	68 c0       	rjmp	.+208    	; 0x1d76 <MDIO_u8GetPinValue+0xea>
	{
		switch(A_u8PortNumber)
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3d 83       	std	Y+5, r19	; 0x05
    1cae:	2c 83       	std	Y+4, r18	; 0x04
    1cb0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb2:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb4:	42 34       	cpi	r20, 0x42	; 66
    1cb6:	51 05       	cpc	r21, r1
    1cb8:	41 f1       	breq	.+80     	; 0x1d0a <MDIO_u8GetPinValue+0x7e>
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbe:	83 34       	cpi	r24, 0x43	; 67
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	34 f4       	brge	.+12     	; 0x1cd0 <MDIO_u8GetPinValue+0x44>
    1cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc8:	21 34       	cpi	r18, 0x41	; 65
    1cca:	31 05       	cpc	r19, r1
    1ccc:	61 f0       	breq	.+24     	; 0x1ce6 <MDIO_u8GetPinValue+0x5a>
    1cce:	55 c0       	rjmp	.+170    	; 0x1d7a <MDIO_u8GetPinValue+0xee>
    1cd0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cd2:	5d 81       	ldd	r21, Y+5	; 0x05
    1cd4:	43 34       	cpi	r20, 0x43	; 67
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	51 f1       	breq	.+84     	; 0x1d2e <MDIO_u8GetPinValue+0xa2>
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	84 34       	cpi	r24, 0x44	; 68
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	b9 f1       	breq	.+110    	; 0x1d52 <MDIO_u8GetPinValue+0xc6>
    1ce4:	4a c0       	rjmp	.+148    	; 0x1d7a <MDIO_u8GetPinValue+0xee>
		{
			case 'A': Local_u8Result = GET_BIT(PINA, A_u8PinNumber); break;
    1ce6:	e9 e3       	ldi	r30, 0x39	; 57
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <MDIO_u8GetPinValue+0x72>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <MDIO_u8GetPinValue+0x6e>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	38 c0       	rjmp	.+112    	; 0x1d7a <MDIO_u8GetPinValue+0xee>
			case 'B': Local_u8Result = GET_BIT(PINB, A_u8PinNumber); break;
    1d0a:	e6 e3       	ldi	r30, 0x36	; 54
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a9 01       	movw	r20, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <MDIO_u8GetPinValue+0x96>
    1d1e:	55 95       	asr	r21
    1d20:	47 95       	ror	r20
    1d22:	8a 95       	dec	r24
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <MDIO_u8GetPinValue+0x92>
    1d26:	ca 01       	movw	r24, r20
    1d28:	81 70       	andi	r24, 0x01	; 1
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	26 c0       	rjmp	.+76     	; 0x1d7a <MDIO_u8GetPinValue+0xee>
			case 'C': Local_u8Result = GET_BIT(PINC, A_u8PinNumber); break;
    1d2e:	e3 e3       	ldi	r30, 0x33	; 51
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a9 01       	movw	r20, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <MDIO_u8GetPinValue+0xba>
    1d42:	55 95       	asr	r21
    1d44:	47 95       	ror	r20
    1d46:	8a 95       	dec	r24
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <MDIO_u8GetPinValue+0xb6>
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	81 70       	andi	r24, 0x01	; 1
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <MDIO_u8GetPinValue+0xee>
			case 'D': Local_u8Result = GET_BIT(PIND, A_u8PinNumber); break;
    1d52:	e0 e3       	ldi	r30, 0x30	; 48
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a9 01       	movw	r20, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <MDIO_u8GetPinValue+0xde>
    1d66:	55 95       	asr	r21
    1d68:	47 95       	ror	r20
    1d6a:	8a 95       	dec	r24
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <MDIO_u8GetPinValue+0xda>
    1d6e:	ca 01       	movw	r24, r20
    1d70:	81 70       	andi	r24, 0x01	; 1
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <MDIO_u8GetPinValue+0xee>
		}
	}
	else
	{
		Local_u8Result = 255;
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <MADC_voidInit>:
 * AVCC  	--- 1
 * Internal --- 2
 */

void MADC_voidInit(u8 A_u8Aref)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <MADC_voidInit+0x6>
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
	/*AREF Selection*/
	switch(A_u8Aref)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3b 83       	std	Y+3, r19	; 0x03
    1da2:	2a 83       	std	Y+2, r18	; 0x02
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	c1 f0       	breq	.+48     	; 0x1dde <MADC_voidInit+0x52>
    1dae:	2a 81       	ldd	r18, Y+2	; 0x02
    1db0:	3b 81       	ldd	r19, Y+3	; 0x03
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	11 f1       	breq	.+68     	; 0x1dfc <MADC_voidInit+0x70>
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	61 f5       	brne	.+88     	; 0x1e18 <MADC_voidInit+0x8c>
	{
	case 0:
		CLR_BIT(ADMUX, 6);
    1dc0:	a7 e2       	ldi	r26, 0x27	; 39
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e7 e2       	ldi	r30, 0x27	; 39
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8f 7b       	andi	r24, 0xBF	; 191
    1dcc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, 7);
    1dce:	a7 e2       	ldi	r26, 0x27	; 39
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e7 e2       	ldi	r30, 0x27	; 39
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 77       	andi	r24, 0x7F	; 127
    1dda:	8c 93       	st	X, r24
    1ddc:	1d c0       	rjmp	.+58     	; 0x1e18 <MADC_voidInit+0x8c>
		break;
	case 1:
		SET_BIT(ADMUX, 6);
    1dde:	a7 e2       	ldi	r26, 0x27	; 39
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e7 e2       	ldi	r30, 0x27	; 39
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 64       	ori	r24, 0x40	; 64
    1dea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, 7);
    1dec:	a7 e2       	ldi	r26, 0x27	; 39
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e7 e2       	ldi	r30, 0x27	; 39
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 77       	andi	r24, 0x7F	; 127
    1df8:	8c 93       	st	X, r24
    1dfa:	0e c0       	rjmp	.+28     	; 0x1e18 <MADC_voidInit+0x8c>
		break;
	case 2:
		SET_BIT(ADMUX, 6);
    1dfc:	a7 e2       	ldi	r26, 0x27	; 39
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e7 e2       	ldi	r30, 0x27	; 39
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
		SET_BIT(ADMUX, 7);
    1e0a:	a7 e2       	ldi	r26, 0x27	; 39
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e7 e2       	ldi	r30, 0x27	; 39
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	8c 93       	st	X, r24
		break;
	}

	/*Left Adjust*/
	SET_BIT(ADMUX, 5);
    1e18:	a7 e2       	ldi	r26, 0x27	; 39
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e7 e2       	ldi	r30, 0x27	; 39
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	80 62       	ori	r24, 0x20	; 32
    1e24:	8c 93       	st	X, r24

	/*128 prescaler*/
	SET_BIT(ADCSRA, 0);
    1e26:	a6 e2       	ldi	r26, 0x26	; 38
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e6 e2       	ldi	r30, 0x26	; 38
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	81 60       	ori	r24, 0x01	; 1
    1e32:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1e34:	a6 e2       	ldi	r26, 0x26	; 38
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e6 e2       	ldi	r30, 0x26	; 38
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	82 60       	ori	r24, 0x02	; 2
    1e40:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1e42:	a6 e2       	ldi	r26, 0x26	; 38
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e6 e2       	ldi	r30, 0x26	; 38
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	84 60       	ori	r24, 0x04	; 4
    1e4e:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADCSRA, 7);
    1e50:	a6 e2       	ldi	r26, 0x26	; 38
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e6 e2       	ldi	r30, 0x26	; 38
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 68       	ori	r24, 0x80	; 128
    1e5c:	8c 93       	st	X, r24
}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <MADC_u8GetChannelReading>:

u8 MADC_u8GetChannelReading(u8 A_u8Channel)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	89 83       	std	Y+1, r24	; 0x01
	/*Channel Selection*/
	ADMUX &= 0b11100000;
    1e76:	a7 e2       	ldi	r26, 0x27	; 39
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e7 e2       	ldi	r30, 0x27	; 39
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 7e       	andi	r24, 0xE0	; 224
    1e82:	8c 93       	st	X, r24
	ADMUX |= A_u8Channel;
    1e84:	a7 e2       	ldi	r26, 0x27	; 39
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e7 e2       	ldi	r30, 0x27	; 39
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	90 81       	ld	r25, Z
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	89 2b       	or	r24, r25
    1e92:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    1e94:	a6 e2       	ldi	r26, 0x26	; 38
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e6 e2       	ldi	r30, 0x26	; 38
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	80 64       	ori	r24, 0x40	; 64
    1ea0:	8c 93       	st	X, r24

	/*Waiting conversion*/
	while(GET_BIT(ADCSRA, 4) == 0);
    1ea2:	e6 e2       	ldi	r30, 0x26	; 38
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	82 95       	swap	r24
    1eaa:	8f 70       	andi	r24, 0x0F	; 15
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	81 70       	andi	r24, 0x01	; 1
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	a9 f3       	breq	.-22     	; 0x1ea2 <MADC_u8GetChannelReading+0x38>

	/*Clear ADC Flag*/
	SET_BIT(ADCSRA, 4);
    1eb8:	a6 e2       	ldi	r26, 0x26	; 38
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e6 e2       	ldi	r30, 0x26	; 38
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 61       	ori	r24, 0x10	; 16
    1ec4:	8c 93       	st	X, r24

	/*Return result*/
	return ADCH;
    1ec6:	e5 e2       	ldi	r30, 0x25	; 37
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
}
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <HLCD_voidInit>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"


void HLCD_voidInit()
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	e8 97       	sbiw	r28, 0x38	; 56
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
	/*DATA PORTD as Output*/
	MDIO_voidSetPortDirection('A', 255); // PORTA Output
    1ee8:	81 e4       	ldi	r24, 0x41	; 65
    1eea:	6f ef       	ldi	r22, 0xFF	; 255
    1eec:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <MDIO_voidSetPortDirection>

	/*Control pins output */
	MDIO_voidSetPinDirection('C', 0, 1); // PA0 Output
    1ef0:	83 e4       	ldi	r24, 0x43	; 67
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('C', 1, 1); // PA1 Output
    1efa:	83 e4       	ldi	r24, 0x43	; 67
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('C', 2, 1); // PA2 Output
    1f04:	83 e4       	ldi	r24, 0x43	; 67
    1f06:	62 e0       	ldi	r22, 0x02	; 2
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a8 ef       	ldi	r26, 0xF8	; 248
    1f14:	b1 e4       	ldi	r27, 0x41	; 65
    1f16:	8d ab       	std	Y+53, r24	; 0x35
    1f18:	9e ab       	std	Y+54, r25	; 0x36
    1f1a:	af ab       	std	Y+55, r26	; 0x37
    1f1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f20:	7e a9       	ldd	r23, Y+54	; 0x36
    1f22:	8f a9       	ldd	r24, Y+55	; 0x37
    1f24:	98 ad       	ldd	r25, Y+56	; 0x38
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	89 ab       	std	Y+49, r24	; 0x31
    1f38:	9a ab       	std	Y+50, r25	; 0x32
    1f3a:	ab ab       	std	Y+51, r26	; 0x33
    1f3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f40:	7a a9       	ldd	r23, Y+50	; 0x32
    1f42:	8b a9       	ldd	r24, Y+51	; 0x33
    1f44:	9c a9       	ldd	r25, Y+52	; 0x34
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <HLCD_voidInit+0x8c>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	98 ab       	std	Y+48, r25	; 0x30
    1f5c:	8f a7       	std	Y+47, r24	; 0x2f
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6d a9       	ldd	r22, Y+53	; 0x35
    1f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	98 ab       	std	Y+48, r25	; 0x30
    1f9e:	8f a7       	std	Y+47, r24	; 0x2f
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <HLCD_voidInit+0xec>
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9e a7       	std	Y+46, r25	; 0x2e
    1fa8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1faa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <HLCD_voidInit+0xda>
    1fb2:	9e a7       	std	Y+46, r25	; 0x2e
    1fb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <HLCD_voidInit+0xce>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	69 a9       	ldd	r22, Y+49	; 0x31
    1fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fce:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	8f a7       	std	Y+47, r24	; 0x2f
    1fde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe2:	9c a7       	std	Y+44, r25	; 0x2c
    1fe4:	8b a7       	std	Y+43, r24	; 0x2b
    1fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <HLCD_voidInit+0x116>
    1fee:	9c a7       	std	Y+44, r25	; 0x2c
    1ff0:	8b a7       	std	Y+43, r24	; 0x2b

	/*Power ON delay 30ms*/
	_delay_ms(31);
	/*Function Set Command Send*/
	HLCD_voidSendCommand(0x38);
    1ff2:	88 e3       	ldi	r24, 0x38	; 56
    1ff4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HLCD_voidSendCommand>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e8       	ldi	r26, 0x80	; 128
    1ffe:	bf e3       	ldi	r27, 0x3F	; 63
    2000:	8f a3       	std	Y+39, r24	; 0x27
    2002:	98 a7       	std	Y+40, r25	; 0x28
    2004:	a9 a7       	std	Y+41, r26	; 0x29
    2006:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6f a1       	ldd	r22, Y+39	; 0x27
    200a:	78 a5       	ldd	r23, Y+40	; 0x28
    200c:	89 a5       	ldd	r24, Y+41	; 0x29
    200e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a ef       	ldi	r20, 0xFA	; 250
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8b a3       	std	Y+35, r24	; 0x23
    2022:	9c a3       	std	Y+36, r25	; 0x24
    2024:	ad a3       	std	Y+37, r26	; 0x25
    2026:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2028:	6b a1       	ldd	r22, Y+35	; 0x23
    202a:	7c a1       	ldd	r23, Y+36	; 0x24
    202c:	8d a1       	ldd	r24, Y+37	; 0x25
    202e:	9e a1       	ldd	r25, Y+38	; 0x26
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <HLCD_voidInit+0x176>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a a3       	std	Y+34, r25	; 0x22
    2046:	89 a3       	std	Y+33, r24	; 0x21
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <HLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    204a:	6b a1       	ldd	r22, Y+35	; 0x23
    204c:	7c a1       	ldd	r23, Y+36	; 0x24
    204e:	8d a1       	ldd	r24, Y+37	; 0x25
    2050:	9e a1       	ldd	r25, Y+38	; 0x26
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <HLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6f a1       	ldd	r22, Y+39	; 0x27
    2064:	78 a5       	ldd	r23, Y+40	; 0x28
    2066:	89 a5       	ldd	r24, Y+41	; 0x29
    2068:	9a a5       	ldd	r25, Y+42	; 0x2a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <HLCD_voidInit+0x1d6>
    208c:	88 ec       	ldi	r24, 0xC8	; 200
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	98 a3       	std	Y+32, r25	; 0x20
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
    2094:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2096:	98 a1       	ldd	r25, Y+32	; 0x20
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <HLCD_voidInit+0x1c4>
    209c:	98 a3       	std	Y+32, r25	; 0x20
    209e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <HLCD_voidInit+0x1b8>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <HLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ca:	9a a1       	ldd	r25, Y+34	; 0x22
    20cc:	9e 8f       	std	Y+30, r25	; 0x1e
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <HLCD_voidInit+0x200>
    20d8:	9e 8f       	std	Y+30, r25	; 0x1e
    20da:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Function Set Delay*/
	_delay_ms(1);
	/*Display On/Off Command Send*/
	HLCD_voidSendCommand(0x0C); // use 0x0F for blinking cursor
    20dc:	8c e0       	ldi	r24, 0x0C	; 12
    20de:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HLCD_voidSendCommand>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	89 8f       	std	Y+25, r24	; 0x19
    20ec:	9a 8f       	std	Y+26, r25	; 0x1a
    20ee:	ab 8f       	std	Y+27, r26	; 0x1b
    20f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	69 8d       	ldd	r22, Y+25	; 0x19
    20f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a ef       	ldi	r20, 0xFA	; 250
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8d 8b       	std	Y+21, r24	; 0x15
    210c:	9e 8b       	std	Y+22, r25	; 0x16
    210e:	af 8b       	std	Y+23, r26	; 0x17
    2110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <HLCD_voidInit+0x260>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <HLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <HLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	69 8d       	ldd	r22, Y+25	; 0x19
    214e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <HLCD_voidInit+0x2c0>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9a 8b       	std	Y+18, r25	; 0x12
    217c:	89 8b       	std	Y+17, r24	; 0x11
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	9a 89       	ldd	r25, Y+18	; 0x12
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <HLCD_voidInit+0x2ae>
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8b 89       	ldd	r24, Y+19	; 0x13
    2196:	9c 89       	ldd	r25, Y+20	; 0x14
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <HLCD_voidInit+0x2a2>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <HLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9c 8b       	std	Y+20, r25	; 0x14
    21b0:	8b 8b       	std	Y+19, r24	; 0x13
    21b2:	8b 89       	ldd	r24, Y+19	; 0x13
    21b4:	9c 89       	ldd	r25, Y+20	; 0x14
    21b6:	98 8b       	std	Y+16, r25	; 0x10
    21b8:	8f 87       	std	Y+15, r24	; 0x0f
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	98 89       	ldd	r25, Y+16	; 0x10
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <HLCD_voidInit+0x2ea>
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
	/*Display On/Off Delay*/
	_delay_ms(1);
	/*Dispaly Clear Command Send*/
	HLCD_voidSendCommand(0x01);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HLCD_voidSendCommand>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	8b 87       	std	Y+11, r24	; 0x0b
    21d6:	9c 87       	std	Y+12, r25	; 0x0c
    21d8:	ad 87       	std	Y+13, r26	; 0x0d
    21da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21de:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8f 83       	std	Y+7, r24	; 0x07
    21f6:	98 87       	std	Y+8, r25	; 0x08
    21f8:	a9 87       	std	Y+9, r26	; 0x09
    21fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <HLCD_voidInit+0x34a>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	3f c0       	rjmp	.+126    	; 0x229c <HLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <HLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	0f c0       	rjmp	.+30     	; 0x227e <HLCD_voidInit+0x3aa>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <HLCD_voidInit+0x398>
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <HLCD_voidInit+0x38c>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <HLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6f 81       	ldd	r22, Y+7	; 0x07
    228a:	78 85       	ldd	r23, Y+8	; 0x08
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <HLCD_voidInit+0x3d4>
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
	/*Display Clear Delay*/
	_delay_ms(1);
	/*Entery Set*/
	HLCD_voidSendCommand(0x06);
    22b0:	86 e0       	ldi	r24, 0x06	; 6
    22b2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HLCD_voidSendCommand>
}
    22b6:	e8 96       	adiw	r28, 0x38	; 56
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	6d 97       	sbiw	r28, 0x1d	; 29
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Initialize control pins RS/RW*/
	MDIO_voidSetPinValue('C', 0, 0); // Sending Command
    22de:	83 e4       	ldi	r24, 0x43	; 67
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 1, 0); // RW = 0 (Writing on LCD)
    22e8:	83 e4       	ldi	r24, 0x43	; 67
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>

	/*Write command on data pins*/
	MDIO_voidSetPortValue('A', A_u8Cmd);
    22f2:	81 e4       	ldi	r24, 0x41	; 65
    22f4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22f6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <MDIO_voidSetPortValue>

	/*Pulse the Enable*/
	MDIO_voidSetPinValue('C', 2, 1); // EN High
    22fa:	83 e4       	ldi	r24, 0x43	; 67
    22fc:	62 e0       	ldi	r22, 0x02	; 2
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e8       	ldi	r26, 0x80	; 128
    230a:	bf e3       	ldi	r27, 0x3F	; 63
    230c:	89 8f       	std	Y+25, r24	; 0x19
    230e:	9a 8f       	std	Y+26, r25	; 0x1a
    2310:	ab 8f       	std	Y+27, r26	; 0x1b
    2312:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	69 8d       	ldd	r22, Y+25	; 0x19
    2316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a ef       	ldi	r20, 0xFA	; 250
    2322:	54 e4       	ldi	r21, 0x44	; 68
    2324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	8d 8b       	std	Y+21, r24	; 0x15
    232e:	9e 8b       	std	Y+22, r25	; 0x16
    2330:	af 8b       	std	Y+23, r26	; 0x17
    2332:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2334:	6d 89       	ldd	r22, Y+21	; 0x15
    2336:	7e 89       	ldd	r23, Y+22	; 0x16
    2338:	8f 89       	ldd	r24, Y+23	; 0x17
    233a:	98 8d       	ldd	r25, Y+24	; 0x18
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	3f c0       	rjmp	.+126    	; 0x23d4 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2356:	6d 89       	ldd	r22, Y+21	; 0x15
    2358:	7e 89       	ldd	r23, Y+22	; 0x16
    235a:	8f 89       	ldd	r24, Y+23	; 0x17
    235c:	98 8d       	ldd	r25, Y+24	; 0x18
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	4c f5       	brge	.+82     	; 0x23c0 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	69 8d       	ldd	r22, Y+25	; 0x19
    2370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <HLCD_voidSendCommand+0xee>
    2398:	88 ec       	ldi	r24, 0xC8	; 200
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	89 8b       	std	Y+17, r24	; 0x11
    23a0:	89 89       	ldd	r24, Y+17	; 0x11
    23a2:	9a 89       	ldd	r25, Y+18	; 0x12
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <HLCD_voidSendCommand+0xdc>
    23a8:	9a 8b       	std	Y+18, r25	; 0x12
    23aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	8b 89       	ldd	r24, Y+19	; 0x13
    23b8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	69 f7       	brne	.-38     	; 0x2398 <HLCD_voidSendCommand+0xd0>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	8b 89       	ldd	r24, Y+19	; 0x13
    23d6:	9c 89       	ldd	r25, Y+20	; 0x14
    23d8:	98 8b       	std	Y+16, r25	; 0x10
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	98 89       	ldd	r25, Y+16	; 0x10
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <HLCD_voidSendCommand+0x118>
    23e4:	98 8b       	std	Y+16, r25	; 0x10
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('C', 2, 0); // EN Low
    23e8:	83 e4       	ldi	r24, 0x43	; 67
    23ea:	62 e0       	ldi	r22, 0x02	; 2
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e8       	ldi	r26, 0x80	; 128
    23f8:	bf e3       	ldi	r27, 0x3F	; 63
    23fa:	8b 87       	std	Y+11, r24	; 0x0b
    23fc:	9c 87       	std	Y+12, r25	; 0x0c
    23fe:	ad 87       	std	Y+13, r26	; 0x0d
    2400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6b 85       	ldd	r22, Y+11	; 0x0b
    2404:	7c 85       	ldd	r23, Y+12	; 0x0c
    2406:	8d 85       	ldd	r24, Y+13	; 0x0d
    2408:	9e 85       	ldd	r25, Y+14	; 0x0e
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8f 83       	std	Y+7, r24	; 0x07
    241c:	98 87       	std	Y+8, r25	; 0x08
    241e:	a9 87       	std	Y+9, r26	; 0x09
    2420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <HLCD_voidSendCommand+0x1dc>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <HLCD_voidSendCommand+0x1ca>
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <HLCD_voidSendCommand+0x1be>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <HLCD_voidSendCommand+0x206>
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    24d6:	6d 96       	adiw	r28, 0x1d	; 29
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	6d 97       	sbiw	r28, 0x1d	; 29
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Initialize control pins RS/RW*/
	MDIO_voidSetPinValue('C', 0, 1); // Sending Data (RS High)
    24fe:	83 e4       	ldi	r24, 0x43	; 67
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 1, 0); // RW = 0 (Writing on LCD)
    2508:	83 e4       	ldi	r24, 0x43	; 67
    250a:	61 e0       	ldi	r22, 0x01	; 1
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>

	/*Write command on data pins*/
	MDIO_voidSetPortValue('A', A_u8Data);
    2512:	81 e4       	ldi	r24, 0x41	; 65
    2514:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2516:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <MDIO_voidSetPortValue>

	/*Pulse the Enable*/
	MDIO_voidSetPinValue('C', 2, 1); // EN High
    251a:	83 e4       	ldi	r24, 0x43	; 67
    251c:	62 e0       	ldi	r22, 0x02	; 2
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e8       	ldi	r26, 0x80	; 128
    252a:	bf e3       	ldi	r27, 0x3F	; 63
    252c:	89 8f       	std	Y+25, r24	; 0x19
    252e:	9a 8f       	std	Y+26, r25	; 0x1a
    2530:	ab 8f       	std	Y+27, r26	; 0x1b
    2532:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	69 8d       	ldd	r22, Y+25	; 0x19
    2536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8d 8b       	std	Y+21, r24	; 0x15
    254e:	9e 8b       	std	Y+22, r25	; 0x16
    2550:	af 8b       	std	Y+23, r26	; 0x17
    2552:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	69 8d       	ldd	r22, Y+25	; 0x19
    2590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <HLCD_voidSendData+0xee>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	9a 89       	ldd	r25, Y+18	; 0x12
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <HLCD_voidSendData+0xdc>
    25c8:	9a 8b       	std	Y+18, r25	; 0x12
    25ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <HLCD_voidSendData+0xd0>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	98 8b       	std	Y+16, r25	; 0x10
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	98 89       	ldd	r25, Y+16	; 0x10
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <HLCD_voidSendData+0x118>
    2604:	98 8b       	std	Y+16, r25	; 0x10
    2606:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('C', 2, 0); // EN Low
    2608:	83 e4       	ldi	r24, 0x43	; 67
    260a:	62 e0       	ldi	r22, 0x02	; 2
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e8       	ldi	r26, 0x80	; 128
    2618:	bf e3       	ldi	r27, 0x3F	; 63
    261a:	8b 87       	std	Y+11, r24	; 0x0b
    261c:	9c 87       	std	Y+12, r25	; 0x0c
    261e:	ad 87       	std	Y+13, r26	; 0x0d
    2620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a ef       	ldi	r20, 0xFA	; 250
    2630:	54 e4       	ldi	r21, 0x44	; 68
    2632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8f 83       	std	Y+7, r24	; 0x07
    263c:	98 87       	std	Y+8, r25	; 0x08
    263e:	a9 87       	std	Y+9, r26	; 0x09
    2640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <HLCD_voidSendData+0x1dc>
    26a6:	88 ec       	ldi	r24, 0xC8	; 200
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <HLCD_voidSendData+0x1ca>
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <HLCD_voidSendData+0x1be>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <HLCD_voidSendData+0x206>
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    26f6:	6d 96       	adiw	r28, 0x1d	; 29
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <HLCD_voidSendString>:

void HLCD_voidSendString(s8 *A_u8String)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <HLCD_voidSendString+0x6>
    270e:	0f 92       	push	r0
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	9b 83       	std	Y+3, r25	; 0x03
    2716:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2718:	19 82       	std	Y+1, r1	; 0x01
    271a:	0e c0       	rjmp	.+28     	; 0x2738 <HLCD_voidSendString+0x30>
	while(A_u8String[i] != '\0')
	{
		HLCD_voidSendData(A_u8String[i]);
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	fc 01       	movw	r30, r24
    2728:	e2 0f       	add	r30, r18
    272a:	f3 1f       	adc	r31, r19
    272c:	80 81       	ld	r24, Z
    272e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <HLCD_voidSendData>
		i++;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_voidSendString(s8 *A_u8String)
{
	u8 i = 0;
	while(A_u8String[i] != '\0')
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	9b 81       	ldd	r25, Y+3	; 0x03
    2742:	fc 01       	movw	r30, r24
    2744:	e2 0f       	add	r30, r18
    2746:	f3 1f       	adc	r31, r19
    2748:	80 81       	ld	r24, Z
    274a:	88 23       	and	r24, r24
    274c:	39 f7       	brne	.-50     	; 0x271c <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(A_u8String[i]);
		i++;
	}
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <HLCD_voidGoTo+0x6>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	8a 83       	std	Y+2, r24	; 0x02
    2768:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DdramAddress;
	if(A_u8Row < 2 && A_u8Col < 16) // Check for wrong arguments
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	82 30       	cpi	r24, 0x02	; 2
    276e:	90 f4       	brcc	.+36     	; 0x2794 <HLCD_voidGoTo+0x3a>
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	80 31       	cpi	r24, 0x10	; 16
    2774:	78 f4       	brcc	.+30     	; 0x2794 <HLCD_voidGoTo+0x3a>
	{
		if(A_u8Row == 0) // check if it is the first row
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	88 23       	and	r24, r24
    277a:	19 f4       	brne	.+6      	; 0x2782 <HLCD_voidGoTo+0x28>
			L_u8DdramAddress = 0x00 + A_u8Col; // first address + required column
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	03 c0       	rjmp	.+6      	; 0x2788 <HLCD_voidGoTo+0x2e>
		else
			L_u8DdramAddress = 0x40 + A_u8Col; // second line address + required column
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	80 5c       	subi	r24, 0xC0	; 192
    2786:	89 83       	std	Y+1, r24	; 0x01

		SET_BIT(L_u8DdramAddress, 7); // Datasheet required Set Bit for the command to  work
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	80 68       	ori	r24, 0x80	; 128
    278c:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DdramAddress); // Send finalized address to LCD
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HLCD_voidSendCommand>
	}
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	28 97       	sbiw	r28, 0x08	; 8
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	6d 83       	std	Y+5, r22	; 0x05
    27be:	7e 83       	std	Y+6, r23	; 0x06
    27c0:	8f 83       	std	Y+7, r24	; 0x07
    27c2:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e0       	ldi	r26, 0x00	; 0
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	ab 83       	std	Y+3, r26	; 0x03
    27d2:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	af 81       	ldd	r26, Y+7	; 0x07
    27da:	b8 85       	ldd	r27, Y+8	; 0x08
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	a1 05       	cpc	r26, r1
    27e0:	b1 05       	cpc	r27, r1
    27e2:	19 f4       	brne	.+6      	; 0x27ea <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    27e4:	80 e3       	ldi	r24, 0x30	; 48
    27e6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	af 81       	ldd	r26, Y+7	; 0x07
    27f0:	b8 85       	ldd	r27, Y+8	; 0x08
    27f2:	bb 23       	and	r27, r27
    27f4:	0c f0       	brlt	.+2      	; 0x27f8 <HLCD_voidDisplayNumber+0x58>
    27f6:	49 c0       	rjmp	.+146    	; 0x288a <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    27f8:	8d e2       	ldi	r24, 0x2D	; 45
    27fa:	0e 94 74 12 	call	0x24e8	; 0x24e8 <HLCD_voidSendData>
		A_s32Number *=-1;
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	af 81       	ldd	r26, Y+7	; 0x07
    2804:	b8 85       	ldd	r27, Y+8	; 0x08
    2806:	b0 95       	com	r27
    2808:	a0 95       	com	r26
    280a:	90 95       	com	r25
    280c:	81 95       	neg	r24
    280e:	9f 4f       	sbci	r25, 0xFF	; 255
    2810:	af 4f       	sbci	r26, 0xFF	; 255
    2812:	bf 4f       	sbci	r27, 0xFF	; 255
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	af 83       	std	Y+7, r26	; 0x07
    281a:	b8 87       	std	Y+8, r27	; 0x08
    281c:	36 c0       	rjmp	.+108    	; 0x288a <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	ab 81       	ldd	r26, Y+3	; 0x03
    2824:	bc 81       	ldd	r27, Y+4	; 0x04
    2826:	2a e0       	ldi	r18, 0x0A	; 10
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 9f 1a 	call	0x353e	; 0x353e <__mulsi3>
    2836:	7b 01       	movw	r14, r22
    2838:	8c 01       	movw	r16, r24
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	af 81       	ldd	r26, Y+7	; 0x07
    2840:	b8 85       	ldd	r27, Y+8	; 0x08
    2842:	2a e0       	ldi	r18, 0x0A	; 10
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	8e 0d       	add	r24, r14
    2858:	9f 1d       	adc	r25, r15
    285a:	a0 1f       	adc	r26, r16
    285c:	b1 1f       	adc	r27, r17
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	ab 83       	std	Y+3, r26	; 0x03
    2864:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	af 81       	ldd	r26, Y+7	; 0x07
    286c:	b8 85       	ldd	r27, Y+8	; 0x08
    286e:	2a e0       	ldi	r18, 0x0A	; 10
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divmodsi4>
    287e:	da 01       	movw	r26, r20
    2880:	c9 01       	movw	r24, r18
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	af 83       	std	Y+7, r26	; 0x07
    2888:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	af 81       	ldd	r26, Y+7	; 0x07
    2890:	b8 85       	ldd	r27, Y+8	; 0x08
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	a1 05       	cpc	r26, r1
    2896:	b1 05       	cpc	r27, r1
    2898:	11 f6       	brne	.-124    	; 0x281e <HLCD_voidDisplayNumber+0x7e>
    289a:	23 c0       	rjmp	.+70     	; 0x28e2 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	ab 81       	ldd	r26, Y+3	; 0x03
    28a2:	bc 81       	ldd	r27, Y+4	; 0x04
    28a4:	2a e0       	ldi	r18, 0x0A	; 10
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 be 1a 	call	0x357c	; 0x357c <__udivmodsi4>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	80 5d       	subi	r24, 0xD0	; 208
    28ba:	0e 94 74 12 	call	0x24e8	; 0x24e8 <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	ab 81       	ldd	r26, Y+3	; 0x03
    28c4:	bc 81       	ldd	r27, Y+4	; 0x04
    28c6:	2a e0       	ldi	r18, 0x0A	; 10
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 be 1a 	call	0x357c	; 0x357c <__udivmodsi4>
    28d6:	da 01       	movw	r26, r20
    28d8:	c9 01       	movw	r24, r18
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	ab 83       	std	Y+3, r26	; 0x03
    28e0:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	ab 81       	ldd	r26, Y+3	; 0x03
    28e8:	bc 81       	ldd	r27, Y+4	; 0x04
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	91 05       	cpc	r25, r1
    28ee:	a1 05       	cpc	r26, r1
    28f0:	b1 05       	cpc	r27, r1
    28f2:	a1 f6       	brne	.-88     	; 0x289c <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    28f4:	28 96       	adiw	r28, 0x08	; 8
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	08 95       	ret

0000290e <HLCD_voidLCDReset>:

/*This function for clearing the LCD
 * and pointing to the first line
 * */
void HLCD_voidLCDReset(void)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	HLCD_voidSendCommand(1);
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	0e 94 64 11 	call	0x22c8	; 0x22c8 <HLCD_voidSendCommand>

	/*Go to First Line*/
	HLCD_voidGoTo(0, 0);
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	0e 94 ad 13 	call	0x275a	; 0x275a <HLCD_voidGoTo>
}
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <HKPD_u8GetPressedKey>:
 * scans the pressed key
 * return: the pressed key
 * return: 255 if no key pressed
 * */
u8 HKPD_u8GetPressedKey()
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <HKPD_u8GetPressedKey+0x6>
    2930:	00 d0       	rcall	.+0      	; 0x2932 <HKPD_u8GetPressedKey+0x8>
    2932:	0f 92       	push	r0
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = 255, Col, Row;
    2938:	8f ef       	ldi	r24, 0xFF	; 255
    293a:	8c 83       	std	Y+4, r24	; 0x04

	for(Col = 0; Col < 4; Col++)
    293c:	1b 82       	std	Y+3, r1	; 0x03
    293e:	3e c0       	rjmp	.+124    	; 0x29bc <HKPD_u8GetPressedKey+0x92>
	{
		/*Activate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4 , 0);
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	98 2f       	mov	r25, r24
    2944:	9c 5f       	subi	r25, 0xFC	; 252
    2946:	84 e4       	ldi	r24, 0x44	; 68
    2948:	69 2f       	mov	r22, r25
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>

		/*Checks row by row*/
		for(Row = 0; Row < 4; Row++)
    2950:	1a 82       	std	Y+2, r1	; 0x02
    2952:	26 c0       	rjmp	.+76     	; 0x29a0 <HKPD_u8GetPressedKey+0x76>
		{
			/*Gets row value*/
			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row));
    2954:	84 e4       	ldi	r24, 0x44	; 68
    2956:	6a 81       	ldd	r22, Y+2	; 0x02
    2958:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <MDIO_u8GetPinValue>
    295c:	89 83       	std	Y+1, r24	; 0x01

			/*Check if Key is Pressed*/
			if(L_u8PinValue == 0)
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	88 23       	and	r24, r24
    2962:	d9 f4       	brne	.+54     	; 0x299a <HKPD_u8GetPressedKey+0x70>
			{
				/*Saves pressed key for returning it*/
				Local_u8PressedKey = G_u8KPDButtons[Row][Col];
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	48 2f       	mov	r20, r24
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	ca 01       	movw	r24, r20
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	82 0f       	add	r24, r18
    297c:	93 1f       	adc	r25, r19
    297e:	fc 01       	movw	r30, r24
    2980:	e1 5c       	subi	r30, 0xC1	; 193
    2982:	fe 4f       	sbci	r31, 0xFE	; 254
    2984:	80 81       	ld	r24, Z
    2986:	8c 83       	std	Y+4, r24	; 0x04

				/*Waiting until key gets not pressed*/
				while(MDIO_u8GetPinValue('D', Row) == 0);
    2988:	84 e4       	ldi	r24, 0x44	; 68
    298a:	6a 81       	ldd	r22, Y+2	; 0x02
    298c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <MDIO_u8GetPinValue>
    2990:	88 23       	and	r24, r24
    2992:	d1 f3       	breq	.-12     	; 0x2988 <HKPD_u8GetPressedKey+0x5e>

				/*return the pressed key*/
				return Local_u8PressedKey;
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	17 c0       	rjmp	.+46     	; 0x29c8 <HKPD_u8GetPressedKey+0x9e>
	{
		/*Activate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4 , 0);

		/*Checks row by row*/
		for(Row = 0; Row < 4; Row++)
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	8a 83       	std	Y+2, r24	; 0x02
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	84 30       	cpi	r24, 0x04	; 4
    29a4:	b8 f2       	brcs	.-82     	; 0x2954 <HKPD_u8GetPressedKey+0x2a>
				/*return the pressed key*/
				return Local_u8PressedKey;
			}
		}
		/*Deactivate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4, 1);
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	98 2f       	mov	r25, r24
    29aa:	9c 5f       	subi	r25, 0xFC	; 252
    29ac:	84 e4       	ldi	r24, 0x44	; 68
    29ae:	69 2f       	mov	r22, r25
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
 * */
u8 HKPD_u8GetPressedKey()
{
	u8 Local_u8PressedKey = 255, Col, Row;

	for(Col = 0; Col < 4; Col++)
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	84 30       	cpi	r24, 0x04	; 4
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <HKPD_u8GetPressedKey+0x9a>
    29c2:	be cf       	rjmp	.-132    	; 0x2940 <HKPD_u8GetPressedKey+0x16>
		}
		/*Deactivate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4, 1);
	}
	/*returns 255 for referring that no key is pressed*/
	return Local_u8PressedKey;
    29c4:	8c 81       	ldd	r24, Y+4	; 0x04
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <HDCMOTOTR_voidInit>:
#define DC_MOTOR_PIN1	  0
#define DC_MOTOR_PIN2	  1


void HDCMOTOTR_voidInit(void)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1, 1);
    29e2:	83 e4       	ldi	r24, 0x43	; 67
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	41 e0       	ldi	r20, 0x01	; 1
    29e8:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2, 1);
    29ec:	83 e4       	ldi	r24, 0x43	; 67
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    29f6:	83 e4       	ldi	r24, 0x43	; 67
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    2a00:	83 e4       	ldi	r24, 0x43	; 67
    2a02:	61 e0       	ldi	r22, 0x01	; 1
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <HDCMOTOR_voidRotateClockWise>:

void HDCMOTOR_voidRotateClockWise(void)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    2a18:	83 e4       	ldi	r24, 0x43	; 67
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 1);
    2a22:	83 e4       	ldi	r24, 0x43	; 67
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <HDCMOTOR_voidRotateCounterClockWise>:

void HDCMOTOR_voidRotateCounterClockWise(void)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    2a3a:	83 e4       	ldi	r24, 0x43	; 67
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 1);
    2a44:	83 e4       	ldi	r24, 0x43	; 67
    2a46:	61 e0       	ldi	r22, 0x01	; 1
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
}
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <HDCMOTOR_voidStop>:

void HDCMOTOR_voidStop(void)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    2a5c:	83 e4       	ldi	r24, 0x43	; 67
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    2a66:	83 e4       	ldi	r24, 0x43	; 67
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <APP_voidWelcome>:

/*This is a welcome message
 * Function that Displays on LCD
 * */
void APP_voidWelcome(void)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
	/*LCD Clear and goto first Line*/
	HLCD_voidLCDReset();
    2a8a:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

	/*Welcome Message*/
	HLCD_voidSendString((s8*)"Welcome");
    2a8e:	80 e6       	ldi	r24, 0x60	; 96
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	aa e7       	ldi	r26, 0x7A	; 122
    2a9c:	b4 e4       	ldi	r27, 0x44	; 68
    2a9e:	8b 87       	std	Y+11, r24	; 0x0b
    2aa0:	9c 87       	std	Y+12, r25	; 0x0c
    2aa2:	ad 87       	std	Y+13, r26	; 0x0d
    2aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8f 83       	std	Y+7, r24	; 0x07
    2ac0:	98 87       	std	Y+8, r25	; 0x08
    2ac2:	a9 87       	std	Y+9, r26	; 0x09
    2ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <APP_voidWelcome+0x72>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <APP_voidWelcome+0xf0>
	else if (__tmp > 65535)
    2ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aea:	78 85       	ldd	r23, Y+8	; 0x08
    2aec:	89 85       	ldd	r24, Y+9	; 0x09
    2aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <APP_voidWelcome+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <APP_voidWelcome+0xd2>
    2b2a:	88 ec       	ldi	r24, 0xC8	; 200
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <APP_voidWelcome+0xc0>
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <APP_voidWelcome+0xb4>
    2b50:	14 c0       	rjmp	.+40     	; 0x2b7a <APP_voidWelcome+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	6f 81       	ldd	r22, Y+7	; 0x07
    2b54:	78 85       	ldd	r23, Y+8	; 0x08
    2b56:	89 85       	ldd	r24, Y+9	; 0x09
    2b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9e 83       	std	Y+6, r25	; 0x06
    2b64:	8d 83       	std	Y+5, r24	; 0x05
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <APP_voidWelcome+0xfc>
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01

	/*Wait 1sec*/
	_delay_ms(1000);
}
    2b7a:	2e 96       	adiw	r28, 0x0e	; 14
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <APP_u8GetKey>:
/*This function get the pressed
 * key on keypad from the user
 * using Polling technique
 * */
u8 APP_u8GetKey(void)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	0f 92       	push	r0
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8Key;

	/*Polling until a key is pressed*/
	do{
		L_u8Key = HKPD_u8GetPressedKey();
    2b96:	0e 94 95 14 	call	0x292a	; 0x292a <HKPD_u8GetPressedKey>
    2b9a:	89 83       	std	Y+1, r24	; 0x01
	}while(L_u8Key == 255);
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2ba0:	d1 f3       	breq	.-12     	; 0x2b96 <APP_u8GetKey+0xa>

	/*Return Key pressed*/
	return L_u8Key;
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <APP_voidGetPassword>:
 * This function returns
 * CORRECT_PASSWORD  --> in case pass is correct
 * WRONG_PASSWORD --> in case pass is wrong
 * */
void APP_voidGetPassword(u8 *A_u8Password)
{
    2bac:	0f 93       	push	r16
    2bae:	1f 93       	push	r17
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <APP_voidGetPassword+0xa>
    2bb6:	0f 92       	push	r0
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	9b 83       	std	Y+3, r25	; 0x03
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
	/*local iteration counter*/
	u8 i = 0;
    2bc0:	19 82       	std	Y+1, r1	; 0x01

	/*LCD Clear and goto first Line*/
	HLCD_voidLCDReset();
    2bc2:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

	/*Asking user to enter his password*/
	HLCD_voidSendString((s8*)"Enter Password:");
    2bc6:	88 e6       	ldi	r24, 0x68	; 104
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>

	/*Goto Second line first column*/
	HLCD_voidGoTo(1, 0);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	0e 94 ad 13 	call	0x275a	; 0x275a <HLCD_voidGoTo>

	/*Reading Password*/
	for(i = 0; i < PASSWORD_LEN; i++)
    2bd6:	19 82       	std	Y+1, r1	; 0x01
    2bd8:	12 c0       	rjmp	.+36     	; 0x2bfe <APP_voidGetPassword+0x52>
	{
		/*Storing the password in the pointer argument*/
		A_u8Password[i] = APP_u8GetKey();
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	9b 81       	ldd	r25, Y+3	; 0x03
    2be4:	8c 01       	movw	r16, r24
    2be6:	02 0f       	add	r16, r18
    2be8:	13 1f       	adc	r17, r19
    2bea:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <APP_u8GetKey>
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 83       	st	Z, r24

		/*Displaying **** instead of password on LCD */
		HLCD_voidSendData('*');
    2bf2:	8a e2       	ldi	r24, 0x2A	; 42
    2bf4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <HLCD_voidSendData>

	/*Goto Second line first column*/
	HLCD_voidGoTo(1, 0);

	/*Reading Password*/
	for(i = 0; i < PASSWORD_LEN; i++)
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	8f 5f       	subi	r24, 0xFF	; 255
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	84 30       	cpi	r24, 0x04	; 4
    2c02:	58 f3       	brcs	.-42     	; 0x2bda <APP_voidGetPassword+0x2e>

		/*Displaying **** instead of password on LCD */
		HLCD_voidSendData('*');
	}
	/*Last element is null termination for the string*/
	A_u8Password[i] = '\0';
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e2 0f       	add	r30, r18
    2c12:	f3 1f       	adc	r31, r19
    2c14:	10 82       	st	Z, r1
}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	08 95       	ret

00002c26 <APP_u8CheckPassword>:
/*Arguments are two string
 * This function compares them
 * returns CORRECT_PASSWORD or WRONG_PASSWORD
 * */
u8 APP_u8CheckPassword(u8 *string1, u8 *string2)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <APP_u8CheckPassword+0x6>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <APP_u8CheckPassword+0x8>
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <APP_u8CheckPassword+0xa>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	9b 83       	std	Y+3, r25	; 0x03
    2c36:	8a 83       	std	Y+2, r24	; 0x02
    2c38:	7d 83       	std	Y+5, r23	; 0x05
    2c3a:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    2c3c:	19 82       	std	Y+1, r1	; 0x01
    2c3e:	19 c0       	rjmp	.+50     	; 0x2c72 <APP_u8CheckPassword+0x4c>

	/*Looping on the string*/
	while(string1[i] && string2[i])
	{
		/*if in any iteration the strings wasn't equal*/
		if(string1[i] != string2[i])
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	e2 0f       	add	r30, r18
    2c4e:	f3 1f       	adc	r31, r19
    2c50:	40 81       	ld	r20, Z
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e2 0f       	add	r30, r18
    2c60:	f3 1f       	adc	r31, r19
    2c62:	80 81       	ld	r24, Z
    2c64:	48 17       	cp	r20, r24
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <APP_u8CheckPassword+0x46>
			/*Returning Wrong Password Status*/
			return WRONG_PASSWORD;
    2c68:	1e 82       	std	Y+6, r1	; 0x06
    2c6a:	1b c0       	rjmp	.+54     	; 0x2ca2 <APP_u8CheckPassword+0x7c>
		i++;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	8f 5f       	subi	r24, 0xFF	; 255
    2c70:	89 83       	std	Y+1, r24	; 0x01
u8 APP_u8CheckPassword(u8 *string1, u8 *string2)
{
	u8 i = 0;

	/*Looping on the string*/
	while(string1[i] && string2[i])
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e2 0f       	add	r30, r18
    2c80:	f3 1f       	adc	r31, r19
    2c82:	80 81       	ld	r24, Z
    2c84:	88 23       	and	r24, r24
    2c86:	59 f0       	breq	.+22     	; 0x2c9e <APP_u8CheckPassword+0x78>
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c90:	9d 81       	ldd	r25, Y+5	; 0x05
    2c92:	fc 01       	movw	r30, r24
    2c94:	e2 0f       	add	r30, r18
    2c96:	f3 1f       	adc	r31, r19
    2c98:	80 81       	ld	r24, Z
    2c9a:	88 23       	and	r24, r24
    2c9c:	89 f6       	brne	.-94     	; 0x2c40 <APP_u8CheckPassword+0x1a>
			return WRONG_PASSWORD;
		i++;
	}

	/*if code reached here, it means the password is correct*/
	return CORRECT_PASSWORD;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	8e 83       	std	Y+6, r24	; 0x06
    2ca2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2ca4:	26 96       	adiw	r28, 0x06	; 6
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <APP_u8LoginToSystem>:

/* This function forces user
 * to login to system before using it
 * */
u8 APP_u8LoginToSystem(void)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	e1 97       	sbiw	r28, 0x31	; 49
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
	/*Local String for stroing password*/
	u8 L_u8Password[5], L_u8FailCounter = 0;
    2cca:	1b a6       	std	Y+43, r1	; 0x2b

	while(1)
	{
		/*Get Password from user*/
		APP_voidGetPassword(L_u8Password);
    2ccc:	ce 01       	movw	r24, r28
    2cce:	8c 96       	adiw	r24, 0x2c	; 44
    2cd0:	0e 94 d6 15 	call	0x2bac	; 0x2bac <APP_voidGetPassword>

		/*if user entered wrong password*/
		if(APP_u8CheckPassword(L_u8Password, G_u8Password) == WRONG_PASSWORD)
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	8c 96       	adiw	r24, 0x2c	; 44
    2cd8:	2f e4       	ldi	r18, 0x4F	; 79
    2cda:	31 e0       	ldi	r19, 0x01	; 1
    2cdc:	b9 01       	movw	r22, r18
    2cde:	0e 94 13 16 	call	0x2c26	; 0x2c26 <APP_u8CheckPassword>
    2ce2:	88 23       	and	r24, r24
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <APP_u8LoginToSystem+0x32>
    2ce6:	7f c1       	rjmp	.+766    	; 0x2fe6 <APP_u8LoginToSystem+0x330>
		{
			/*Increasing Failed Counter*/
			L_u8FailCounter++;
    2ce8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cea:	8f 5f       	subi	r24, 0xFF	; 255
    2cec:	8b a7       	std	Y+43, r24	; 0x2b

			/*LCD Clear and goto first Line*/
			HLCD_voidLCDReset();
    2cee:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

			/*Displaying Failed Times on LCD*/
			HLCD_voidSendString((s8*)"Failed [");
    2cf2:	88 e7       	ldi	r24, 0x78	; 120
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
			HLCD_voidDisplayNumber(L_u8FailCounter);
    2cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e0       	ldi	r26, 0x00	; 0
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <HLCD_voidDisplayNumber>
			HLCD_voidSendString((s8*)"/3]");
    2d0c:	81 e8       	ldi	r24, 0x81	; 129
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	aa e7       	ldi	r26, 0x7A	; 122
    2d1a:	b4 e4       	ldi	r27, 0x44	; 68
    2d1c:	8f a3       	std	Y+39, r24	; 0x27
    2d1e:	98 a7       	std	Y+40, r25	; 0x28
    2d20:	a9 a7       	std	Y+41, r26	; 0x29
    2d22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d24:	6f a1       	ldd	r22, Y+39	; 0x27
    2d26:	78 a5       	ldd	r23, Y+40	; 0x28
    2d28:	89 a5       	ldd	r24, Y+41	; 0x29
    2d2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	4a ef       	ldi	r20, 0xFA	; 250
    2d32:	54 e4       	ldi	r21, 0x44	; 68
    2d34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8b a3       	std	Y+35, r24	; 0x23
    2d3e:	9c a3       	std	Y+36, r25	; 0x24
    2d40:	ad a3       	std	Y+37, r26	; 0x25
    2d42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d44:	6b a1       	ldd	r22, Y+35	; 0x23
    2d46:	7c a1       	ldd	r23, Y+36	; 0x24
    2d48:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <APP_u8LoginToSystem+0xb0>
		__ticks = 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9a a3       	std	Y+34, r25	; 0x22
    2d62:	89 a3       	std	Y+33, r24	; 0x21
    2d64:	3f c0       	rjmp	.+126    	; 0x2de4 <APP_u8LoginToSystem+0x12e>
	else if (__tmp > 65535)
    2d66:	6b a1       	ldd	r22, Y+35	; 0x23
    2d68:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	3f ef       	ldi	r19, 0xFF	; 255
    2d72:	4f e7       	ldi	r20, 0x7F	; 127
    2d74:	57 e4       	ldi	r21, 0x47	; 71
    2d76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d7a:	18 16       	cp	r1, r24
    2d7c:	4c f5       	brge	.+82     	; 0x2dd0 <APP_u8LoginToSystem+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d80:	78 a5       	ldd	r23, Y+40	; 0x28
    2d82:	89 a5       	ldd	r24, Y+41	; 0x29
    2d84:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e2       	ldi	r20, 0x20	; 32
    2d8c:	51 e4       	ldi	r21, 0x41	; 65
    2d8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9a a3       	std	Y+34, r25	; 0x22
    2da4:	89 a3       	std	Y+33, r24	; 0x21
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <APP_u8LoginToSystem+0x110>
    2da8:	88 ec       	ldi	r24, 0xC8	; 200
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	98 a3       	std	Y+32, r25	; 0x20
    2dae:	8f 8f       	std	Y+31, r24	; 0x1f
    2db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2db2:	98 a1       	ldd	r25, Y+32	; 0x20
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <APP_u8LoginToSystem+0xfe>
    2db8:	98 a3       	std	Y+32, r25	; 0x20
    2dba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9a a3       	std	Y+34, r25	; 0x22
    2dc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <APP_u8LoginToSystem+0xf2>
    2dce:	14 c0       	rjmp	.+40     	; 0x2df8 <APP_u8LoginToSystem+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd0:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd2:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd4:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd6:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9a a3       	std	Y+34, r25	; 0x22
    2de2:	89 a3       	std	Y+33, r24	; 0x21
    2de4:	89 a1       	ldd	r24, Y+33	; 0x21
    2de6:	9a a1       	ldd	r25, Y+34	; 0x22
    2de8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dea:	8d 8f       	std	Y+29, r24	; 0x1d
    2dec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <APP_u8LoginToSystem+0x13a>
    2df4:	9e 8f       	std	Y+30, r25	; 0x1e
    2df6:	8d 8f       	std	Y+29, r24	; 0x1d

			/*Wait a second*/
			_delay_ms(1000);

			/*if max fail chances reached*/
			if(L_u8FailCounter >= MAX_FAILS)
    2df8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dfa:	83 30       	cpi	r24, 0x03	; 3
    2dfc:	08 f4       	brcc	.+2      	; 0x2e00 <APP_u8LoginToSystem+0x14a>
    2dfe:	7a c0       	rjmp	.+244    	; 0x2ef4 <APP_u8LoginToSystem+0x23e>
			{
				/*Clear LCD and Goto First Line*/
				HLCD_voidLCDReset();
    2e00:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

				/*Lock Account*/
				HLCD_voidSendString((s8*)"Account Locked!");
    2e04:	85 e8       	ldi	r24, 0x85	; 133
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	aa e7       	ldi	r26, 0x7A	; 122
    2e12:	b4 e4       	ldi	r27, 0x44	; 68
    2e14:	89 8f       	std	Y+25, r24	; 0x19
    2e16:	9a 8f       	std	Y+26, r25	; 0x1a
    2e18:	ab 8f       	std	Y+27, r26	; 0x1b
    2e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a ef       	ldi	r20, 0xFA	; 250
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8d 8b       	std	Y+21, r24	; 0x15
    2e36:	9e 8b       	std	Y+22, r25	; 0x16
    2e38:	af 8b       	std	Y+23, r26	; 0x17
    2e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e40:	8f 89       	ldd	r24, Y+23	; 0x17
    2e42:	98 8d       	ldd	r25, Y+24	; 0x18
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <APP_u8LoginToSystem+0x1a8>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <APP_u8LoginToSystem+0x226>
	else if (__tmp > 65535)
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <APP_u8LoginToSystem+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	69 8d       	ldd	r22, Y+25	; 0x19
    2e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <APP_u8LoginToSystem+0x208>
    2ea0:	88 ec       	ldi	r24, 0xC8	; 200
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9a 8b       	std	Y+18, r25	; 0x12
    2ea6:	89 8b       	std	Y+17, r24	; 0x11
    2ea8:	89 89       	ldd	r24, Y+17	; 0x11
    2eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <APP_u8LoginToSystem+0x1f6>
    2eb0:	9a 8b       	std	Y+18, r25	; 0x12
    2eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <APP_u8LoginToSystem+0x1ea>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <APP_u8LoginToSystem+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eca:	7e 89       	ldd	r23, Y+22	; 0x16
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9c 8b       	std	Y+20, r25	; 0x14
    2eda:	8b 8b       	std	Y+19, r24	; 0x13
    2edc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ede:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee0:	98 8b       	std	Y+16, r25	; 0x10
    2ee2:	8f 87       	std	Y+15, r24	; 0x0f
    2ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee6:	98 89       	ldd	r25, Y+16	; 0x10
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <APP_u8LoginToSystem+0x232>
    2eec:	98 8b       	std	Y+16, r25	; 0x10
    2eee:	8f 87       	std	Y+15, r24	; 0x0f

				/*Waiting one second*/
				_delay_ms(1000);

				/*Stop the Program*/
				return ACCOUNT_LOCKED;
    2ef0:	19 aa       	std	Y+49, r1	; 0x31
    2ef2:	7b c0       	rjmp	.+246    	; 0x2fea <APP_u8LoginToSystem+0x334>
			}
			else
			{
				/*Clear LCD and Goto First Line*/
				HLCD_voidLCDReset();
    2ef4:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

				/*Show try again message in case didn't reach max fails*/
				HLCD_voidSendString((s8*)"Try Again!");
    2ef8:	85 e9       	ldi	r24, 0x95	; 149
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	aa e7       	ldi	r26, 0x7A	; 122
    2f06:	b4 e4       	ldi	r27, 0x44	; 68
    2f08:	8b 87       	std	Y+11, r24	; 0x0b
    2f0a:	9c 87       	std	Y+12, r25	; 0x0c
    2f0c:	ad 87       	std	Y+13, r26	; 0x0d
    2f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	4a ef       	ldi	r20, 0xFA	; 250
    2f1e:	54 e4       	ldi	r21, 0x44	; 68
    2f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	8f 83       	std	Y+7, r24	; 0x07
    2f2a:	98 87       	std	Y+8, r25	; 0x08
    2f2c:	a9 87       	std	Y+9, r26	; 0x09
    2f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e8       	ldi	r20, 0x80	; 128
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f44:	88 23       	and	r24, r24
    2f46:	2c f4       	brge	.+10     	; 0x2f52 <APP_u8LoginToSystem+0x29c>
		__ticks = 1;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	3f c0       	rjmp	.+126    	; 0x2fd0 <APP_u8LoginToSystem+0x31a>
	else if (__tmp > 65535)
    2f52:	6f 81       	ldd	r22, Y+7	; 0x07
    2f54:	78 85       	ldd	r23, Y+8	; 0x08
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	57 e4       	ldi	r21, 0x47	; 71
    2f62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f66:	18 16       	cp	r1, r24
    2f68:	4c f5       	brge	.+82     	; 0x2fbc <APP_u8LoginToSystem+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e2       	ldi	r20, 0x20	; 32
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	0f c0       	rjmp	.+30     	; 0x2fb2 <APP_u8LoginToSystem+0x2fc>
    2f94:	88 ec       	ldi	r24, 0xC8	; 200
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9c 83       	std	Y+4, r25	; 0x04
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <APP_u8LoginToSystem+0x2ea>
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <APP_u8LoginToSystem+0x2de>
    2fba:	88 ce       	rjmp	.-752    	; 0x2ccc <APP_u8LoginToSystem+0x16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbe:	78 85       	ldd	r23, Y+8	; 0x08
    2fc0:	89 85       	ldd	r24, Y+9	; 0x09
    2fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <APP_u8LoginToSystem+0x326>
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	73 ce       	rjmp	.-794    	; 0x2ccc <APP_u8LoginToSystem+0x16>
			}
		}
		else
		{
			/*Allow user to view options*/
			return ACCESS_GRANTED;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	89 ab       	std	Y+49, r24	; 0x31
    2fea:	89 a9       	ldd	r24, Y+49	; 0x31
		}
	}
}
    2fec:	e1 96       	adiw	r28, 0x31	; 49
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <APP_voidShowOptions>:

/*Responsible for displaying different
 * Smart home control options on LCD
 * */
void APP_voidShowOptions(APP_Options optionToShow)
{
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	61 97       	sbiw	r28, 0x11	; 17
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	8f 87       	std	Y+15, r24	; 0x0f
	/*LCD Clear and goto first Line*/
	HLCD_voidLCDReset();
    3014:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

	/*Choose Option Message*/
	HLCD_voidSendString((s8*)"Choose an Option:");
    3018:	80 ea       	ldi	r24, 0xA0	; 160
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	aa e7       	ldi	r26, 0x7A	; 122
    3026:	b4 e4       	ldi	r27, 0x44	; 68
    3028:	8b 87       	std	Y+11, r24	; 0x0b
    302a:	9c 87       	std	Y+12, r25	; 0x0c
    302c:	ad 87       	std	Y+13, r26	; 0x0d
    302e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3030:	6b 85       	ldd	r22, Y+11	; 0x0b
    3032:	7c 85       	ldd	r23, Y+12	; 0x0c
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	4a ef       	ldi	r20, 0xFA	; 250
    303e:	54 e4       	ldi	r21, 0x44	; 68
    3040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	8f 83       	std	Y+7, r24	; 0x07
    304a:	98 87       	std	Y+8, r25	; 0x08
    304c:	a9 87       	std	Y+9, r26	; 0x09
    304e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3050:	6f 81       	ldd	r22, Y+7	; 0x07
    3052:	78 85       	ldd	r23, Y+8	; 0x08
    3054:	89 85       	ldd	r24, Y+9	; 0x09
    3056:	9a 85       	ldd	r25, Y+10	; 0x0a
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3064:	88 23       	and	r24, r24
    3066:	2c f4       	brge	.+10     	; 0x3072 <APP_voidShowOptions+0x74>
		__ticks = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	9e 83       	std	Y+6, r25	; 0x06
    306e:	8d 83       	std	Y+5, r24	; 0x05
    3070:	3f c0       	rjmp	.+126    	; 0x30f0 <APP_voidShowOptions+0xf2>
	else if (__tmp > 65535)
    3072:	6f 81       	ldd	r22, Y+7	; 0x07
    3074:	78 85       	ldd	r23, Y+8	; 0x08
    3076:	89 85       	ldd	r24, Y+9	; 0x09
    3078:	9a 85       	ldd	r25, Y+10	; 0x0a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	4f e7       	ldi	r20, 0x7F	; 127
    3080:	57 e4       	ldi	r21, 0x47	; 71
    3082:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3086:	18 16       	cp	r1, r24
    3088:	4c f5       	brge	.+82     	; 0x30dc <APP_voidShowOptions+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308a:	6b 85       	ldd	r22, Y+11	; 0x0b
    308c:	7c 85       	ldd	r23, Y+12	; 0x0c
    308e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3090:	9e 85       	ldd	r25, Y+14	; 0x0e
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e2       	ldi	r20, 0x20	; 32
    3098:	51 e4       	ldi	r21, 0x41	; 65
    309a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <APP_voidShowOptions+0xd4>
    30b4:	88 ec       	ldi	r24, 0xC8	; 200
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	9c 83       	std	Y+4, r25	; 0x04
    30ba:	8b 83       	std	Y+3, r24	; 0x03
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <APP_voidShowOptions+0xc2>
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	69 f7       	brne	.-38     	; 0x30b4 <APP_voidShowOptions+0xb6>
    30da:	14 c0       	rjmp	.+40     	; 0x3104 <APP_voidShowOptions+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	9a 83       	std	Y+2, r25	; 0x02
    30f6:	89 83       	std	Y+1, r24	; 0x01
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <APP_voidShowOptions+0xfe>
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01

	/*Wait one second*/
	_delay_ms(1000);

	/*LCD Clear and goto first Line*/
	HLCD_voidLCDReset();
    3104:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

	switch(optionToShow)
    3108:	8f 85       	ldd	r24, Y+15	; 0x0f
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	39 8b       	std	Y+17, r19	; 0x11
    3110:	28 8b       	std	Y+16, r18	; 0x10
    3112:	88 89       	ldd	r24, Y+16	; 0x10
    3114:	99 89       	ldd	r25, Y+17	; 0x11
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	91 05       	cpc	r25, r1
    311a:	b1 f0       	breq	.+44     	; 0x3148 <APP_voidShowOptions+0x14a>
    311c:	28 89       	ldd	r18, Y+16	; 0x10
    311e:	39 89       	ldd	r19, Y+17	; 0x11
    3120:	22 30       	cpi	r18, 0x02	; 2
    3122:	31 05       	cpc	r19, r1
    3124:	f1 f0       	breq	.+60     	; 0x3162 <APP_voidShowOptions+0x164>
    3126:	88 89       	ldd	r24, Y+16	; 0x10
    3128:	99 89       	ldd	r25, Y+17	; 0x11
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	31 f5       	brne	.+76     	; 0x317a <APP_voidShowOptions+0x17c>
	{
		case mainMenu:
			/*Displaying Door Option on LCD*/
			HLCD_voidSendString((s8*)"1- Door Control");
    312e:	82 eb       	ldi	r24, 0xB2	; 178
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>

			/*goto second line*/
			HLCD_voidGoTo(1, 0);
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	0e 94 ad 13 	call	0x275a	; 0x275a <HLCD_voidGoTo>

			/*Displaying Temp and Light Options*/
			HLCD_voidSendString((s8*)"2- Light Control");
    313e:	82 ec       	ldi	r24, 0xC2	; 194
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    3146:	19 c0       	rjmp	.+50     	; 0x317a <APP_voidShowOptions+0x17c>
			break;

		case doorMenu:
			/*Displaying Door open Option on LCD*/
			HLCD_voidSendString((s8*)"1- Door Open");
    3148:	83 ed       	ldi	r24, 0xD3	; 211
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>

			/*goto second line*/
			HLCD_voidGoTo(1, 0);
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	0e 94 ad 13 	call	0x275a	; 0x275a <HLCD_voidGoTo>

			/*Displaying Door close and back to main menu Options*/
			HLCD_voidSendString((s8*)"2- Close 3- Exit");
    3158:	80 ee       	ldi	r24, 0xE0	; 224
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    3160:	0c c0       	rjmp	.+24     	; 0x317a <APP_voidShowOptions+0x17c>
			break;
		case lightMenu:
			/*Displaying Room 1 Option on LCD*/
			HLCD_voidSendString((s8*)"1- Room 1");
    3162:	81 ef       	ldi	r24, 0xF1	; 241
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>

			/*goto second line*/
			HLCD_voidGoTo(1, 0);
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	0e 94 ad 13 	call	0x275a	; 0x275a <HLCD_voidGoTo>

			/*Displaying Room 2 and back to main menu Options*/
			HLCD_voidSendString((s8*)"2- Room 2 3-Exit");
    3172:	8b ef       	ldi	r24, 0xFB	; 251
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
			break;
	}
}
    317a:	61 96       	adiw	r28, 0x11	; 17
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <APP_u8HandleOptions>:

/*This function is responsible for
 *Taking Option as an input from user */
u8 APP_u8HandleOptions(APP_Options optionToShow)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	29 97       	sbiw	r28, 0x09	; 9
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	8a 83       	std	Y+2, r24	; 0x02
	/*Get Pressed Option*/
	u8 option = APP_u8GetKey();
    31a2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <APP_u8GetKey>
    31a6:	89 83       	std	Y+1, r24	; 0x01

	/*Switching the value of option to show*/
	switch(optionToShow)
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	39 87       	std	Y+9, r19	; 0x09
    31b0:	28 87       	std	Y+8, r18	; 0x08
    31b2:	88 85       	ldd	r24, Y+8	; 0x08
    31b4:	99 85       	ldd	r25, Y+9	; 0x09
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	31 f0       	breq	.+12     	; 0x31c6 <APP_u8HandleOptions+0x3a>
    31ba:	28 85       	ldd	r18, Y+8	; 0x08
    31bc:	39 85       	ldd	r19, Y+9	; 0x09
    31be:	21 30       	cpi	r18, 0x01	; 1
    31c0:	31 05       	cpc	r19, r1
    31c2:	d1 f0       	breq	.+52     	; 0x31f8 <APP_u8HandleOptions+0x6c>
    31c4:	39 c0       	rjmp	.+114    	; 0x3238 <APP_u8HandleOptions+0xac>
	{
		/*Converting the pressed number to
		 * a readable name that we can deal with*/
		case mainMenu:
			switch(option)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	3f 83       	std	Y+7, r19	; 0x07
    31ce:	2e 83       	std	Y+6, r18	; 0x06
    31d0:	8e 81       	ldd	r24, Y+6	; 0x06
    31d2:	9f 81       	ldd	r25, Y+7	; 0x07
    31d4:	81 33       	cpi	r24, 0x31	; 49
    31d6:	91 05       	cpc	r25, r1
    31d8:	31 f0       	breq	.+12     	; 0x31e6 <APP_u8HandleOptions+0x5a>
    31da:	2e 81       	ldd	r18, Y+6	; 0x06
    31dc:	3f 81       	ldd	r19, Y+7	; 0x07
    31de:	22 33       	cpi	r18, 0x32	; 50
    31e0:	31 05       	cpc	r19, r1
    31e2:	21 f0       	breq	.+8      	; 0x31ec <APP_u8HandleOptions+0x60>
    31e4:	06 c0       	rjmp	.+12     	; 0x31f2 <APP_u8HandleOptions+0x66>
			{
				case '1': return doorMenu;
    31e6:	31 e0       	ldi	r19, 0x01	; 1
    31e8:	3d 83       	std	Y+5, r19	; 0x05
    31ea:	28 c0       	rjmp	.+80     	; 0x323c <APP_u8HandleOptions+0xb0>
				case '2': return lightMenu;
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	8d 83       	std	Y+5, r24	; 0x05
    31f0:	25 c0       	rjmp	.+74     	; 0x323c <APP_u8HandleOptions+0xb0>
				default: return WRONG_OPTION;
    31f2:	9a e0       	ldi	r25, 0x0A	; 10
    31f4:	9d 83       	std	Y+5, r25	; 0x05
    31f6:	22 c0       	rjmp	.+68     	; 0x323c <APP_u8HandleOptions+0xb0>
			}
			break;
		case doorMenu:
			switch(option)
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	3c 83       	std	Y+4, r19	; 0x04
    3200:	2b 83       	std	Y+3, r18	; 0x03
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
    3204:	9c 81       	ldd	r25, Y+4	; 0x04
    3206:	82 33       	cpi	r24, 0x32	; 50
    3208:	91 05       	cpc	r25, r1
    320a:	69 f0       	breq	.+26     	; 0x3226 <APP_u8HandleOptions+0x9a>
    320c:	2b 81       	ldd	r18, Y+3	; 0x03
    320e:	3c 81       	ldd	r19, Y+4	; 0x04
    3210:	23 33       	cpi	r18, 0x33	; 51
    3212:	31 05       	cpc	r19, r1
    3214:	59 f0       	breq	.+22     	; 0x322c <APP_u8HandleOptions+0xa0>
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	9c 81       	ldd	r25, Y+4	; 0x04
    321a:	81 33       	cpi	r24, 0x31	; 49
    321c:	91 05       	cpc	r25, r1
    321e:	49 f4       	brne	.+18     	; 0x3232 <APP_u8HandleOptions+0xa6>
			{
				case '1': return doorOpen;
    3220:	95 e0       	ldi	r25, 0x05	; 5
    3222:	9d 83       	std	Y+5, r25	; 0x05
    3224:	0b c0       	rjmp	.+22     	; 0x323c <APP_u8HandleOptions+0xb0>
				case '2': return doorClose;
    3226:	26 e0       	ldi	r18, 0x06	; 6
    3228:	2d 83       	std	Y+5, r18	; 0x05
    322a:	08 c0       	rjmp	.+16     	; 0x323c <APP_u8HandleOptions+0xb0>
				case '3': return backOption;
    322c:	37 e0       	ldi	r19, 0x07	; 7
    322e:	3d 83       	std	Y+5, r19	; 0x05
    3230:	05 c0       	rjmp	.+10     	; 0x323c <APP_u8HandleOptions+0xb0>
				default: return WRONG_OPTION;
    3232:	8a e0       	ldi	r24, 0x0A	; 10
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	02 c0       	rjmp	.+4      	; 0x323c <APP_u8HandleOptions+0xb0>

		/*Just to avoid 'lightMenu' not handled in switch Warning*/
		case lightMenu:
			break;
	}
	return WRONG_OPTION;
    3238:	9a e0       	ldi	r25, 0x0A	; 10
    323a:	9d 83       	std	Y+5, r25	; 0x05
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    323e:	29 96       	adiw	r28, 0x09	; 9
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <APP_voidSendLightStatus>:
/*This function is responsible for sending
 * Room 1/2 Light on/off status code
 * using SPI Peripheral
 * */
void APP_voidSendLightStatus(u8 A_u8Room, u8 A_u8LightOption)
{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	29 97       	sbiw	r28, 0x09	; 9
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	8a 83       	std	Y+2, r24	; 0x02
    3266:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Variable to store the code to send*/
	u8 L_u8CodeToSend = 0;
    3268:	19 82       	std	Y+1, r1	; 0x01

	/*Checking which room does the user choosed*/
	switch(A_u8Room)
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	39 87       	std	Y+9, r19	; 0x09
    3272:	28 87       	std	Y+8, r18	; 0x08
    3274:	88 85       	ldd	r24, Y+8	; 0x08
    3276:	99 85       	ldd	r25, Y+9	; 0x09
    3278:	81 33       	cpi	r24, 0x31	; 49
    327a:	91 05       	cpc	r25, r1
    327c:	31 f0       	breq	.+12     	; 0x328a <APP_voidSendLightStatus+0x3a>
    327e:	28 85       	ldd	r18, Y+8	; 0x08
    3280:	39 85       	ldd	r19, Y+9	; 0x09
    3282:	22 33       	cpi	r18, 0x32	; 50
    3284:	31 05       	cpc	r19, r1
    3286:	b9 f0       	breq	.+46     	; 0x32b6 <APP_voidSendLightStatus+0x66>
    3288:	2b c0       	rjmp	.+86     	; 0x32e0 <APP_voidSendLightStatus+0x90>
	{
		/*in case he choosed room 1*/
		case ROOM_1:
			/*Checking wether his choice was light on or off*/
			switch(A_u8LightOption)
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	3f 83       	std	Y+7, r19	; 0x07
    3292:	2e 83       	std	Y+6, r18	; 0x06
    3294:	8e 81       	ldd	r24, Y+6	; 0x06
    3296:	9f 81       	ldd	r25, Y+7	; 0x07
    3298:	81 33       	cpi	r24, 0x31	; 49
    329a:	91 05       	cpc	r25, r1
    329c:	31 f0       	breq	.+12     	; 0x32aa <APP_voidSendLightStatus+0x5a>
    329e:	2e 81       	ldd	r18, Y+6	; 0x06
    32a0:	3f 81       	ldd	r19, Y+7	; 0x07
    32a2:	22 33       	cpi	r18, 0x32	; 50
    32a4:	31 05       	cpc	r19, r1
    32a6:	21 f0       	breq	.+8      	; 0x32b0 <APP_voidSendLightStatus+0x60>
    32a8:	1b c0       	rjmp	.+54     	; 0x32e0 <APP_voidSendLightStatus+0x90>
			{
				case LIGHT_ON:
					L_u8CodeToSend = ROOM_1_LIGHT_ON; // Code for Room 1 & Light On
    32aa:	81 e3       	ldi	r24, 0x31	; 49
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	18 c0       	rjmp	.+48     	; 0x32e0 <APP_voidSendLightStatus+0x90>
					break;
				case LIGHT_OFF:
					L_u8CodeToSend = ROOM_1_LIGHT_OFF; // Code for Room 1 & Light Off
    32b0:	82 e3       	ldi	r24, 0x32	; 50
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	15 c0       	rjmp	.+42     	; 0x32e0 <APP_voidSendLightStatus+0x90>
			break;

		/*in case he choosed room 2*/
		case ROOM_2:
			/*Checking wether his choice was light on or off*/
			switch(A_u8LightOption)
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	28 2f       	mov	r18, r24
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	3d 83       	std	Y+5, r19	; 0x05
    32be:	2c 83       	std	Y+4, r18	; 0x04
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	81 33       	cpi	r24, 0x31	; 49
    32c6:	91 05       	cpc	r25, r1
    32c8:	31 f0       	breq	.+12     	; 0x32d6 <APP_voidSendLightStatus+0x86>
    32ca:	2c 81       	ldd	r18, Y+4	; 0x04
    32cc:	3d 81       	ldd	r19, Y+5	; 0x05
    32ce:	22 33       	cpi	r18, 0x32	; 50
    32d0:	31 05       	cpc	r19, r1
    32d2:	21 f0       	breq	.+8      	; 0x32dc <APP_voidSendLightStatus+0x8c>
    32d4:	05 c0       	rjmp	.+10     	; 0x32e0 <APP_voidSendLightStatus+0x90>
			{
				case LIGHT_ON:
					L_u8CodeToSend = ROOM_2_LIGHT_ON; // Code for Room 2 & Light On
    32d6:	83 e3       	ldi	r24, 0x33	; 51
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <APP_voidSendLightStatus+0x90>
					break;
				case LIGHT_OFF:
					L_u8CodeToSend = ROOM_2_LIGHT_OFF; // Code for Room 2 & Light Off
    32dc:	84 e3       	ldi	r24, 0x34	; 52
    32de:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
	}

	/*if user choosed correct options*/
	if(L_u8CodeToSend != 0)
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	88 23       	and	r24, r24
    32e4:	69 f0       	breq	.+26     	; 0x3300 <APP_voidSendLightStatus+0xb0>
	{
		/*Send Data to Slave2*/
		/*Activate the SS pin to low*/
		MDIO_voidSetPinValue('B', 3, 0);
    32e6:	82 e4       	ldi	r24, 0x42	; 66
    32e8:	63 e0       	ldi	r22, 0x03	; 3
    32ea:	40 e0       	ldi	r20, 0x00	; 0
    32ec:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>

		/*Send appropriate code to the slave*/
		MSPI_voidTranscieve(L_u8CodeToSend);
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <MSPI_voidTranscieve>

		/*Deactivate the SS pin to high*/
		MDIO_voidSetPinValue('B', 3, 1);
    32f6:	82 e4       	ldi	r24, 0x42	; 66
    32f8:	63 e0       	ldi	r22, 0x03	; 3
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
	}
}
    3300:	29 96       	adiw	r28, 0x09	; 9
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <main>:
#include "../MCAL/I2C/I2C_Interface.h"

/*Master Code*/

int main()
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	62 97       	sbiw	r28, 0x12	; 18
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
	/*SS1 Pin Output*/
	MDIO_voidSetPinDirection('B', 4, 1);
    3326:	82 e4       	ldi	r24, 0x42	; 66
    3328:	64 e0       	ldi	r22, 0x04	; 4
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
	/*SS1 High*/
	MDIO_voidSetPinValue('B', 4, 1);
    3330:	82 e4       	ldi	r24, 0x42	; 66
    3332:	64 e0       	ldi	r22, 0x04	; 4
    3334:	41 e0       	ldi	r20, 0x01	; 1
    3336:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>

	/*SS2 Pin Output*/
	MDIO_voidSetPinDirection('B', 3, 1);
    333a:	82 e4       	ldi	r24, 0x42	; 66
    333c:	63 e0       	ldi	r22, 0x03	; 3
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>
	/*SS2 High*/
	MDIO_voidSetPinValue('B', 3, 1);
    3344:	82 e4       	ldi	r24, 0x42	; 66
    3346:	63 e0       	ldi	r22, 0x03	; 3
    3348:	41 e0       	ldi	r20, 0x01	; 1
    334a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>

	/*MOSI Pin Output*/
	MDIO_voidSetPinDirection('B', 5, 1);
    334e:	82 e4       	ldi	r24, 0x42	; 66
    3350:	65 e0       	ldi	r22, 0x05	; 5
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>

	/*MISO Pin Input*/
	MDIO_voidSetPinDirection('B', 6, 0);
    3358:	82 e4       	ldi	r24, 0x42	; 66
    335a:	66 e0       	ldi	r22, 0x06	; 6
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>

	/*SCLK Pin Output*/
	MDIO_voidSetPinDirection('B', 7, 1);
    3362:	82 e4       	ldi	r24, 0x42	; 66
    3364:	67 e0       	ldi	r22, 0x07	; 7
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 82 0b 	call	0x1704	; 0x1704 <MDIO_voidSetPinDirection>

	/*Master SPI Init*/
	MSPI_voidMasterInit();
    336c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <MSPI_voidMasterInit>

	/*LCD Initialization*/
	HLCD_voidInit();
    3370:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <HLCD_voidInit>

	/*Keypad Initialization*/
	MDIO_voidSetPortDirection('D', 0xF0);
    3374:	84 e4       	ldi	r24, 0x44	; 68
    3376:	60 ef       	ldi	r22, 0xF0	; 240
    3378:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue('D', 0xFF);
    337c:	84 e4       	ldi	r24, 0x44	; 68
    337e:	6f ef       	ldi	r22, 0xFF	; 255
    3380:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <MDIO_voidSetPortValue>

	/*Welcome Message only once*/
	APP_voidWelcome();
    3384:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <APP_voidWelcome>

	/*Ask user to login to system
	 * then checks if account was locked*/
	if(APP_u8LoginToSystem() == ACCOUNT_LOCKED)
    3388:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <APP_u8LoginToSystem>
    338c:	88 23       	and	r24, r24
    338e:	59 f4       	brne	.+22     	; 0x33a6 <main+0x94>
		return 0;
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
			APP_voidSendLightStatus(L_u8OptionReturned, L_u8LightOption);

			break;
		}
	}
}
    3394:	62 96       	adiw	r28, 0x12	; 18
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret
	while(1)
	{
		/*Access Granted*/

		/*Show available options*/
		APP_voidShowOptions(mainMenu);
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <APP_voidShowOptions>

		/*Handling user option input*/
		L_u8OptionReturned = APP_u8HandleOptions(mainMenu);
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	0e 94 c6 18 	call	0x318c	; 0x318c <APP_u8HandleOptions>
    33b2:	88 8b       	std	Y+16, r24	; 0x10

		/*Check option returned*/
		switch(L_u8OptionReturned)
    33b4:	88 89       	ldd	r24, Y+16	; 0x10
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	3a 8b       	std	Y+18, r19	; 0x12
    33bc:	29 8b       	std	Y+17, r18	; 0x11
    33be:	89 89       	ldd	r24, Y+17	; 0x11
    33c0:	9a 89       	ldd	r25, Y+18	; 0x12
    33c2:	81 30       	cpi	r24, 0x01	; 1
    33c4:	91 05       	cpc	r25, r1
    33c6:	31 f0       	breq	.+12     	; 0x33d4 <main+0xc2>
    33c8:	29 89       	ldd	r18, Y+17	; 0x11
    33ca:	3a 89       	ldd	r19, Y+18	; 0x12
    33cc:	22 30       	cpi	r18, 0x02	; 2
    33ce:	31 05       	cpc	r19, r1
    33d0:	d9 f0       	breq	.+54     	; 0x3408 <main+0xf6>
    33d2:	e9 cf       	rjmp	.-46     	; 0x33a6 <main+0x94>
		{
		case doorMenu:
			/*Display Door options*/
			APP_voidShowOptions(doorMenu);
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <APP_voidShowOptions>

			/*Get Option from user*/
			L_u8OptionReturned = APP_u8GetKey();
    33da:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <APP_u8GetKey>
    33de:	88 8b       	std	Y+16, r24	; 0x10

			/*Only two options*/
			if(L_u8OptionReturned == '1' || L_u8OptionReturned == '2')
    33e0:	88 89       	ldd	r24, Y+16	; 0x10
    33e2:	81 33       	cpi	r24, 0x31	; 49
    33e4:	19 f0       	breq	.+6      	; 0x33ec <main+0xda>
    33e6:	88 89       	ldd	r24, Y+16	; 0x10
    33e8:	82 33       	cpi	r24, 0x32	; 50
    33ea:	e9 f6       	brne	.-70     	; 0x33a6 <main+0x94>
			{
				/*Send Data to Slave 1*/
				MDIO_voidSetPinValue('B', 4, 0);
    33ec:	82 e4       	ldi	r24, 0x42	; 66
    33ee:	64 e0       	ldi	r22, 0x04	; 4
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
				MSPI_voidTranscieve(L_u8OptionReturned);
    33f6:	88 89       	ldd	r24, Y+16	; 0x10
    33f8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <MSPI_voidTranscieve>
				MDIO_voidSetPinValue('B', 4, 1);
    33fc:	82 e4       	ldi	r24, 0x42	; 66
    33fe:	64 e0       	ldi	r22, 0x04	; 4
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_voidSetPinValue>
    3406:	cf cf       	rjmp	.-98     	; 0x33a6 <main+0x94>
			}
			break;

		case lightMenu:
			/*Display Light options*/
			APP_voidShowOptions(lightMenu);
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <APP_voidShowOptions>

			/*Get Option from user*/
			L_u8OptionReturned = APP_u8GetKey();
    340e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <APP_u8GetKey>
    3412:	88 8b       	std	Y+16, r24	; 0x10

			if(L_u8OptionReturned == '1' || L_u8OptionReturned == '2')
    3414:	88 89       	ldd	r24, Y+16	; 0x10
    3416:	81 33       	cpi	r24, 0x31	; 49
    3418:	21 f0       	breq	.+8      	; 0x3422 <main+0x110>
    341a:	88 89       	ldd	r24, Y+16	; 0x10
    341c:	82 33       	cpi	r24, 0x32	; 50
    341e:	09 f0       	breq	.+2      	; 0x3422 <main+0x110>
    3420:	86 c0       	rjmp	.+268    	; 0x352e <main+0x21c>
			{
				/*LCD Clear and goto first Line*/
				HLCD_voidLCDReset();
    3422:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

				/*Choose Option Message*/
				HLCD_voidSendString((s8*)"Choose an Option:");
    3426:	8c e0       	ldi	r24, 0x0C	; 12
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	aa e7       	ldi	r26, 0x7A	; 122
    3434:	b4 e4       	ldi	r27, 0x44	; 68
    3436:	8b 87       	std	Y+11, r24	; 0x0b
    3438:	9c 87       	std	Y+12, r25	; 0x0c
    343a:	ad 87       	std	Y+13, r26	; 0x0d
    343c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3440:	7c 85       	ldd	r23, Y+12	; 0x0c
    3442:	8d 85       	ldd	r24, Y+13	; 0x0d
    3444:	9e 85       	ldd	r25, Y+14	; 0x0e
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	4a ef       	ldi	r20, 0xFA	; 250
    344c:	54 e4       	ldi	r21, 0x44	; 68
    344e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	98 87       	std	Y+8, r25	; 0x08
    345a:	a9 87       	std	Y+9, r26	; 0x09
    345c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e8       	ldi	r20, 0x80	; 128
    346c:	5f e3       	ldi	r21, 0x3F	; 63
    346e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3472:	88 23       	and	r24, r24
    3474:	2c f4       	brge	.+10     	; 0x3480 <main+0x16e>
		__ticks = 1;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	9e 83       	std	Y+6, r25	; 0x06
    347c:	8d 83       	std	Y+5, r24	; 0x05
    347e:	3f c0       	rjmp	.+126    	; 0x34fe <main+0x1ec>
	else if (__tmp > 65535)
    3480:	6f 81       	ldd	r22, Y+7	; 0x07
    3482:	78 85       	ldd	r23, Y+8	; 0x08
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	3f ef       	ldi	r19, 0xFF	; 255
    348c:	4f e7       	ldi	r20, 0x7F	; 127
    348e:	57 e4       	ldi	r21, 0x47	; 71
    3490:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3494:	18 16       	cp	r1, r24
    3496:	4c f5       	brge	.+82     	; 0x34ea <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	6b 85       	ldd	r22, Y+11	; 0x0b
    349a:	7c 85       	ldd	r23, Y+12	; 0x0c
    349c:	8d 85       	ldd	r24, Y+13	; 0x0d
    349e:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	0f c0       	rjmp	.+30     	; 0x34e0 <main+0x1ce>
    34c2:	88 ec       	ldi	r24, 0xC8	; 200
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	9c 83       	std	Y+4, r25	; 0x04
    34c8:	8b 83       	std	Y+3, r24	; 0x03
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	9c 81       	ldd	r25, Y+4	; 0x04
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <main+0x1bc>
    34d2:	9c 83       	std	Y+4, r25	; 0x04
    34d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d6:	8d 81       	ldd	r24, Y+5	; 0x05
    34d8:	9e 81       	ldd	r25, Y+6	; 0x06
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	69 f7       	brne	.-38     	; 0x34c2 <main+0x1b0>
    34e8:	14 c0       	rjmp	.+40     	; 0x3512 <main+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	9a 83       	std	Y+2, r25	; 0x02
    3504:	89 83       	std	Y+1, r24	; 0x01
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <main+0x1f8>
    350e:	9a 83       	std	Y+2, r25	; 0x02
    3510:	89 83       	std	Y+1, r24	; 0x01

				/*Wait one second*/
				_delay_ms(1000);

				/*LCD Clear and goto first Line*/
				HLCD_voidLCDReset();
    3512:	0e 94 87 14 	call	0x290e	; 0x290e <HLCD_voidLCDReset>

				/*Displaying Room Light Options on LCD*/
				HLCD_voidSendString((s8*)"1- Light On");
    3516:	8e e1       	ldi	r24, 0x1E	; 30
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>

				/*goto second line*/
				HLCD_voidGoTo(1, 0);
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	0e 94 ad 13 	call	0x275a	; 0x275a <HLCD_voidGoTo>

				/*Displaying Temp and Light Options*/
				HLCD_voidSendString((s8*)"2- Light Off");
    3526:	8a e2       	ldi	r24, 0x2A	; 42
    3528:	91 e0       	ldi	r25, 0x01	; 1
    352a:	0e 94 84 13 	call	0x2708	; 0x2708 <HLCD_voidSendString>
			}

			/*Read Light Option from user*/
			L_u8LightOption = APP_u8GetKey();
    352e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <APP_u8GetKey>
    3532:	8f 87       	std	Y+15, r24	; 0x0f

			/*Sending slave the option choosed*/
			APP_voidSendLightStatus(L_u8OptionReturned, L_u8LightOption);
    3534:	88 89       	ldd	r24, Y+16	; 0x10
    3536:	6f 85       	ldd	r22, Y+15	; 0x0f
    3538:	0e 94 28 19 	call	0x3250	; 0x3250 <APP_voidSendLightStatus>
    353c:	34 cf       	rjmp	.-408    	; 0x33a6 <main+0x94>

0000353e <__mulsi3>:
    353e:	62 9f       	mul	r22, r18
    3540:	d0 01       	movw	r26, r0
    3542:	73 9f       	mul	r23, r19
    3544:	f0 01       	movw	r30, r0
    3546:	82 9f       	mul	r24, r18
    3548:	e0 0d       	add	r30, r0
    354a:	f1 1d       	adc	r31, r1
    354c:	64 9f       	mul	r22, r20
    354e:	e0 0d       	add	r30, r0
    3550:	f1 1d       	adc	r31, r1
    3552:	92 9f       	mul	r25, r18
    3554:	f0 0d       	add	r31, r0
    3556:	83 9f       	mul	r24, r19
    3558:	f0 0d       	add	r31, r0
    355a:	74 9f       	mul	r23, r20
    355c:	f0 0d       	add	r31, r0
    355e:	65 9f       	mul	r22, r21
    3560:	f0 0d       	add	r31, r0
    3562:	99 27       	eor	r25, r25
    3564:	72 9f       	mul	r23, r18
    3566:	b0 0d       	add	r27, r0
    3568:	e1 1d       	adc	r30, r1
    356a:	f9 1f       	adc	r31, r25
    356c:	63 9f       	mul	r22, r19
    356e:	b0 0d       	add	r27, r0
    3570:	e1 1d       	adc	r30, r1
    3572:	f9 1f       	adc	r31, r25
    3574:	bd 01       	movw	r22, r26
    3576:	cf 01       	movw	r24, r30
    3578:	11 24       	eor	r1, r1
    357a:	08 95       	ret

0000357c <__udivmodsi4>:
    357c:	a1 e2       	ldi	r26, 0x21	; 33
    357e:	1a 2e       	mov	r1, r26
    3580:	aa 1b       	sub	r26, r26
    3582:	bb 1b       	sub	r27, r27
    3584:	fd 01       	movw	r30, r26
    3586:	0d c0       	rjmp	.+26     	; 0x35a2 <__udivmodsi4_ep>

00003588 <__udivmodsi4_loop>:
    3588:	aa 1f       	adc	r26, r26
    358a:	bb 1f       	adc	r27, r27
    358c:	ee 1f       	adc	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	a2 17       	cp	r26, r18
    3592:	b3 07       	cpc	r27, r19
    3594:	e4 07       	cpc	r30, r20
    3596:	f5 07       	cpc	r31, r21
    3598:	20 f0       	brcs	.+8      	; 0x35a2 <__udivmodsi4_ep>
    359a:	a2 1b       	sub	r26, r18
    359c:	b3 0b       	sbc	r27, r19
    359e:	e4 0b       	sbc	r30, r20
    35a0:	f5 0b       	sbc	r31, r21

000035a2 <__udivmodsi4_ep>:
    35a2:	66 1f       	adc	r22, r22
    35a4:	77 1f       	adc	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	1a 94       	dec	r1
    35ac:	69 f7       	brne	.-38     	; 0x3588 <__udivmodsi4_loop>
    35ae:	60 95       	com	r22
    35b0:	70 95       	com	r23
    35b2:	80 95       	com	r24
    35b4:	90 95       	com	r25
    35b6:	9b 01       	movw	r18, r22
    35b8:	ac 01       	movw	r20, r24
    35ba:	bd 01       	movw	r22, r26
    35bc:	cf 01       	movw	r24, r30
    35be:	08 95       	ret

000035c0 <__divmodsi4>:
    35c0:	97 fb       	bst	r25, 7
    35c2:	09 2e       	mov	r0, r25
    35c4:	05 26       	eor	r0, r21
    35c6:	0e d0       	rcall	.+28     	; 0x35e4 <__divmodsi4_neg1>
    35c8:	57 fd       	sbrc	r21, 7
    35ca:	04 d0       	rcall	.+8      	; 0x35d4 <__divmodsi4_neg2>
    35cc:	d7 df       	rcall	.-82     	; 0x357c <__udivmodsi4>
    35ce:	0a d0       	rcall	.+20     	; 0x35e4 <__divmodsi4_neg1>
    35d0:	00 1c       	adc	r0, r0
    35d2:	38 f4       	brcc	.+14     	; 0x35e2 <__divmodsi4_exit>

000035d4 <__divmodsi4_neg2>:
    35d4:	50 95       	com	r21
    35d6:	40 95       	com	r20
    35d8:	30 95       	com	r19
    35da:	21 95       	neg	r18
    35dc:	3f 4f       	sbci	r19, 0xFF	; 255
    35de:	4f 4f       	sbci	r20, 0xFF	; 255
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255

000035e2 <__divmodsi4_exit>:
    35e2:	08 95       	ret

000035e4 <__divmodsi4_neg1>:
    35e4:	f6 f7       	brtc	.-4      	; 0x35e2 <__divmodsi4_exit>
    35e6:	90 95       	com	r25
    35e8:	80 95       	com	r24
    35ea:	70 95       	com	r23
    35ec:	61 95       	neg	r22
    35ee:	7f 4f       	sbci	r23, 0xFF	; 255
    35f0:	8f 4f       	sbci	r24, 0xFF	; 255
    35f2:	9f 4f       	sbci	r25, 0xFF	; 255
    35f4:	08 95       	ret

000035f6 <__prologue_saves__>:
    35f6:	2f 92       	push	r2
    35f8:	3f 92       	push	r3
    35fa:	4f 92       	push	r4
    35fc:	5f 92       	push	r5
    35fe:	6f 92       	push	r6
    3600:	7f 92       	push	r7
    3602:	8f 92       	push	r8
    3604:	9f 92       	push	r9
    3606:	af 92       	push	r10
    3608:	bf 92       	push	r11
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	ca 1b       	sub	r28, r26
    3620:	db 0b       	sbc	r29, r27
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	09 94       	ijmp

0000362e <__epilogue_restores__>:
    362e:	2a 88       	ldd	r2, Y+18	; 0x12
    3630:	39 88       	ldd	r3, Y+17	; 0x11
    3632:	48 88       	ldd	r4, Y+16	; 0x10
    3634:	5f 84       	ldd	r5, Y+15	; 0x0f
    3636:	6e 84       	ldd	r6, Y+14	; 0x0e
    3638:	7d 84       	ldd	r7, Y+13	; 0x0d
    363a:	8c 84       	ldd	r8, Y+12	; 0x0c
    363c:	9b 84       	ldd	r9, Y+11	; 0x0b
    363e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3640:	b9 84       	ldd	r11, Y+9	; 0x09
    3642:	c8 84       	ldd	r12, Y+8	; 0x08
    3644:	df 80       	ldd	r13, Y+7	; 0x07
    3646:	ee 80       	ldd	r14, Y+6	; 0x06
    3648:	fd 80       	ldd	r15, Y+5	; 0x05
    364a:	0c 81       	ldd	r16, Y+4	; 0x04
    364c:	1b 81       	ldd	r17, Y+3	; 0x03
    364e:	aa 81       	ldd	r26, Y+2	; 0x02
    3650:	b9 81       	ldd	r27, Y+1	; 0x01
    3652:	ce 0f       	add	r28, r30
    3654:	d1 1d       	adc	r29, r1
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	ed 01       	movw	r28, r26
    3662:	08 95       	ret

00003664 <_exit>:
    3664:	f8 94       	cli

00003666 <__stop_program>:
    3666:	ff cf       	rjmp	.-2      	; 0x3666 <__stop_program>
