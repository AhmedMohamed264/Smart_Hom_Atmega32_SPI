
Smart_Home_Slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00002bae  00002c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003534  00000000  00000000  00002d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017a5  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00007a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00007bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00007d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00009d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  0000aeef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000bef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000c352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cc60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 11 15 	call	0x2a22	; 0x2a22 <main>
      7a:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e7       	ldi	r26, 0x7A	; 122
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	ee 57       	subi	r30, 0x7E	; 126
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <MUART_voidInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART_Interface.h"

void MUART_voidInit()
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	/*UART Configuration*/
	UCSRB = 0b00011000;
     c98:	ea e2       	ldi	r30, 0x2A	; 42
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	88 e1       	ldi	r24, 0x18	; 24
     c9e:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
     ca0:	e0 e4       	ldi	r30, 0x40	; 64
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	86 e8       	ldi	r24, 0x86	; 134
     ca6:	80 83       	st	Z, r24

	/*Select Baud Rate 9600*/
	UBRRL = 51;
     ca8:	e9 e2       	ldi	r30, 0x29	; 41
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	83 e3       	ldi	r24, 0x33	; 51
     cae:	80 83       	st	Z, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <MUART_voidTransmit>:

void MUART_voidTransmit(u8 A_u8Data)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
	/*Polling until transmit buffer is empty*/
	while(GET_BIT(UCSRA, 5) == 0);
     cc2:	eb e2       	ldi	r30, 0x2B	; 43
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	82 95       	swap	r24
     cca:	86 95       	lsr	r24
     ccc:	87 70       	andi	r24, 0x07	; 7
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	a1 f3       	breq	.-24     	; 0xcc2 <MUART_voidTransmit+0xc>

	/*Put data In TXD to be transmitted*/
	UDR = A_u8Data;
     cda:	ec e2       	ldi	r30, 0x2C	; 44
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	80 83       	st	Z, r24
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <MUART_u8Recieve>:


u8 MUART_u8Recieve()
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
	/*Polling to wait until data is received*/
	while(GET_BIT(UCSRA, 7) == 0);
     cf2:	eb e2       	ldi	r30, 0x2B	; 43
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 23       	and	r24, r24
     cfa:	dc f7       	brge	.-10     	; 0xcf2 <MUART_u8Recieve+0x8>

	/*Return the data received*/
	return UDR;
     cfc:	ec e2       	ldi	r30, 0x2C	; 44
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <MTIMER_voidInit>:
 * A_u8TimerMode  ---> 2 ---> Fast PWM
 * A_u8TimerMode  ---> 3 ---> Phase Correct Mode
 * */

void MTIMER_voidInit(u8 A_u8TimerMode)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <MTIMER_voidInit+0x6>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	89 83       	std	Y+1, r24	; 0x01
	/*Timer Mode Selection*/
	switch(A_u8TimerMode)
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	3b 83       	std	Y+3, r19	; 0x03
     d1e:	2a 83       	std	Y+2, r18	; 0x02
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	9b 81       	ldd	r25, Y+3	; 0x03
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	61 f1       	breq	.+88     	; 0xd82 <MTIMER_voidInit+0x7a>
     d2a:	2a 81       	ldd	r18, Y+2	; 0x02
     d2c:	3b 81       	ldd	r19, Y+3	; 0x03
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	2c f4       	brge	.+10     	; 0xd3e <MTIMER_voidInit+0x36>
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	69 f0       	breq	.+26     	; 0xd56 <MTIMER_voidInit+0x4e>
     d3c:	71 c0       	rjmp	.+226    	; 0xe20 <MTIMER_voidInit+0x118>
     d3e:	2a 81       	ldd	r18, Y+2	; 0x02
     d40:	3b 81       	ldd	r19, Y+3	; 0x03
     d42:	22 30       	cpi	r18, 0x02	; 2
     d44:	31 05       	cpc	r19, r1
     d46:	99 f1       	breq	.+102    	; 0xdae <MTIMER_voidInit+0xa6>
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	9b 81       	ldd	r25, Y+3	; 0x03
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <MTIMER_voidInit+0x4c>
     d52:	4a c0       	rjmp	.+148    	; 0xde8 <MTIMER_voidInit+0xe0>
     d54:	65 c0       	rjmp	.+202    	; 0xe20 <MTIMER_voidInit+0x118>
	{

	case 0:
		/*Normal Mode Selection*/
		CLR_BIT(TCCR0, 3);
     d56:	a3 e5       	ldi	r26, 0x53	; 83
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e3 e5       	ldi	r30, 0x53	; 83
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
     d64:	a3 e5       	ldi	r26, 0x53	; 83
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e3 e5       	ldi	r30, 0x53	; 83
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8f 7b       	andi	r24, 0xBF	; 191
     d70:	8c 93       	st	X, r24

		/*Timer Overflow Interrupt Enable*/
		SET_BIT(TIMSK, 0);
     d72:	a9 e5       	ldi	r26, 0x59	; 89
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e9 e5       	ldi	r30, 0x59	; 89
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	8c 93       	st	X, r24
     d80:	4f c0       	rjmp	.+158    	; 0xe20 <MTIMER_voidInit+0x118>
		break;

	case 1:
		/*CTC Mode Selection*/
		SET_BIT(TCCR0, 3);
     d82:	a3 e5       	ldi	r26, 0x53	; 83
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e3 e5       	ldi	r30, 0x53	; 83
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8f 7b       	andi	r24, 0xBF	; 191
     d9c:	8c 93       	st	X, r24

		/*CTC Interrupt Enable*/
		SET_BIT(TIMSK, 1);
     d9e:	a9 e5       	ldi	r26, 0x59	; 89
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e9 e5       	ldi	r30, 0x59	; 89
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	8c 93       	st	X, r24
     dac:	39 c0       	rjmp	.+114    	; 0xe20 <MTIMER_voidInit+0x118>
		break;

	case 2:
		/*Fast PWM Selection*/
		SET_BIT(TCCR0, 3);
     dae:	a3 e5       	ldi	r26, 0x53	; 83
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e3 e5       	ldi	r30, 0x53	; 83
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	88 60       	ori	r24, 0x08	; 8
     dba:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     dbc:	a3 e5       	ldi	r26, 0x53	; 83
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e3 e5       	ldi	r30, 0x53	; 83
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 64       	ori	r24, 0x40	; 64
     dc8:	8c 93       	st	X, r24

		/*Clear then Set*/
		CLR_BIT(TCCR0, 4);
     dca:	a3 e5       	ldi	r26, 0x53	; 83
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e3 e5       	ldi	r30, 0x53	; 83
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8f 7e       	andi	r24, 0xEF	; 239
     dd6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
     dd8:	a3 e5       	ldi	r26, 0x53	; 83
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 62       	ori	r24, 0x20	; 32
     de4:	8c 93       	st	X, r24
     de6:	1c c0       	rjmp	.+56     	; 0xe20 <MTIMER_voidInit+0x118>
		break;

	case 3:
		/*Phase Correct Selection*/
		CLR_BIT(TCCR0, 3);
     de8:	a3 e5       	ldi	r26, 0x53	; 83
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e3 e5       	ldi	r30, 0x53	; 83
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     df6:	a3 e5       	ldi	r26, 0x53	; 83
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 64       	ori	r24, 0x40	; 64
     e02:	8c 93       	st	X, r24

		/*Clear then Set*/
		CLR_BIT(TCCR0, 4);
     e04:	a3 e5       	ldi	r26, 0x53	; 83
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e3 e5       	ldi	r30, 0x53	; 83
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 7e       	andi	r24, 0xEF	; 239
     e10:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	8c 93       	st	X, r24
		break;
	}
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <MTIMER_voidSetPreload>:

void MTIMER_voidSetPreload(u8 A_u8Timer_Mode, u8 A_u8Preload)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <MTIMER_voidSetPreload+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Timer_Mode == 0)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 23       	and	r24, r24
     e3e:	29 f4       	brne	.+10     	; 0xe4a <MTIMER_voidSetPreload+0x1e>
		TCNT0 = A_u8Preload;
     e40:	e2 e5       	ldi	r30, 0x52	; 82
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	80 83       	st	Z, r24
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <MTIMER_voidSetPreload+0x26>
	else
		OCR0 = A_u8Preload;
     e4a:	ec e5       	ldi	r30, 0x5C	; 92
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	80 83       	st	Z, r24
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <MTIMER_voidStart>:

void MTIMER_voidStart()
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	/*Start Timer with CLk/8 prescaling*/
	CLR_BIT(TCCR0, 0);
     e64:	a3 e5       	ldi	r26, 0x53	; 83
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e3 e5       	ldi	r30, 0x53	; 83
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8e 7f       	andi	r24, 0xFE	; 254
     e70:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 1);
     e72:	a3 e5       	ldi	r26, 0x53	; 83
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e3 e5       	ldi	r30, 0x53	; 83
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     e80:	a3 e5       	ldi	r26, 0x53	; 83
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e3 e5       	ldi	r30, 0x53	; 83
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8b 7f       	andi	r24, 0xFB	; 251
     e8c:	8c 93       	st	X, r24
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <MTIMER_voidStop>:

void MTIMER_voidStop()
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	/*Start Stop, No clock source*/
	CLR_BIT(TCCR0, 0);
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	8c 93       	st	X, r24
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <MTimer1_voidInit>:


void MTimer1_voidInit(){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62

	/*Select Clear on TOP and Set On Compare*/
	CLR_BIT(TCCR1A, 6);
     ed4:	af e4       	ldi	r26, 0x4F	; 79
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ef e4       	ldi	r30, 0x4F	; 79
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8f 7b       	andi	r24, 0xBF	; 191
     ee0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, 7);
     ee2:	af e4       	ldi	r26, 0x4F	; 79
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ef e4       	ldi	r30, 0x4F	; 79
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 68       	ori	r24, 0x80	; 128
     eee:	8c 93       	st	X, r24

	/*Fast PWM mode 14*/
	CLR_BIT(TCCR1A, 0);
     ef0:	af e4       	ldi	r26, 0x4F	; 79
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ef e4       	ldi	r30, 0x4F	; 79
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, 1);
     efe:	af e4       	ldi	r26, 0x4F	; 79
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e4       	ldi	r30, 0x4F	; 79
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 3);
     f0c:	ae e4       	ldi	r26, 0x4E	; 78
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ee e4       	ldi	r30, 0x4E	; 78
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 60       	ori	r24, 0x08	; 8
     f18:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 4);
     f1a:	ae e4       	ldi	r26, 0x4E	; 78
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ee e4       	ldi	r30, 0x4E	; 78
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 61       	ori	r24, 0x10	; 16
     f26:	8c 93       	st	X, r24

	/*Select Ps 8* */
	CLR_BIT(TCCR1B,0);
     f28:	ae e4       	ldi	r26, 0x4E	; 78
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ee e4       	ldi	r30, 0x4E	; 78
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8e 7f       	andi	r24, 0xFE	; 254
     f34:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
     f36:	ae e4       	ldi	r26, 0x4E	; 78
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ee e4       	ldi	r30, 0x4E	; 78
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	82 60       	ori	r24, 0x02	; 2
     f42:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
     f44:	ae e4       	ldi	r26, 0x4E	; 78
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ee e4       	ldi	r30, 0x4E	; 78
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8b 7f       	andi	r24, 0xFB	; 251
     f50:	8c 93       	st	X, r24
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <MTimer1_voidSetValue>:


void MTimer1_voidSetValue(u16 A_u16Value){
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <MTimer1_voidSetValue+0x6>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
     f66:	ec e4       	ldi	r30, 0x4C	; 76
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <MTimer1_u16ReadTimer1Value>:

u16 MTimer1_u16ReadTimer1Value(){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     f84:	ec e4       	ldi	r30, 0x4C	; 76
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <MTimer1_voidSetICR1>:


void MTimer1_voidSetICR1(u16 A_u16Value)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <MTimer1_voidSetICR1+0x6>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = A_u16Value;
     fa0:	e6 e4       	ldi	r30, 0x46	; 70
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <MTimer1_voidSetCTCValue>:

void MTimer1_voidSetCTCValue(u16 A_u16Value)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <MTimer1_voidSetCTCValue+0x6>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Value;
     fc4:	ea e4       	ldi	r30, 0x4A	; 74
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <MSPI_voidMasterInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"


void MSPI_voidMasterInit()
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	/*Master Selection Mode*/
	SET_BIT(SPCR, 4);
     fe2:	ad e2       	ldi	r26, 0x2D	; 45
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ed e2       	ldi	r30, 0x2D	; 45
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 61       	ori	r24, 0x10	; 16
     fee:	8c 93       	st	X, r24

	/*Clock Select Rate bit*/
	SET_BIT(SPCR, 0);
     ff0:	ad e2       	ldi	r26, 0x2D	; 45
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ed e2       	ldi	r30, 0x2D	; 45
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
     ffe:	ad e2       	ldi	r26, 0x2D	; 45
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ed e2       	ldi	r30, 0x2D	; 45
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 0);
    100c:	ad e2       	ldi	r26, 0x2D	; 45
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ed e2       	ldi	r30, 0x2D	; 45
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR, 6);
    101a:	ad e2       	ldi	r26, 0x2D	; 45
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ed e2       	ldi	r30, 0x2D	; 45
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 64       	ori	r24, 0x40	; 64
    1026:	8c 93       	st	X, r24
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <MSPI_voidSlaveInit>:

void MSPI_voidSlaveInit()
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	/*Slave Selection Mode*/
	CLR_BIT(SPCR, 4);
    1036:	ad e2       	ldi	r26, 0x2D	; 45
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ed e2       	ldi	r30, 0x2D	; 45
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 7e       	andi	r24, 0xEF	; 239
    1042:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR, 6);
    1044:	ad e2       	ldi	r26, 0x2D	; 45
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ed e2       	ldi	r30, 0x2D	; 45
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 64       	ori	r24, 0x40	; 64
    1050:	8c 93       	st	X, r24
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <MSPI_voidTranscieve>:

u8 MSPI_voidTranscieve(u8 A_u8Data)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
	/*Send data*/
	SPDR = A_u8Data;
    1064:	ef e2       	ldi	r30, 0x2F	; 47
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	80 83       	st	Z, r24

	/*Polling waiting transfer complete*/
	while(GET_BIT(SPSR, 7) == 0);
    106c:	ee e2       	ldi	r30, 0x2E	; 46
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	dc f7       	brge	.-10     	; 0x106c <MSPI_voidTranscieve+0x14>

	/*Return received data*/
	return SPDR;
    1076:	ef e2       	ldi	r30, 0x2F	; 47
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
}
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <MTWI_voidMasterInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include"I2C_Interface.h"


void MTWI_voidMasterInit(){
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	//SET clock freq 200Kbps
	TWBR = 72;
    108c:	e0 e2       	ldi	r30, 0x20	; 32
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	88 e4       	ldi	r24, 0x48	; 72
    1092:	80 83       	st	Z, r24

	//Clear 2bits of TWPS
	CLR_BIT(TWSR, 0);
    1094:	a1 e2       	ldi	r26, 0x21	; 33
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e2       	ldi	r30, 0x21	; 33
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8e 7f       	andi	r24, 0xFE	; 254
    10a0:	8c 93       	st	X, r24
	CLR_BIT(TWSR, 1);
    10a2:	a1 e2       	ldi	r26, 0x21	; 33
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 e2       	ldi	r30, 0x21	; 33
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8d 7f       	andi	r24, 0xFD	; 253
    10ae:	8c 93       	st	X, r24

	//Enable TWI
	SET_BIT(TWCR, 2);
    10b0:	a6 e5       	ldi	r26, 0x56	; 86
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e6 e5       	ldi	r30, 0x56	; 86
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	8c 93       	st	X, r24

}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <MTWI_voidSlaveInit>:

void MTWI_voidSlaveInit(u8 A_u8SalveAddress){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	89 83       	std	Y+1, r24	; 0x01

	//Initialize slave address;
	TWAR = (A_u8SalveAddress<<1);
    10d0:	e2 e2       	ldi	r30, 0x22	; 34
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 0f       	add	r24, r24
    10d8:	80 83       	st	Z, r24

	//Enable TWI
	SET_BIT(TWCR, 2);
    10da:	a6 e5       	ldi	r26, 0x56	; 86
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e6 e5       	ldi	r30, 0x56	; 86
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	84 60       	ori	r24, 0x04	; 4
    10e6:	8c 93       	st	X, r24
}
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <MTWI_SendStartCondition>:

TWI_ErrStatus MTWI_SendStartCondition(){
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrorState = NoError;
    10fa:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWCR, 5);
    10fc:	a6 e5       	ldi	r26, 0x56	; 86
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e6 e5       	ldi	r30, 0x56	; 86
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 62       	ori	r24, 0x20	; 32
    1108:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
    110a:	a6 e5       	ldi	r26, 0x56	; 86
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    1118:	e6 e5       	ldi	r30, 0x56	; 86
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 23       	and	r24, r24
    1120:	dc f7       	brge	.-10     	; 0x1118 <MTWI_SendStartCondition+0x28>

	if((TWSR & 0xf8) != 0x08){
    1122:	e1 e2       	ldi	r30, 0x21	; 33
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	88 7f       	andi	r24, 0xF8	; 248
    112e:	90 70       	andi	r25, 0x00	; 0
    1130:	88 30       	cpi	r24, 0x08	; 8
    1132:	91 05       	cpc	r25, r1
    1134:	11 f0       	breq	.+4      	; 0x113a <MTWI_SendStartCondition+0x4a>
		Local_ErrorState = StartConditionErr;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    113a:	89 81       	ldd	r24, Y+1	; 0x01
}
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <MTWI_SendSlaveAdderssWithWrite>:





TWI_ErrStatus MTWI_SendSlaveAdderssWithWrite(u8 A_u8SalveAddress){
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <MTWI_SendSlaveAdderssWithWrite+0x6>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrStatus Local_ErrorState = NoError;
    1150:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition with low*/
	//CLR_BIT(TWCR, 5);

	/*Set slave address in MSB in Data Reg*/
	TWDR = (A_u8SalveAddress <<1);
    1152:	e3 e2       	ldi	r30, 0x23	; 35
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	88 0f       	add	r24, r24
    115a:	80 83       	st	Z, r24

	/*Clear bit for write op*/
	CLR_BIT(TWDR, 0);
    115c:	a3 e2       	ldi	r26, 0x23	; 35
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e3 e2       	ldi	r30, 0x23	; 35
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8e 7f       	andi	r24, 0xFE	; 254
    1168:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	TWCR = (1<<7)|(1<<2);
    116a:	e6 e5       	ldi	r30, 0x56	; 86
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	84 e8       	ldi	r24, 0x84	; 132
    1170:	80 83       	st	Z, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    1172:	e6 e5       	ldi	r30, 0x56	; 86
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	88 23       	and	r24, r24
    117a:	dc f7       	brge	.-10     	; 0x1172 <MTWI_SendSlaveAdderssWithWrite+0x2e>

	if((TWSR & 0xf8) != 0x18){
    117c:	e1 e2       	ldi	r30, 0x21	; 33
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	88 7f       	andi	r24, 0xF8	; 248
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	88 31       	cpi	r24, 0x18	; 24
    118c:	91 05       	cpc	r25, r1
    118e:	11 f0       	breq	.+4      	; 0x1194 <MTWI_SendSlaveAdderssWithWrite+0x50>
		Local_ErrorState = SlaveAdderssWithWriteErr;
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <MTWI_MasterWriteDataByte>:


TWI_ErrStatus MTWI_MasterWriteDataByte(u8 A_u8Data){
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <MTWI_MasterWriteDataByte+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorState = NoError;
    11ac:	19 82       	std	Y+1, r1	; 0x01

	/*Write Data on Data reg*/
	TWDR = A_u8Data;
    11ae:	e3 e2       	ldi	r30, 0x23	; 35
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
    11b6:	a6 e5       	ldi	r26, 0x56	; 86
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e6 e5       	ldi	r30, 0x56	; 86
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	80 68       	ori	r24, 0x80	; 128
    11c2:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    11c4:	e6 e5       	ldi	r30, 0x56	; 86
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	88 23       	and	r24, r24
    11cc:	dc f7       	brge	.-10     	; 0x11c4 <MTWI_MasterWriteDataByte+0x24>

	if((TWSR & 0xf8) != 0x28){
    11ce:	e1 e2       	ldi	r30, 0x21	; 33
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	88 7f       	andi	r24, 0xF8	; 248
    11da:	90 70       	andi	r25, 0x00	; 0
    11dc:	88 32       	cpi	r24, 0x28	; 40
    11de:	91 05       	cpc	r25, r1
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <MTWI_MasterWriteDataByte+0x46>
		Local_ErrorState = MasterWriteDataErr;
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <MTWI_SLaveReading>:

TWI_ErrStatus MTWI_SLaveReading(u8 *A_pu8RecievedData){
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <MTWI_SLaveReading+0x6>
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrStatus Local_ErrorState = NoError;
    1202:	19 82       	std	Y+1, r1	; 0x01

	/*Set Ack Bit*/
	SET_BIT(TWCR,6);
    1204:	a6 e5       	ldi	r26, 0x56	; 86
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e6 e5       	ldi	r30, 0x56	; 86
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 64       	ori	r24, 0x40	; 64
    1210:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
    1212:	a6 e5       	ldi	r26, 0x56	; 86
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e6 e5       	ldi	r30, 0x56	; 86
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 68       	ori	r24, 0x80	; 128
    121e:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    1220:	e6 e5       	ldi	r30, 0x56	; 86
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 23       	and	r24, r24
    1228:	dc f7       	brge	.-10     	; 0x1220 <MTWI_SLaveReading+0x2e>

	if((TWSR & 0xf8) != 0x60){
    122a:	e1 e2       	ldi	r30, 0x21	; 33
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	88 7f       	andi	r24, 0xF8	; 248
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	80 36       	cpi	r24, 0x60	; 96
    123a:	91 05       	cpc	r25, r1
    123c:	11 f0       	breq	.+4      	; 0x1242 <MTWI_SLaveReading+0x50>
			Local_ErrorState = SlaveAdderessRecievedErr;
    123e:	84 e0       	ldi	r24, 0x04	; 4
    1240:	89 83       	std	Y+1, r24	; 0x01
	}

	//////////////////////////////

	/*Set Ack Bit*/
	SET_BIT(TWCR,6);
    1242:	a6 e5       	ldi	r26, 0x56	; 86
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e6 e5       	ldi	r30, 0x56	; 86
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
    1250:	a6 e5       	ldi	r26, 0x56	; 86
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e6 e5       	ldi	r30, 0x56	; 86
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 68       	ori	r24, 0x80	; 128
    125c:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 23       	and	r24, r24
    1266:	dc f7       	brge	.-10     	; 0x125e <MTWI_SLaveReading+0x6c>

	if((TWSR & 0xf8) != 0x80){
    1268:	e1 e2       	ldi	r30, 0x21	; 33
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	88 7f       	andi	r24, 0xF8	; 248
    1274:	90 70       	andi	r25, 0x00	; 0
    1276:	80 38       	cpi	r24, 0x80	; 128
    1278:	91 05       	cpc	r25, r1
    127a:	19 f0       	breq	.+6      	; 0x1282 <MTWI_SLaveReading+0x90>
		Local_ErrorState = SlaveDataRecievedErr;
    127c:	85 e0       	ldi	r24, 0x05	; 5
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	06 c0       	rjmp	.+12     	; 0x128e <MTWI_SLaveReading+0x9c>
	}
	else{
		*A_pu8RecievedData = TWDR;
    1282:	e3 e2       	ldi	r30, 0x23	; 35
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	ea 81       	ldd	r30, Y+2	; 0x02
    128a:	fb 81       	ldd	r31, Y+3	; 0x03
    128c:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
    128e:	89 81       	ldd	r24, Y+1	; 0x01


}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <MTWI_voidSendStopCondition>:

void MTWI_voidSendStopCondition(){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62

	/*Stop Condtion on the bus*/
	SET_BIT(TWCR, 4);
    12a4:	a6 e5       	ldi	r26, 0x56	; 86
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e6 e5       	ldi	r30, 0x56	; 86
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	80 61       	ori	r24, 0x10	; 16
    12b0:	8c 93       	st	X, r24

	/*Clear Interrupt Flag*/
	SET_BIT(TWCR, 7);
    12b2:	a6 e5       	ldi	r26, 0x56	; 86
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e6 e5       	ldi	r30, 0x56	; 86
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 68       	ori	r24, 0x80	; 128
    12be:	8c 93       	st	X, r24
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <MGIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Interface.h"


void MGIE_voidEnable()
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    12ce:	af e5       	ldi	r26, 0x5F	; 95
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e5       	ldi	r30, 0x5F	; 95
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	8c 93       	st	X, r24
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <MGIE_voidDisable>:

void MGIE_voidDisable()
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    12ea:	af e5       	ldi	r26, 0x5F	; 95
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ef e5       	ldi	r30, 0x5F	; 95
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 77       	andi	r24, 0x7F	; 127
    12f6:	8c 93       	st	X, r24
}
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <MEXTI_voidSenseControl>:
 * 2 -----> Falling
 * 3 -----> Rising
 *
 * */
void MEXTI_voidSenseControl(u8 A_u8EXTINumber, u8 A_u8State)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	2a 97       	sbiw	r28, 0x0a	; 10
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTINumber)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3a 87       	std	Y+10, r19	; 0x0a
    131e:	29 87       	std	Y+9, r18	; 0x09
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <MEXTI_voidSenseControl+0x2e>
    132a:	66 c0       	rjmp	.+204    	; 0x13f8 <MEXTI_voidSenseControl+0xfa>
    132c:	29 85       	ldd	r18, Y+9	; 0x09
    132e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	09 f4       	brne	.+2      	; 0x1338 <MEXTI_voidSenseControl+0x3a>
    1336:	bb c0       	rjmp	.+374    	; 0x14ae <MEXTI_voidSenseControl+0x1b0>
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	09 f0       	breq	.+2      	; 0x1342 <MEXTI_voidSenseControl+0x44>
    1340:	d5 c0       	rjmp	.+426    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
	{
		case 0:
			switch(A_u8State)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	38 87       	std	Y+8, r19	; 0x08
    134a:	2f 83       	std	Y+7, r18	; 0x07
    134c:	8f 81       	ldd	r24, Y+7	; 0x07
    134e:	98 85       	ldd	r25, Y+8	; 0x08
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	21 f1       	breq	.+72     	; 0x139e <MEXTI_voidSenseControl+0xa0>
    1356:	2f 81       	ldd	r18, Y+7	; 0x07
    1358:	38 85       	ldd	r19, Y+8	; 0x08
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <MEXTI_voidSenseControl+0x6c>
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <MEXTI_voidSenseControl+0x82>
    1368:	c1 c0       	rjmp	.+386    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
    136a:	2f 81       	ldd	r18, Y+7	; 0x07
    136c:	38 85       	ldd	r19, Y+8	; 0x08
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	21 f1       	breq	.+72     	; 0x13bc <MEXTI_voidSenseControl+0xbe>
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	71 f1       	breq	.+92     	; 0x13da <MEXTI_voidSenseControl+0xdc>
    137e:	b6 c0       	rjmp	.+364    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
			{
				case 0:
					CLR_BIT(MCUCR, 0);
    1380:	a5 e5       	ldi	r26, 0x55	; 85
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e5       	ldi	r30, 0x55	; 85
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8e 7f       	andi	r24, 0xFE	; 254
    138c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    138e:	a5 e5       	ldi	r26, 0x55	; 85
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e5       	ldi	r30, 0x55	; 85
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8d 7f       	andi	r24, 0xFD	; 253
    139a:	8c 93       	st	X, r24
    139c:	a7 c0       	rjmp	.+334    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
    139e:	a5 e5       	ldi	r26, 0x55	; 85
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e5       	ldi	r30, 0x55	; 85
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8d 7f       	andi	r24, 0xFD	; 253
    13b8:	8c 93       	st	X, r24
    13ba:	98 c0       	rjmp	.+304    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
    13bc:	a5 e5       	ldi	r26, 0x55	; 85
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e5 e5       	ldi	r30, 0x55	; 85
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8e 7f       	andi	r24, 0xFE	; 254
    13c8:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    13ca:	a5 e5       	ldi	r26, 0x55	; 85
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e5       	ldi	r30, 0x55	; 85
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	82 60       	ori	r24, 0x02	; 2
    13d6:	8c 93       	st	X, r24
    13d8:	89 c0       	rjmp	.+274    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
			    break;

				case 3:
					SET_BIT(MCUCR, 0);
    13da:	a5 e5       	ldi	r26, 0x55	; 85
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e5       	ldi	r30, 0x55	; 85
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    13e8:	a5 e5       	ldi	r26, 0x55	; 85
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e5       	ldi	r30, 0x55	; 85
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	82 60       	ori	r24, 0x02	; 2
    13f4:	8c 93       	st	X, r24
    13f6:	7a c0       	rjmp	.+244    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;
			}
		break;

		case 1:
			switch(A_u8State)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3e 83       	std	Y+6, r19	; 0x06
    1400:	2d 83       	std	Y+5, r18	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	21 f1       	breq	.+72     	; 0x1454 <MEXTI_voidSenseControl+0x156>
    140c:	2d 81       	ldd	r18, Y+5	; 0x05
    140e:	3e 81       	ldd	r19, Y+6	; 0x06
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <MEXTI_voidSenseControl+0x122>
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 f0       	breq	.+24     	; 0x1436 <MEXTI_voidSenseControl+0x138>
    141e:	66 c0       	rjmp	.+204    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	3e 81       	ldd	r19, Y+6	; 0x06
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	21 f1       	breq	.+72     	; 0x1472 <MEXTI_voidSenseControl+0x174>
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	71 f1       	breq	.+92     	; 0x1490 <MEXTI_voidSenseControl+0x192>
    1434:	5b c0       	rjmp	.+182    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
			{
				case 0:
					CLR_BIT(MCUCR,2);
    1436:	a5 e5       	ldi	r26, 0x55	; 85
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e5       	ldi	r30, 0x55	; 85
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8b 7f       	andi	r24, 0xFB	; 251
    1442:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    1444:	a5 e5       	ldi	r26, 0x55	; 85
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e5       	ldi	r30, 0x55	; 85
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	87 7f       	andi	r24, 0xF7	; 247
    1450:	8c 93       	st	X, r24
    1452:	4c c0       	rjmp	.+152    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
    1454:	a5 e5       	ldi	r26, 0x55	; 85
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e5 e5       	ldi	r30, 0x55	; 85
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
    1462:	a5 e5       	ldi	r26, 0x55	; 85
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e5       	ldi	r30, 0x55	; 85
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	87 7f       	andi	r24, 0xF7	; 247
    146e:	8c 93       	st	X, r24
    1470:	3d c0       	rjmp	.+122    	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
    1472:	a5 e5       	ldi	r26, 0x55	; 85
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e5       	ldi	r30, 0x55	; 85
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    1480:	a5 e5       	ldi	r26, 0x55	; 85
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e5       	ldi	r30, 0x55	; 85
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	88 60       	ori	r24, 0x08	; 8
    148c:	8c 93       	st	X, r24
    148e:	2e c0       	rjmp	.+92     	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
    1490:	a5 e5       	ldi	r26, 0x55	; 85
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e5 e5       	ldi	r30, 0x55	; 85
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	84 60       	ori	r24, 0x04	; 4
    149c:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    149e:	a5 e5       	ldi	r26, 0x55	; 85
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	88 60       	ori	r24, 0x08	; 8
    14aa:	8c 93       	st	X, r24
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				break;
			}
		break;

		case 2:
			switch(A_u8State)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3c 83       	std	Y+4, r19	; 0x04
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	91 05       	cpc	r25, r1
    14c0:	31 f0       	breq	.+12     	; 0x14ce <MEXTI_voidSenseControl+0x1d0>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	23 30       	cpi	r18, 0x03	; 3
    14c8:	31 05       	cpc	r19, r1
    14ca:	49 f0       	breq	.+18     	; 0x14de <MEXTI_voidSenseControl+0x1e0>
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
			{
				case 2: CLR_BIT(MCUCSR, 6); break;
    14ce:	a4 e5       	ldi	r26, 0x54	; 84
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e5       	ldi	r30, 0x54	; 84
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7b       	andi	r24, 0xBF	; 191
    14da:	8c 93       	st	X, r24
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <MEXTI_voidSenseControl+0x1ee>
				case 3: SET_BIT(MCUCSR, 6); break;
    14de:	a4 e5       	ldi	r26, 0x54	; 84
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e4 e5       	ldi	r30, 0x54	; 84
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 64       	ori	r24, 0x40	; 64
    14ea:	8c 93       	st	X, r24
			}
		break;
	}
}
    14ec:	2a 96       	adiw	r28, 0x0a	; 10
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <MEXTI_voidEnable>:

void MEXTI_voidEnable(u8 A_u8EXTINumber)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <MEXTI_voidEnable+0x6>
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTINumber)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3b 83       	std	Y+3, r19	; 0x03
    1514:	2a 83       	std	Y+2, r18	; 0x02
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	9b 81       	ldd	r25, Y+3	; 0x03
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	89 f0       	breq	.+34     	; 0x1542 <MEXTI_voidEnable+0x44>
    1520:	2a 81       	ldd	r18, Y+2	; 0x02
    1522:	3b 81       	ldd	r19, Y+3	; 0x03
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	a1 f0       	breq	.+40     	; 0x1552 <MEXTI_voidEnable+0x54>
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	b9 f4       	brne	.+46     	; 0x1560 <MEXTI_voidEnable+0x62>
	{
		case 0: SET_BIT(GICR, 6); break;
    1532:	ab e5       	ldi	r26, 0x5B	; 91
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	eb e5       	ldi	r30, 0x5B	; 91
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	80 64       	ori	r24, 0x40	; 64
    153e:	8c 93       	st	X, r24
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <MEXTI_voidEnable+0x62>

		case 1: SET_BIT(GICR, 7); break;
    1542:	ab e5       	ldi	r26, 0x5B	; 91
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	eb e5       	ldi	r30, 0x5B	; 91
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 68       	ori	r24, 0x80	; 128
    154e:	8c 93       	st	X, r24
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <MEXTI_voidEnable+0x62>

		case 2: SET_BIT(GICR, 5); break;
    1552:	ab e5       	ldi	r26, 0x5B	; 91
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e5       	ldi	r30, 0x5B	; 91
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 62       	ori	r24, 0x20	; 32
    155e:	8c 93       	st	X, r24
	}
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8EXTINumber)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <MEXTI_voidDisable+0x6>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTINumber)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	3b 83       	std	Y+3, r19	; 0x03
    1582:	2a 83       	std	Y+2, r18	; 0x02
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	89 f0       	breq	.+34     	; 0x15b0 <MEXTI_voidDisable+0x44>
    158e:	2a 81       	ldd	r18, Y+2	; 0x02
    1590:	3b 81       	ldd	r19, Y+3	; 0x03
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	a1 f0       	breq	.+40     	; 0x15c0 <MEXTI_voidDisable+0x54>
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	b9 f4       	brne	.+46     	; 0x15ce <MEXTI_voidDisable+0x62>
	{
		case 0: CLR_BIT(GICR, 6); break;
    15a0:	ab e5       	ldi	r26, 0x5B	; 91
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e5       	ldi	r30, 0x5B	; 91
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 7b       	andi	r24, 0xBF	; 191
    15ac:	8c 93       	st	X, r24
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <MEXTI_voidDisable+0x62>

		case 1: CLR_BIT(GICR, 7); break;
    15b0:	ab e5       	ldi	r26, 0x5B	; 91
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	eb e5       	ldi	r30, 0x5B	; 91
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 77       	andi	r24, 0x7F	; 127
    15bc:	8c 93       	st	X, r24
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <MEXTI_voidDisable+0x62>

		case 2: CLR_BIT(GICR, 5); break;
    15c0:	ab e5       	ldi	r26, 0x5B	; 91
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e5       	ldi	r30, 0x5B	; 91
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 7d       	andi	r24, 0xDF	; 223
    15cc:	8c 93       	st	X, r24
	}
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <MDIO_voidSetPinDirection>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Interface.h"


void MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2d 97       	sbiw	r28, 0x0d	; 13
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
    15f2:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinNumber < 8 && A_u8Dir < 2)
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <MDIO_voidSetPinDirection+0x22>
    15fa:	06 c1       	rjmp	.+524    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	08 f0       	brcs	.+2      	; 0x1604 <MDIO_voidSetPinDirection+0x2a>
    1602:	02 c1       	rjmp	.+516    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
	{
		switch(A_u8PortNumber)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3d 87       	std	Y+13, r19	; 0x0d
    160c:	2c 87       	std	Y+12, r18	; 0x0c
    160e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1610:	9d 85       	ldd	r25, Y+13	; 0x0d
    1612:	82 34       	cpi	r24, 0x42	; 66
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <MDIO_voidSetPinDirection+0x40>
    1618:	50 c0       	rjmp	.+160    	; 0x16ba <MDIO_voidSetPinDirection+0xe0>
    161a:	2c 85       	ldd	r18, Y+12	; 0x0c
    161c:	3d 85       	ldd	r19, Y+13	; 0x0d
    161e:	23 34       	cpi	r18, 0x43	; 67
    1620:	31 05       	cpc	r19, r1
    1622:	34 f4       	brge	.+12     	; 0x1630 <MDIO_voidSetPinDirection+0x56>
    1624:	8c 85       	ldd	r24, Y+12	; 0x0c
    1626:	9d 85       	ldd	r25, Y+13	; 0x0d
    1628:	81 34       	cpi	r24, 0x41	; 65
    162a:	91 05       	cpc	r25, r1
    162c:	71 f0       	breq	.+28     	; 0x164a <MDIO_voidSetPinDirection+0x70>
    162e:	ec c0       	rjmp	.+472    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
    1630:	2c 85       	ldd	r18, Y+12	; 0x0c
    1632:	3d 85       	ldd	r19, Y+13	; 0x0d
    1634:	23 34       	cpi	r18, 0x43	; 67
    1636:	31 05       	cpc	r19, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <MDIO_voidSetPinDirection+0x62>
    163a:	77 c0       	rjmp	.+238    	; 0x172a <MDIO_voidSetPinDirection+0x150>
    163c:	8c 85       	ldd	r24, Y+12	; 0x0c
    163e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1640:	84 34       	cpi	r24, 0x44	; 68
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <MDIO_voidSetPinDirection+0x6e>
    1646:	a9 c0       	rjmp	.+338    	; 0x179a <MDIO_voidSetPinDirection+0x1c0>
    1648:	df c0       	rjmp	.+446    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
		{
			case 'A':
				switch(A_u8Dir)
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3b 87       	std	Y+11, r19	; 0x0b
    1652:	2a 87       	std	Y+10, r18	; 0x0a
    1654:	8a 85       	ldd	r24, Y+10	; 0x0a
    1656:	9b 85       	ldd	r25, Y+11	; 0x0b
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	31 f0       	breq	.+12     	; 0x1668 <MDIO_voidSetPinDirection+0x8e>
    165c:	2a 85       	ldd	r18, Y+10	; 0x0a
    165e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1660:	21 30       	cpi	r18, 0x01	; 1
    1662:	31 05       	cpc	r19, r1
    1664:	b1 f0       	breq	.+44     	; 0x1692 <MDIO_voidSetPinDirection+0xb8>
    1666:	d0 c0       	rjmp	.+416    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRA, A_u8PinNumber); break;
    1668:	aa e3       	ldi	r26, 0x3A	; 58
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ea e3       	ldi	r30, 0x3A	; 58
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <MDIO_voidSetPinDirection+0xac>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <MDIO_voidSetPinDirection+0xa8>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	bb c0       	rjmp	.+374    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    1692:	aa e3       	ldi	r26, 0x3A	; 58
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e3       	ldi	r30, 0x3A	; 58
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <MDIO_voidSetPinDirection+0xd6>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <MDIO_voidSetPinDirection+0xd2>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	a7 c0       	rjmp	.+334    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'B':
				switch(A_u8Dir)
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	39 87       	std	Y+9, r19	; 0x09
    16c2:	28 87       	std	Y+8, r18	; 0x08
    16c4:	88 85       	ldd	r24, Y+8	; 0x08
    16c6:	99 85       	ldd	r25, Y+9	; 0x09
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <MDIO_voidSetPinDirection+0xfe>
    16cc:	28 85       	ldd	r18, Y+8	; 0x08
    16ce:	39 85       	ldd	r19, Y+9	; 0x09
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 05       	cpc	r19, r1
    16d4:	b1 f0       	breq	.+44     	; 0x1702 <MDIO_voidSetPinDirection+0x128>
    16d6:	98 c0       	rjmp	.+304    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRB, A_u8PinNumber); break;
    16d8:	a7 e3       	ldi	r26, 0x37	; 55
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e7 e3       	ldi	r30, 0x37	; 55
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <MDIO_voidSetPinDirection+0x11c>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <MDIO_voidSetPinDirection+0x118>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	83 c0       	rjmp	.+262    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    1702:	a7 e3       	ldi	r26, 0x37	; 55
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e3       	ldi	r30, 0x37	; 55
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <MDIO_voidSetPinDirection+0x146>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <MDIO_voidSetPinDirection+0x142>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	6f c0       	rjmp	.+222    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'C':
				switch(A_u8Dir)
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	3f 83       	std	Y+7, r19	; 0x07
    1732:	2e 83       	std	Y+6, r18	; 0x06
    1734:	8e 81       	ldd	r24, Y+6	; 0x06
    1736:	9f 81       	ldd	r25, Y+7	; 0x07
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	31 f0       	breq	.+12     	; 0x1748 <MDIO_voidSetPinDirection+0x16e>
    173c:	2e 81       	ldd	r18, Y+6	; 0x06
    173e:	3f 81       	ldd	r19, Y+7	; 0x07
    1740:	21 30       	cpi	r18, 0x01	; 1
    1742:	31 05       	cpc	r19, r1
    1744:	b1 f0       	breq	.+44     	; 0x1772 <MDIO_voidSetPinDirection+0x198>
    1746:	60 c0       	rjmp	.+192    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRC, A_u8PinNumber); break;
    1748:	a4 e3       	ldi	r26, 0x34	; 52
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e4 e3       	ldi	r30, 0x34	; 52
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <MDIO_voidSetPinDirection+0x18c>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <MDIO_voidSetPinDirection+0x188>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	4b c0       	rjmp	.+150    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    1772:	a4 e3       	ldi	r26, 0x34	; 52
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <MDIO_voidSetPinDirection+0x1b6>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <MDIO_voidSetPinDirection+0x1b2>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	37 c0       	rjmp	.+110    	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'D':
				switch(A_u8Dir)
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3d 83       	std	Y+5, r19	; 0x05
    17a2:	2c 83       	std	Y+4, r18	; 0x04
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <MDIO_voidSetPinDirection+0x1de>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	21 30       	cpi	r18, 0x01	; 1
    17b2:	31 05       	cpc	r19, r1
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <MDIO_voidSetPinDirection+0x208>
    17b6:	28 c0       	rjmp	.+80     	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
				{
						case 0: CLR_BIT(DDRD, A_u8PinNumber); break;
    17b8:	a1 e3       	ldi	r26, 0x31	; 49
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e1 e3       	ldi	r30, 0x31	; 49
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <MDIO_voidSetPinDirection+0x1fc>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <MDIO_voidSetPinDirection+0x1f8>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <MDIO_voidSetPinDirection+0x22e>
						case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    17e2:	a1 e3       	ldi	r26, 0x31	; 49
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e1 e3       	ldi	r30, 0x31	; 49
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <MDIO_voidSetPinDirection+0x226>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <MDIO_voidSetPinDirection+0x222>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1808:	2d 96       	adiw	r28, 0x0d	; 13
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	2d 97       	sbiw	r28, 0x0d	; 13
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	6a 83       	std	Y+2, r22	; 0x02
    1832:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinNumber < 8  && A_u8PinValue < 2)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	88 30       	cpi	r24, 0x08	; 8
    1838:	08 f0       	brcs	.+2      	; 0x183c <MDIO_voidSetPinValue+0x22>
    183a:	06 c1       	rjmp	.+524    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	08 f0       	brcs	.+2      	; 0x1844 <MDIO_voidSetPinValue+0x2a>
    1842:	02 c1       	rjmp	.+516    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
	{
		switch(A_u8PortNumber)
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3d 87       	std	Y+13, r19	; 0x0d
    184c:	2c 87       	std	Y+12, r18	; 0x0c
    184e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1850:	9d 85       	ldd	r25, Y+13	; 0x0d
    1852:	82 34       	cpi	r24, 0x42	; 66
    1854:	91 05       	cpc	r25, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <MDIO_voidSetPinValue+0x40>
    1858:	50 c0       	rjmp	.+160    	; 0x18fa <MDIO_voidSetPinValue+0xe0>
    185a:	2c 85       	ldd	r18, Y+12	; 0x0c
    185c:	3d 85       	ldd	r19, Y+13	; 0x0d
    185e:	23 34       	cpi	r18, 0x43	; 67
    1860:	31 05       	cpc	r19, r1
    1862:	34 f4       	brge	.+12     	; 0x1870 <MDIO_voidSetPinValue+0x56>
    1864:	8c 85       	ldd	r24, Y+12	; 0x0c
    1866:	9d 85       	ldd	r25, Y+13	; 0x0d
    1868:	81 34       	cpi	r24, 0x41	; 65
    186a:	91 05       	cpc	r25, r1
    186c:	71 f0       	breq	.+28     	; 0x188a <MDIO_voidSetPinValue+0x70>
    186e:	ec c0       	rjmp	.+472    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
    1870:	2c 85       	ldd	r18, Y+12	; 0x0c
    1872:	3d 85       	ldd	r19, Y+13	; 0x0d
    1874:	23 34       	cpi	r18, 0x43	; 67
    1876:	31 05       	cpc	r19, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <MDIO_voidSetPinValue+0x62>
    187a:	77 c0       	rjmp	.+238    	; 0x196a <MDIO_voidSetPinValue+0x150>
    187c:	8c 85       	ldd	r24, Y+12	; 0x0c
    187e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1880:	84 34       	cpi	r24, 0x44	; 68
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <MDIO_voidSetPinValue+0x6e>
    1886:	a9 c0       	rjmp	.+338    	; 0x19da <MDIO_voidSetPinValue+0x1c0>
    1888:	df c0       	rjmp	.+446    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
		{
			case 'A':
				switch(A_u8PinValue)
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3b 87       	std	Y+11, r19	; 0x0b
    1892:	2a 87       	std	Y+10, r18	; 0x0a
    1894:	8a 85       	ldd	r24, Y+10	; 0x0a
    1896:	9b 85       	ldd	r25, Y+11	; 0x0b
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	31 f0       	breq	.+12     	; 0x18a8 <MDIO_voidSetPinValue+0x8e>
    189c:	2a 85       	ldd	r18, Y+10	; 0x0a
    189e:	3b 85       	ldd	r19, Y+11	; 0x0b
    18a0:	21 30       	cpi	r18, 0x01	; 1
    18a2:	31 05       	cpc	r19, r1
    18a4:	b1 f0       	breq	.+44     	; 0x18d2 <MDIO_voidSetPinValue+0xb8>
    18a6:	d0 c0       	rjmp	.+416    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTA, A_u8PinNumber); break;
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <MDIO_voidSetPinValue+0xac>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <MDIO_voidSetPinValue+0xa8>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	bb c0       	rjmp	.+374    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTA, A_u8PinNumber); break;
    18d2:	ab e3       	ldi	r26, 0x3B	; 59
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	eb e3       	ldi	r30, 0x3B	; 59
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MDIO_voidSetPinValue+0xd6>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <MDIO_voidSetPinValue+0xd2>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	a7 c0       	rjmp	.+334    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case'B':
				switch(A_u8PinValue)
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	39 87       	std	Y+9, r19	; 0x09
    1902:	28 87       	std	Y+8, r18	; 0x08
    1904:	88 85       	ldd	r24, Y+8	; 0x08
    1906:	99 85       	ldd	r25, Y+9	; 0x09
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	31 f0       	breq	.+12     	; 0x1918 <MDIO_voidSetPinValue+0xfe>
    190c:	28 85       	ldd	r18, Y+8	; 0x08
    190e:	39 85       	ldd	r19, Y+9	; 0x09
    1910:	21 30       	cpi	r18, 0x01	; 1
    1912:	31 05       	cpc	r19, r1
    1914:	b1 f0       	breq	.+44     	; 0x1942 <MDIO_voidSetPinValue+0x128>
    1916:	98 c0       	rjmp	.+304    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTB, A_u8PinNumber); break;
    1918:	a8 e3       	ldi	r26, 0x38	; 56
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <MDIO_voidSetPinValue+0x11c>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <MDIO_voidSetPinValue+0x118>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	83 c0       	rjmp	.+262    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTB, A_u8PinNumber); break;
    1942:	a8 e3       	ldi	r26, 0x38	; 56
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <MDIO_voidSetPinValue+0x146>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <MDIO_voidSetPinValue+0x142>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	6f c0       	rjmp	.+222    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case 'C':
				switch(A_u8PinValue)
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	3f 83       	std	Y+7, r19	; 0x07
    1972:	2e 83       	std	Y+6, r18	; 0x06
    1974:	8e 81       	ldd	r24, Y+6	; 0x06
    1976:	9f 81       	ldd	r25, Y+7	; 0x07
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	31 f0       	breq	.+12     	; 0x1988 <MDIO_voidSetPinValue+0x16e>
    197c:	2e 81       	ldd	r18, Y+6	; 0x06
    197e:	3f 81       	ldd	r19, Y+7	; 0x07
    1980:	21 30       	cpi	r18, 0x01	; 1
    1982:	31 05       	cpc	r19, r1
    1984:	b1 f0       	breq	.+44     	; 0x19b2 <MDIO_voidSetPinValue+0x198>
    1986:	60 c0       	rjmp	.+192    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTC, A_u8PinNumber); break;
    1988:	a5 e3       	ldi	r26, 0x35	; 53
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e3       	ldi	r30, 0x35	; 53
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <MDIO_voidSetPinValue+0x18c>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <MDIO_voidSetPinValue+0x188>
    19aa:	80 95       	com	r24
    19ac:	84 23       	and	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	4b c0       	rjmp	.+150    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTC, A_u8PinNumber); break;
    19b2:	a5 e3       	ldi	r26, 0x35	; 53
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e5 e3       	ldi	r30, 0x35	; 53
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <MDIO_voidSetPinValue+0x1b6>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <MDIO_voidSetPinValue+0x1b2>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	37 c0       	rjmp	.+110    	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case 'D':
				switch(A_u8PinValue)
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3d 83       	std	Y+5, r19	; 0x05
    19e2:	2c 83       	std	Y+4, r18	; 0x04
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <MDIO_voidSetPinValue+0x1de>
    19ec:	2c 81       	ldd	r18, Y+4	; 0x04
    19ee:	3d 81       	ldd	r19, Y+5	; 0x05
    19f0:	21 30       	cpi	r18, 0x01	; 1
    19f2:	31 05       	cpc	r19, r1
    19f4:	b1 f0       	breq	.+44     	; 0x1a22 <MDIO_voidSetPinValue+0x208>
    19f6:	28 c0       	rjmp	.+80     	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTD, A_u8PinNumber); break;
    19f8:	a2 e3       	ldi	r26, 0x32	; 50
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e2 e3       	ldi	r30, 0x32	; 50
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <MDIO_voidSetPinValue+0x1fc>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <MDIO_voidSetPinValue+0x1f8>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	13 c0       	rjmp	.+38     	; 0x1a48 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTD, A_u8PinNumber); break;
    1a22:	a2 e3       	ldi	r26, 0x32	; 50
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e2 e3       	ldi	r30, 0x32	; 50
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <MDIO_voidSetPinValue+0x226>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <MDIO_voidSetPinValue+0x222>
    1a44:	84 2b       	or	r24, r20
    1a46:	8c 93       	st	X, r24
				}
				break;
		}
	}

}
    1a48:	2d 96       	adiw	r28, 0x0d	; 13
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <MDIO_voidSetPortDirection+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <MDIO_voidSetPortDirection+0x8>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNumber)
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3c 83       	std	Y+4, r19	; 0x04
    1a72:	2b 83       	std	Y+3, r18	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	82 34       	cpi	r24, 0x42	; 66
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	d9 f0       	breq	.+54     	; 0x1ab4 <MDIO_voidSetPortDirection+0x5a>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	23 34       	cpi	r18, 0x43	; 67
    1a84:	31 05       	cpc	r19, r1
    1a86:	34 f4       	brge	.+12     	; 0x1a94 <MDIO_voidSetPortDirection+0x3a>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	81 34       	cpi	r24, 0x41	; 65
    1a8e:	91 05       	cpc	r25, r1
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <MDIO_voidSetPortDirection+0x50>
    1a92:	1e c0       	rjmp	.+60     	; 0x1ad0 <MDIO_voidSetPortDirection+0x76>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	23 34       	cpi	r18, 0x43	; 67
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	81 f0       	breq	.+32     	; 0x1abe <MDIO_voidSetPortDirection+0x64>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	84 34       	cpi	r24, 0x44	; 68
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	81 f0       	breq	.+32     	; 0x1ac8 <MDIO_voidSetPortDirection+0x6e>
    1aa8:	13 c0       	rjmp	.+38     	; 0x1ad0 <MDIO_voidSetPortDirection+0x76>
	{
		case 'A': DDRA = A_u8Dir; break;
    1aaa:	ea e3       	ldi	r30, 0x3A	; 58
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	80 83       	st	Z, r24
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <MDIO_voidSetPortDirection+0x76>

		case 'B': DDRB = A_u8Dir; break;
    1ab4:	e7 e3       	ldi	r30, 0x37	; 55
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <MDIO_voidSetPortDirection+0x76>

		case 'C': DDRC = A_u8Dir; break;
    1abe:	e4 e3       	ldi	r30, 0x34	; 52
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <MDIO_voidSetPortDirection+0x76>

		case 'D': DDRD = A_u8Dir; break;
    1ac8:	e1 e3       	ldi	r30, 0x31	; 49
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
	}
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <MDIO_voidSetPortValue+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <MDIO_voidSetPortValue+0x8>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNumber)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3c 83       	std	Y+4, r19	; 0x04
    1af6:	2b 83       	std	Y+3, r18	; 0x03
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	82 34       	cpi	r24, 0x42	; 66
    1afe:	91 05       	cpc	r25, r1
    1b00:	d9 f0       	breq	.+54     	; 0x1b38 <MDIO_voidSetPortValue+0x5a>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	23 34       	cpi	r18, 0x43	; 67
    1b08:	31 05       	cpc	r19, r1
    1b0a:	34 f4       	brge	.+12     	; 0x1b18 <MDIO_voidSetPortValue+0x3a>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 34       	cpi	r24, 0x41	; 65
    1b12:	91 05       	cpc	r25, r1
    1b14:	61 f0       	breq	.+24     	; 0x1b2e <MDIO_voidSetPortValue+0x50>
    1b16:	1e c0       	rjmp	.+60     	; 0x1b54 <MDIO_voidSetPortValue+0x76>
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	23 34       	cpi	r18, 0x43	; 67
    1b1e:	31 05       	cpc	r19, r1
    1b20:	81 f0       	breq	.+32     	; 0x1b42 <MDIO_voidSetPortValue+0x64>
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	84 34       	cpi	r24, 0x44	; 68
    1b28:	91 05       	cpc	r25, r1
    1b2a:	81 f0       	breq	.+32     	; 0x1b4c <MDIO_voidSetPortValue+0x6e>
    1b2c:	13 c0       	rjmp	.+38     	; 0x1b54 <MDIO_voidSetPortValue+0x76>
	{
		case 'A': PORTA = A_u8PortValue; break;
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <MDIO_voidSetPortValue+0x76>

		case 'B': PORTB = A_u8PortValue; break;
    1b38:	e8 e3       	ldi	r30, 0x38	; 56
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	80 83       	st	Z, r24
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <MDIO_voidSetPortValue+0x76>

		case 'C': PORTC = A_u8PortValue; break;
    1b42:	e5 e3       	ldi	r30, 0x35	; 53
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	80 83       	st	Z, r24
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <MDIO_voidSetPortValue+0x76>

		case 'D': PORTD = A_u8PortValue; break;
    1b4c:	e2 e3       	ldi	r30, 0x32	; 50
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	80 83       	st	Z, r24
	}
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <MDIO_u8GetPinValue>:

/* return 0 1 */
u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <MDIO_u8GetPinValue+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <MDIO_u8GetPinValue+0x8>
    1b6a:	0f 92       	push	r0
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	8a 83       	std	Y+2, r24	; 0x02
    1b72:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	if(A_u8PinNumber < 8)
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	88 30       	cpi	r24, 0x08	; 8
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <MDIO_u8GetPinValue+0x1a>
    1b7a:	68 c0       	rjmp	.+208    	; 0x1c4c <MDIO_u8GetPinValue+0xea>
	{
		switch(A_u8PortNumber)
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3d 83       	std	Y+5, r19	; 0x05
    1b84:	2c 83       	std	Y+4, r18	; 0x04
    1b86:	4c 81       	ldd	r20, Y+4	; 0x04
    1b88:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8a:	42 34       	cpi	r20, 0x42	; 66
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	41 f1       	breq	.+80     	; 0x1be0 <MDIO_u8GetPinValue+0x7e>
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	83 34       	cpi	r24, 0x43	; 67
    1b96:	91 05       	cpc	r25, r1
    1b98:	34 f4       	brge	.+12     	; 0x1ba6 <MDIO_u8GetPinValue+0x44>
    1b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9e:	21 34       	cpi	r18, 0x41	; 65
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <MDIO_u8GetPinValue+0x5a>
    1ba4:	55 c0       	rjmp	.+170    	; 0x1c50 <MDIO_u8GetPinValue+0xee>
    1ba6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ba8:	5d 81       	ldd	r21, Y+5	; 0x05
    1baa:	43 34       	cpi	r20, 0x43	; 67
    1bac:	51 05       	cpc	r21, r1
    1bae:	51 f1       	breq	.+84     	; 0x1c04 <MDIO_u8GetPinValue+0xa2>
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	84 34       	cpi	r24, 0x44	; 68
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	b9 f1       	breq	.+110    	; 0x1c28 <MDIO_u8GetPinValue+0xc6>
    1bba:	4a c0       	rjmp	.+148    	; 0x1c50 <MDIO_u8GetPinValue+0xee>
		{
			case 'A': Local_u8Result = GET_BIT(PINA, A_u8PinNumber); break;
    1bbc:	e9 e3       	ldi	r30, 0x39	; 57
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <MDIO_u8GetPinValue+0x72>
    1bd0:	55 95       	asr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	8a 95       	dec	r24
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <MDIO_u8GetPinValue+0x6e>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	38 c0       	rjmp	.+112    	; 0x1c50 <MDIO_u8GetPinValue+0xee>
			case 'B': Local_u8Result = GET_BIT(PINB, A_u8PinNumber); break;
    1be0:	e6 e3       	ldi	r30, 0x36	; 54
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a9 01       	movw	r20, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <MDIO_u8GetPinValue+0x96>
    1bf4:	55 95       	asr	r21
    1bf6:	47 95       	ror	r20
    1bf8:	8a 95       	dec	r24
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <MDIO_u8GetPinValue+0x92>
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	81 70       	andi	r24, 0x01	; 1
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	26 c0       	rjmp	.+76     	; 0x1c50 <MDIO_u8GetPinValue+0xee>
			case 'C': Local_u8Result = GET_BIT(PINC, A_u8PinNumber); break;
    1c04:	e3 e3       	ldi	r30, 0x33	; 51
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a9 01       	movw	r20, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <MDIO_u8GetPinValue+0xba>
    1c18:	55 95       	asr	r21
    1c1a:	47 95       	ror	r20
    1c1c:	8a 95       	dec	r24
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <MDIO_u8GetPinValue+0xb6>
    1c20:	ca 01       	movw	r24, r20
    1c22:	81 70       	andi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <MDIO_u8GetPinValue+0xee>
			case 'D': Local_u8Result = GET_BIT(PIND, A_u8PinNumber); break;
    1c28:	e0 e3       	ldi	r30, 0x30	; 48
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a9 01       	movw	r20, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <MDIO_u8GetPinValue+0xde>
    1c3c:	55 95       	asr	r21
    1c3e:	47 95       	ror	r20
    1c40:	8a 95       	dec	r24
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <MDIO_u8GetPinValue+0xda>
    1c44:	ca 01       	movw	r24, r20
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <MDIO_u8GetPinValue+0xee>
		}
	}
	else
	{
		Local_u8Result = 255;
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <MADC_voidInit>:
 * AVCC  	--- 1
 * Internal --- 2
 */

void MADC_voidInit(u8 A_u8Aref)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <MADC_voidInit+0x6>
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	/*AREF Selection*/
	switch(A_u8Aref)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3b 83       	std	Y+3, r19	; 0x03
    1c78:	2a 83       	std	Y+2, r18	; 0x02
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	c1 f0       	breq	.+48     	; 0x1cb4 <MADC_voidInit+0x52>
    1c84:	2a 81       	ldd	r18, Y+2	; 0x02
    1c86:	3b 81       	ldd	r19, Y+3	; 0x03
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	11 f1       	breq	.+68     	; 0x1cd2 <MADC_voidInit+0x70>
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f5       	brne	.+88     	; 0x1cee <MADC_voidInit+0x8c>
	{
	case 0:
		CLR_BIT(ADMUX, 6);
    1c96:	a7 e2       	ldi	r26, 0x27	; 39
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e2       	ldi	r30, 0x27	; 39
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8f 7b       	andi	r24, 0xBF	; 191
    1ca2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, 7);
    1ca4:	a7 e2       	ldi	r26, 0x27	; 39
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e7 e2       	ldi	r30, 0x27	; 39
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 77       	andi	r24, 0x7F	; 127
    1cb0:	8c 93       	st	X, r24
    1cb2:	1d c0       	rjmp	.+58     	; 0x1cee <MADC_voidInit+0x8c>
		break;
	case 1:
		SET_BIT(ADMUX, 6);
    1cb4:	a7 e2       	ldi	r26, 0x27	; 39
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e7 e2       	ldi	r30, 0x27	; 39
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 64       	ori	r24, 0x40	; 64
    1cc0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, 7);
    1cc2:	a7 e2       	ldi	r26, 0x27	; 39
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e7 e2       	ldi	r30, 0x27	; 39
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 77       	andi	r24, 0x7F	; 127
    1cce:	8c 93       	st	X, r24
    1cd0:	0e c0       	rjmp	.+28     	; 0x1cee <MADC_voidInit+0x8c>
		break;
	case 2:
		SET_BIT(ADMUX, 6);
    1cd2:	a7 e2       	ldi	r26, 0x27	; 39
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e7 e2       	ldi	r30, 0x27	; 39
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 64       	ori	r24, 0x40	; 64
    1cde:	8c 93       	st	X, r24
		SET_BIT(ADMUX, 7);
    1ce0:	a7 e2       	ldi	r26, 0x27	; 39
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e7 e2       	ldi	r30, 0x27	; 39
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 68       	ori	r24, 0x80	; 128
    1cec:	8c 93       	st	X, r24
		break;
	}

	/*Left Adjust*/
	SET_BIT(ADMUX, 5);
    1cee:	a7 e2       	ldi	r26, 0x27	; 39
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e7 e2       	ldi	r30, 0x27	; 39
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 62       	ori	r24, 0x20	; 32
    1cfa:	8c 93       	st	X, r24

	/*128 prescaler*/
	SET_BIT(ADCSRA, 0);
    1cfc:	a6 e2       	ldi	r26, 0x26	; 38
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e6 e2       	ldi	r30, 0x26	; 38
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	81 60       	ori	r24, 0x01	; 1
    1d08:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1d0a:	a6 e2       	ldi	r26, 0x26	; 38
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e6 e2       	ldi	r30, 0x26	; 38
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	82 60       	ori	r24, 0x02	; 2
    1d16:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1d18:	a6 e2       	ldi	r26, 0x26	; 38
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e6 e2       	ldi	r30, 0x26	; 38
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	84 60       	ori	r24, 0x04	; 4
    1d24:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADCSRA, 7);
    1d26:	a6 e2       	ldi	r26, 0x26	; 38
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e6 e2       	ldi	r30, 0x26	; 38
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 68       	ori	r24, 0x80	; 128
    1d32:	8c 93       	st	X, r24
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <MADC_u8GetChannelReading>:

u8 MADC_u8GetChannelReading(u8 A_u8Channel)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	/*Channel Selection*/
	ADMUX &= 0b11100000;
    1d4c:	a7 e2       	ldi	r26, 0x27	; 39
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e7 e2       	ldi	r30, 0x27	; 39
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	80 7e       	andi	r24, 0xE0	; 224
    1d58:	8c 93       	st	X, r24
	ADMUX |= A_u8Channel;
    1d5a:	a7 e2       	ldi	r26, 0x27	; 39
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e7 e2       	ldi	r30, 0x27	; 39
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	90 81       	ld	r25, Z
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	89 2b       	or	r24, r25
    1d68:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    1d6a:	a6 e2       	ldi	r26, 0x26	; 38
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e6 e2       	ldi	r30, 0x26	; 38
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	80 64       	ori	r24, 0x40	; 64
    1d76:	8c 93       	st	X, r24

	/*Waiting conversion*/
	while(GET_BIT(ADCSRA, 4) == 0);
    1d78:	e6 e2       	ldi	r30, 0x26	; 38
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	82 95       	swap	r24
    1d80:	8f 70       	andi	r24, 0x0F	; 15
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	81 70       	andi	r24, 0x01	; 1
    1d88:	90 70       	andi	r25, 0x00	; 0
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	a9 f3       	breq	.-22     	; 0x1d78 <MADC_u8GetChannelReading+0x38>

	/*Clear ADC Flag*/
	SET_BIT(ADCSRA, 4);
    1d8e:	a6 e2       	ldi	r26, 0x26	; 38
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e6 e2       	ldi	r30, 0x26	; 38
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 61       	ori	r24, 0x10	; 16
    1d9a:	8c 93       	st	X, r24

	/*Return result*/
	return ADCH;
    1d9c:	e5 e2       	ldi	r30, 0x25	; 37
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
}
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <HSERVO_voidInit>:
#include "../../MCAL/Timer/Timer_Interface.h"
#include "Servo_Interface.h"


void HSERVO_voidInit()
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	/*Set PD5 (OC1A) as Output*/
	MDIO_voidSetPinDirection('D', 5, 1);
    1db2:	84 e4       	ldi	r24, 0x44	; 68
    1db4:	65 e0       	ldi	r22, 0x05	; 5
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>

	/*Init Timer 1 Fast PWM Mode 14*/
	MTimer1_voidInit();
    1dbc:	0e 94 66 07 	call	0xecc	; 0xecc <MTimer1_voidInit>

	/*Set Period Time*/
	MTimer1_voidSetICR1(20000); // 20ms
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	9e e4       	ldi	r25, 0x4E	; 78
    1dc4:	0e 94 c9 07 	call	0xf92	; 0xf92 <MTimer1_voidSetICR1>
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <HSERVO_voidSetAngle>:

/*Accepts Angle Argument from -90 to +90*/
void HSERVO_voidSetAngle(s8 A_u8Angle)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <HSERVO_voidSetAngle+0x6>
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	8b 83       	std	Y+3, r24	; 0x03
	/*Mapping the Values to get the required CTC for Time on*/
	u16 L_u8CTCValue = (u16)(1500.0 + ((50.0/9.0) * (f32)(A_u8Angle)));
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	99 27       	eor	r25, r25
    1de0:	87 fd       	sbrc	r24, 7
    1de2:	90 95       	com	r25
    1de4:	a9 2f       	mov	r26, r25
    1de6:	b9 2f       	mov	r27, r25
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	2c e1       	ldi	r18, 0x1C	; 28
    1dfa:	37 ec       	ldi	r19, 0xC7	; 199
    1dfc:	41 eb       	ldi	r20, 0xB1	; 177
    1dfe:	50 e4       	ldi	r21, 0x40	; 64
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e8       	ldi	r19, 0x80	; 128
    1e10:	4b eb       	ldi	r20, 0xBB	; 187
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01

	MTimer1_voidSetCTCValue(L_u8CTCValue);
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MTimer1_voidSetCTCValue>
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <HLCD_voidInit>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"


void HLCD_voidInit()
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	e8 97       	sbiw	r28, 0x38	; 56
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
	/*DATA PORTD as Output*/
	MDIO_voidSetPortDirection('A', 255); // PORTA Output
    1e54:	81 e4       	ldi	r24, 0x41	; 65
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <MDIO_voidSetPortDirection>

	/*Control pins output */
	MDIO_voidSetPinDirection('C', 0, 1); // PA0 Output
    1e5c:	83 e4       	ldi	r24, 0x43	; 67
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('C', 1, 1); // PA1 Output
    1e66:	83 e4       	ldi	r24, 0x43	; 67
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('C', 2, 1); // PA2 Output
    1e70:	83 e4       	ldi	r24, 0x43	; 67
    1e72:	62 e0       	ldi	r22, 0x02	; 2
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a8 ef       	ldi	r26, 0xF8	; 248
    1e80:	b1 e4       	ldi	r27, 0x41	; 65
    1e82:	8d ab       	std	Y+53, r24	; 0x35
    1e84:	9e ab       	std	Y+54, r25	; 0x36
    1e86:	af ab       	std	Y+55, r26	; 0x37
    1e88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e90:	98 ad       	ldd	r25, Y+56	; 0x38
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	89 ab       	std	Y+49, r24	; 0x31
    1ea4:	9a ab       	std	Y+50, r25	; 0x32
    1ea6:	ab ab       	std	Y+51, r26	; 0x33
    1ea8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eaa:	69 a9       	ldd	r22, Y+49	; 0x31
    1eac:	7a a9       	ldd	r23, Y+50	; 0x32
    1eae:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <HLCD_voidInit+0x8c>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	98 ab       	std	Y+48, r25	; 0x30
    1ec8:	8f a7       	std	Y+47, r24	; 0x2f
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ece:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eea:	98 ad       	ldd	r25, Y+56	; 0x38
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	98 ab       	std	Y+48, r25	; 0x30
    1f0a:	8f a7       	std	Y+47, r24	; 0x2f
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <HLCD_voidInit+0xec>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e a7       	std	Y+46, r25	; 0x2e
    1f14:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f16:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f18:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <HLCD_voidInit+0xda>
    1f1e:	9e a7       	std	Y+46, r25	; 0x2e
    1f20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f24:	98 a9       	ldd	r25, Y+48	; 0x30
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	98 ab       	std	Y+48, r25	; 0x30
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <HLCD_voidInit+0xce>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	69 a9       	ldd	r22, Y+49	; 0x31
    1f38:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
    1f4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4e:	9c a7       	std	Y+44, r25	; 0x2c
    1f50:	8b a7       	std	Y+43, r24	; 0x2b
    1f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <HLCD_voidInit+0x116>
    1f5a:	9c a7       	std	Y+44, r25	; 0x2c
    1f5c:	8b a7       	std	Y+43, r24	; 0x2b

	/*Power ON delay 30ms*/
	_delay_ms(31);
	/*Function Set Command Send*/
	HLCD_voidSendCommand(0x38);
    1f5e:	88 e3       	ldi	r24, 0x38	; 56
    1f60:	0e 94 1a 11 	call	0x2234	; 0x2234 <HLCD_voidSendCommand>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e8       	ldi	r26, 0x80	; 128
    1f6a:	bf e3       	ldi	r27, 0x3F	; 63
    1f6c:	8f a3       	std	Y+39, r24	; 0x27
    1f6e:	98 a7       	std	Y+40, r25	; 0x28
    1f70:	a9 a7       	std	Y+41, r26	; 0x29
    1f72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	6f a1       	ldd	r22, Y+39	; 0x27
    1f76:	78 a5       	ldd	r23, Y+40	; 0x28
    1f78:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a ef       	ldi	r20, 0xFA	; 250
    1f82:	54 e4       	ldi	r21, 0x44	; 68
    1f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8b a3       	std	Y+35, r24	; 0x23
    1f8e:	9c a3       	std	Y+36, r25	; 0x24
    1f90:	ad a3       	std	Y+37, r26	; 0x25
    1f92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f94:	6b a1       	ldd	r22, Y+35	; 0x23
    1f96:	7c a1       	ldd	r23, Y+36	; 0x24
    1f98:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <HLCD_voidInit+0x176>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9a a3       	std	Y+34, r25	; 0x22
    1fb2:	89 a3       	std	Y+33, r24	; 0x21
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <HLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    1fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fba:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <HLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <HLCD_voidInit+0x1d6>
    1ff8:	88 ec       	ldi	r24, 0xC8	; 200
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	98 a3       	std	Y+32, r25	; 0x20
    1ffe:	8f 8f       	std	Y+31, r24	; 0x1f
    2000:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2002:	98 a1       	ldd	r25, Y+32	; 0x20
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <HLCD_voidInit+0x1c4>
    2008:	98 a3       	std	Y+32, r25	; 0x20
    200a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	89 a1       	ldd	r24, Y+33	; 0x21
    200e:	9a a1       	ldd	r25, Y+34	; 0x22
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9a a3       	std	Y+34, r25	; 0x22
    2014:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	89 a1       	ldd	r24, Y+33	; 0x21
    2018:	9a a1       	ldd	r25, Y+34	; 0x22
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <HLCD_voidInit+0x1b8>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <HLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
    2034:	89 a1       	ldd	r24, Y+33	; 0x21
    2036:	9a a1       	ldd	r25, Y+34	; 0x22
    2038:	9e 8f       	std	Y+30, r25	; 0x1e
    203a:	8d 8f       	std	Y+29, r24	; 0x1d
    203c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    203e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <HLCD_voidInit+0x200>
    2044:	9e 8f       	std	Y+30, r25	; 0x1e
    2046:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Function Set Delay*/
	_delay_ms(1);
	/*Display On/Off Command Send*/
	HLCD_voidSendCommand(0x0C); // use 0x0F for blinking cursor
    2048:	8c e0       	ldi	r24, 0x0C	; 12
    204a:	0e 94 1a 11 	call	0x2234	; 0x2234 <HLCD_voidSendCommand>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e8       	ldi	r26, 0x80	; 128
    2054:	bf e3       	ldi	r27, 0x3F	; 63
    2056:	89 8f       	std	Y+25, r24	; 0x19
    2058:	9a 8f       	std	Y+26, r25	; 0x1a
    205a:	ab 8f       	std	Y+27, r26	; 0x1b
    205c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	69 8d       	ldd	r22, Y+25	; 0x19
    2060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a ef       	ldi	r20, 0xFA	; 250
    206c:	54 e4       	ldi	r21, 0x44	; 68
    206e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8d 8b       	std	Y+21, r24	; 0x15
    2078:	9e 8b       	std	Y+22, r25	; 0x16
    207a:	af 8b       	std	Y+23, r26	; 0x17
    207c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <HLCD_voidInit+0x260>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
    209e:	3f c0       	rjmp	.+126    	; 0x211e <HLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    20a0:	6d 89       	ldd	r22, Y+21	; 0x15
    20a2:	7e 89       	ldd	r23, Y+22	; 0x16
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <HLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <HLCD_voidInit+0x2c0>
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9a 8b       	std	Y+18, r25	; 0x12
    20e8:	89 8b       	std	Y+17, r24	; 0x11
    20ea:	89 89       	ldd	r24, Y+17	; 0x11
    20ec:	9a 89       	ldd	r25, Y+18	; 0x12
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <HLCD_voidInit+0x2ae>
    20f2:	9a 8b       	std	Y+18, r25	; 0x12
    20f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9c 8b       	std	Y+20, r25	; 0x14
    20fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8b 89       	ldd	r24, Y+19	; 0x13
    2102:	9c 89       	ldd	r25, Y+20	; 0x14
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <HLCD_voidInit+0x2a2>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <HLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6d 89       	ldd	r22, Y+21	; 0x15
    210c:	7e 89       	ldd	r23, Y+22	; 0x16
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	98 8d       	ldd	r25, Y+24	; 0x18
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	8f 87       	std	Y+15, r24	; 0x0f
    2126:	8f 85       	ldd	r24, Y+15	; 0x0f
    2128:	98 89       	ldd	r25, Y+16	; 0x10
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <HLCD_voidInit+0x2ea>
    212e:	98 8b       	std	Y+16, r25	; 0x10
    2130:	8f 87       	std	Y+15, r24	; 0x0f
	/*Display On/Off Delay*/
	_delay_ms(1);
	/*Dispaly Clear Command Send*/
	HLCD_voidSendCommand(0x01);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	0e 94 1a 11 	call	0x2234	; 0x2234 <HLCD_voidSendCommand>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e8       	ldi	r26, 0x80	; 128
    213e:	bf e3       	ldi	r27, 0x3F	; 63
    2140:	8b 87       	std	Y+11, r24	; 0x0b
    2142:	9c 87       	std	Y+12, r25	; 0x0c
    2144:	ad 87       	std	Y+13, r26	; 0x0d
    2146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	6b 85       	ldd	r22, Y+11	; 0x0b
    214a:	7c 85       	ldd	r23, Y+12	; 0x0c
    214c:	8d 85       	ldd	r24, Y+13	; 0x0d
    214e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a ef       	ldi	r20, 0xFA	; 250
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8f 83       	std	Y+7, r24	; 0x07
    2162:	98 87       	std	Y+8, r25	; 0x08
    2164:	a9 87       	std	Y+9, r26	; 0x09
    2166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <HLCD_voidInit+0x34a>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <HLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <HLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <HLCD_voidInit+0x3aa>
    21cc:	88 ec       	ldi	r24, 0xC8	; 200
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <HLCD_voidInit+0x398>
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <HLCD_voidInit+0x38c>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <HLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <HLCD_voidInit+0x3d4>
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
	/*Display Clear Delay*/
	_delay_ms(1);
	/*Entery Set*/
	HLCD_voidSendCommand(0x06);
    221c:	86 e0       	ldi	r24, 0x06	; 6
    221e:	0e 94 1a 11 	call	0x2234	; 0x2234 <HLCD_voidSendCommand>
}
    2222:	e8 96       	adiw	r28, 0x38	; 56
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	6d 97       	sbiw	r28, 0x1d	; 29
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Initialize control pins RS/RW*/
	MDIO_voidSetPinValue('C', 0, 0); // Sending Command
    224a:	83 e4       	ldi	r24, 0x43	; 67
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 1, 0); // RW = 0 (Writing on LCD)
    2254:	83 e4       	ldi	r24, 0x43	; 67
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>

	/*Write command on data pins*/
	MDIO_voidSetPortValue('A', A_u8Cmd);
    225e:	81 e4       	ldi	r24, 0x41	; 65
    2260:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2262:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <MDIO_voidSetPortValue>

	/*Pulse the Enable*/
	MDIO_voidSetPinValue('C', 2, 1); // EN High
    2266:	83 e4       	ldi	r24, 0x43	; 67
    2268:	62 e0       	ldi	r22, 0x02	; 2
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	bf e3       	ldi	r27, 0x3F	; 63
    2278:	89 8f       	std	Y+25, r24	; 0x19
    227a:	9a 8f       	std	Y+26, r25	; 0x1a
    227c:	ab 8f       	std	Y+27, r26	; 0x1b
    227e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	69 8d       	ldd	r22, Y+25	; 0x19
    2282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8d 8b       	std	Y+21, r24	; 0x15
    229a:	9e 8b       	std	Y+22, r25	; 0x16
    229c:	af 8b       	std	Y+23, r26	; 0x17
    229e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9c 8b       	std	Y+20, r25	; 0x14
    22be:	8b 8b       	std	Y+19, r24	; 0x13
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    22c2:	6d 89       	ldd	r22, Y+21	; 0x15
    22c4:	7e 89       	ldd	r23, Y+22	; 0x16
    22c6:	8f 89       	ldd	r24, Y+23	; 0x17
    22c8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	69 8d       	ldd	r22, Y+25	; 0x19
    22dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9c 8b       	std	Y+20, r25	; 0x14
    2300:	8b 8b       	std	Y+19, r24	; 0x13
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <HLCD_voidSendCommand+0xee>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9a 8b       	std	Y+18, r25	; 0x12
    230a:	89 8b       	std	Y+17, r24	; 0x11
    230c:	89 89       	ldd	r24, Y+17	; 0x11
    230e:	9a 89       	ldd	r25, Y+18	; 0x12
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <HLCD_voidSendCommand+0xdc>
    2314:	9a 8b       	std	Y+18, r25	; 0x12
    2316:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9c 8b       	std	Y+20, r25	; 0x14
    2320:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8b 89       	ldd	r24, Y+19	; 0x13
    2324:	9c 89       	ldd	r25, Y+20	; 0x14
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <HLCD_voidSendCommand+0xd0>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6d 89       	ldd	r22, Y+21	; 0x15
    232e:	7e 89       	ldd	r23, Y+22	; 0x16
    2330:	8f 89       	ldd	r24, Y+23	; 0x17
    2332:	98 8d       	ldd	r25, Y+24	; 0x18
    2334:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9c 8b       	std	Y+20, r25	; 0x14
    233e:	8b 8b       	std	Y+19, r24	; 0x13
    2340:	8b 89       	ldd	r24, Y+19	; 0x13
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	98 8b       	std	Y+16, r25	; 0x10
    2346:	8f 87       	std	Y+15, r24	; 0x0f
    2348:	8f 85       	ldd	r24, Y+15	; 0x0f
    234a:	98 89       	ldd	r25, Y+16	; 0x10
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <HLCD_voidSendCommand+0x118>
    2350:	98 8b       	std	Y+16, r25	; 0x10
    2352:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('C', 2, 0); // EN Low
    2354:	83 e4       	ldi	r24, 0x43	; 67
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e8       	ldi	r26, 0x80	; 128
    2364:	bf e3       	ldi	r27, 0x3F	; 63
    2366:	8b 87       	std	Y+11, r24	; 0x0b
    2368:	9c 87       	std	Y+12, r25	; 0x0c
    236a:	ad 87       	std	Y+13, r26	; 0x0d
    236c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2370:	7c 85       	ldd	r23, Y+12	; 0x0c
    2372:	8d 85       	ldd	r24, Y+13	; 0x0d
    2374:	9e 85       	ldd	r25, Y+14	; 0x0e
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4a ef       	ldi	r20, 0xFA	; 250
    237c:	54 e4       	ldi	r21, 0x44	; 68
    237e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8f 83       	std	Y+7, r24	; 0x07
    2388:	98 87       	std	Y+8, r25	; 0x08
    238a:	a9 87       	std	Y+9, r26	; 0x09
    238c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	78 85       	ldd	r23, Y+8	; 0x08
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	4c f5       	brge	.+82     	; 0x241a <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    23cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e2       	ldi	r20, 0x20	; 32
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <HLCD_voidSendCommand+0x1dc>
    23f2:	88 ec       	ldi	r24, 0xC8	; 200
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <HLCD_voidSendCommand+0x1ca>
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	69 f7       	brne	.-38     	; 0x23f2 <HLCD_voidSendCommand+0x1be>
    2418:	14 c0       	rjmp	.+40     	; 0x2442 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	9a 81       	ldd	r25, Y+2	; 0x02
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <HLCD_voidSendCommand+0x206>
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2442:	6d 96       	adiw	r28, 0x1d	; 29
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	6d 97       	sbiw	r28, 0x1d	; 29
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Initialize control pins RS/RW*/
	MDIO_voidSetPinValue('C', 0, 1); // Sending Data (RS High)
    246a:	83 e4       	ldi	r24, 0x43	; 67
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 1, 0); // RW = 0 (Writing on LCD)
    2474:	83 e4       	ldi	r24, 0x43	; 67
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>

	/*Write command on data pins*/
	MDIO_voidSetPortValue('A', A_u8Data);
    247e:	81 e4       	ldi	r24, 0x41	; 65
    2480:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2482:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <MDIO_voidSetPortValue>

	/*Pulse the Enable*/
	MDIO_voidSetPinValue('C', 2, 1); // EN High
    2486:	83 e4       	ldi	r24, 0x43	; 67
    2488:	62 e0       	ldi	r22, 0x02	; 2
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	89 8f       	std	Y+25, r24	; 0x19
    249a:	9a 8f       	std	Y+26, r25	; 0x1a
    249c:	ab 8f       	std	Y+27, r26	; 0x1b
    249e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	69 8d       	ldd	r22, Y+25	; 0x19
    24a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8d 8b       	std	Y+21, r24	; 0x15
    24ba:	9e 8b       	std	Y+22, r25	; 0x16
    24bc:	af 8b       	std	Y+23, r26	; 0x17
    24be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c0:	6d 89       	ldd	r22, Y+21	; 0x15
    24c2:	7e 89       	ldd	r23, Y+22	; 0x16
    24c4:	8f 89       	ldd	r24, Y+23	; 0x17
    24c6:	98 8d       	ldd	r25, Y+24	; 0x18
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9c 8b       	std	Y+20, r25	; 0x14
    24de:	8b 8b       	std	Y+19, r24	; 0x13
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    24e2:	6d 89       	ldd	r22, Y+21	; 0x15
    24e4:	7e 89       	ldd	r23, Y+22	; 0x16
    24e6:	8f 89       	ldd	r24, Y+23	; 0x17
    24e8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	69 8d       	ldd	r22, Y+25	; 0x19
    24fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2500:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9c 8b       	std	Y+20, r25	; 0x14
    2520:	8b 8b       	std	Y+19, r24	; 0x13
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <HLCD_voidSendData+0xee>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9a 8b       	std	Y+18, r25	; 0x12
    252a:	89 8b       	std	Y+17, r24	; 0x11
    252c:	89 89       	ldd	r24, Y+17	; 0x11
    252e:	9a 89       	ldd	r25, Y+18	; 0x12
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <HLCD_voidSendData+0xdc>
    2534:	9a 8b       	std	Y+18, r25	; 0x12
    2536:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9c 8b       	std	Y+20, r25	; 0x14
    2540:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8b 89       	ldd	r24, Y+19	; 0x13
    2544:	9c 89       	ldd	r25, Y+20	; 0x14
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <HLCD_voidSendData+0xd0>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6d 89       	ldd	r22, Y+21	; 0x15
    254e:	7e 89       	ldd	r23, Y+22	; 0x16
    2550:	8f 89       	ldd	r24, Y+23	; 0x17
    2552:	98 8d       	ldd	r25, Y+24	; 0x18
    2554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9c 8b       	std	Y+20, r25	; 0x14
    255e:	8b 8b       	std	Y+19, r24	; 0x13
    2560:	8b 89       	ldd	r24, Y+19	; 0x13
    2562:	9c 89       	ldd	r25, Y+20	; 0x14
    2564:	98 8b       	std	Y+16, r25	; 0x10
    2566:	8f 87       	std	Y+15, r24	; 0x0f
    2568:	8f 85       	ldd	r24, Y+15	; 0x0f
    256a:	98 89       	ldd	r25, Y+16	; 0x10
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <HLCD_voidSendData+0x118>
    2570:	98 8b       	std	Y+16, r25	; 0x10
    2572:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('C', 2, 0); // EN Low
    2574:	83 e4       	ldi	r24, 0x43	; 67
    2576:	62 e0       	ldi	r22, 0x02	; 2
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 e8       	ldi	r26, 0x80	; 128
    2584:	bf e3       	ldi	r27, 0x3F	; 63
    2586:	8b 87       	std	Y+11, r24	; 0x0b
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	ad 87       	std	Y+13, r26	; 0x0d
    258c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a ef       	ldi	r20, 0xFA	; 250
    259c:	54 e4       	ldi	r21, 0x44	; 68
    259e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	98 87       	std	Y+8, r25	; 0x08
    25aa:	a9 87       	std	Y+9, r26	; 0x09
    25ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e8       	ldi	r20, 0x80	; 128
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25c2:	88 23       	and	r24, r24
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	4c f5       	brge	.+82     	; 0x263a <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <HLCD_voidSendData+0x1dc>
    2612:	88 ec       	ldi	r24, 0xC8	; 200
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <HLCD_voidSendData+0x1ca>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	69 f7       	brne	.-38     	; 0x2612 <HLCD_voidSendData+0x1be>
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <HLCD_voidSendData+0x206>
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2662:	6d 96       	adiw	r28, 0x1d	; 29
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <HLCD_voidSendString>:

void HLCD_voidSendString(s8 *A_u8String)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	00 d0       	rcall	.+0      	; 0x267a <HLCD_voidSendString+0x6>
    267a:	0f 92       	push	r0
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	9b 83       	std	Y+3, r25	; 0x03
    2682:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2684:	19 82       	std	Y+1, r1	; 0x01
    2686:	0e c0       	rjmp	.+28     	; 0x26a4 <HLCD_voidSendString+0x30>
	while(A_u8String[i] != '\0')
	{
		HLCD_voidSendData(A_u8String[i]);
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	80 81       	ld	r24, Z
    269a:	0e 94 2a 12 	call	0x2454	; 0x2454 <HLCD_voidSendData>
		i++;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_voidSendString(s8 *A_u8String)
{
	u8 i = 0;
	while(A_u8String[i] != '\0')
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	fc 01       	movw	r30, r24
    26b0:	e2 0f       	add	r30, r18
    26b2:	f3 1f       	adc	r31, r19
    26b4:	80 81       	ld	r24, Z
    26b6:	88 23       	and	r24, r24
    26b8:	39 f7       	brne	.-50     	; 0x2688 <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(A_u8String[i]);
		i++;
	}
}
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <HLCD_voidGoTo+0x6>
    26cc:	0f 92       	push	r0
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DdramAddress;
	if(A_u8Row < 2 && A_u8Col < 16) // Check for wrong arguments
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	82 30       	cpi	r24, 0x02	; 2
    26da:	90 f4       	brcc	.+36     	; 0x2700 <HLCD_voidGoTo+0x3a>
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	80 31       	cpi	r24, 0x10	; 16
    26e0:	78 f4       	brcc	.+30     	; 0x2700 <HLCD_voidGoTo+0x3a>
	{
		if(A_u8Row == 0) // check if it is the first row
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	88 23       	and	r24, r24
    26e6:	19 f4       	brne	.+6      	; 0x26ee <HLCD_voidGoTo+0x28>
			L_u8DdramAddress = 0x00 + A_u8Col; // first address + required column
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <HLCD_voidGoTo+0x2e>
		else
			L_u8DdramAddress = 0x40 + A_u8Col; // second line address + required column
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	80 5c       	subi	r24, 0xC0	; 192
    26f2:	89 83       	std	Y+1, r24	; 0x01

		SET_BIT(L_u8DdramAddress, 7); // Datasheet required Set Bit for the command to  work
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	80 68       	ori	r24, 0x80	; 128
    26f8:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DdramAddress); // Send finalized address to LCD
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	0e 94 1a 11 	call	0x2234	; 0x2234 <HLCD_voidSendCommand>
	}
}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	28 97       	sbiw	r28, 0x08	; 8
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	6d 83       	std	Y+5, r22	; 0x05
    272a:	7e 83       	std	Y+6, r23	; 0x06
    272c:	8f 83       	std	Y+7, r24	; 0x07
    272e:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	a0 e0       	ldi	r26, 0x00	; 0
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	ab 83       	std	Y+3, r26	; 0x03
    273e:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    2740:	8d 81       	ldd	r24, Y+5	; 0x05
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	af 81       	ldd	r26, Y+7	; 0x07
    2746:	b8 85       	ldd	r27, Y+8	; 0x08
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	a1 05       	cpc	r26, r1
    274c:	b1 05       	cpc	r27, r1
    274e:	19 f4       	brne	.+6      	; 0x2756 <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    2750:	80 e3       	ldi	r24, 0x30	; 48
    2752:	0e 94 2a 12 	call	0x2454	; 0x2454 <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	af 81       	ldd	r26, Y+7	; 0x07
    275c:	b8 85       	ldd	r27, Y+8	; 0x08
    275e:	bb 23       	and	r27, r27
    2760:	0c f0       	brlt	.+2      	; 0x2764 <HLCD_voidDisplayNumber+0x58>
    2762:	49 c0       	rjmp	.+146    	; 0x27f6 <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    2764:	8d e2       	ldi	r24, 0x2D	; 45
    2766:	0e 94 2a 12 	call	0x2454	; 0x2454 <HLCD_voidSendData>
		A_s32Number *=-1;
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	af 81       	ldd	r26, Y+7	; 0x07
    2770:	b8 85       	ldd	r27, Y+8	; 0x08
    2772:	b0 95       	com	r27
    2774:	a0 95       	com	r26
    2776:	90 95       	com	r25
    2778:	81 95       	neg	r24
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	af 4f       	sbci	r26, 0xFF	; 255
    277e:	bf 4f       	sbci	r27, 0xFF	; 255
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	af 83       	std	Y+7, r26	; 0x07
    2786:	b8 87       	std	Y+8, r27	; 0x08
    2788:	36 c0       	rjmp	.+108    	; 0x27f6 <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	ab 81       	ldd	r26, Y+3	; 0x03
    2790:	bc 81       	ldd	r27, Y+4	; 0x04
    2792:	2a e0       	ldi	r18, 0x0A	; 10
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <__mulsi3>
    27a2:	7b 01       	movw	r14, r22
    27a4:	8c 01       	movw	r16, r24
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	af 81       	ldd	r26, Y+7	; 0x07
    27ac:	b8 85       	ldd	r27, Y+8	; 0x08
    27ae:	2a e0       	ldi	r18, 0x0A	; 10
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__divmodsi4>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8e 0d       	add	r24, r14
    27c4:	9f 1d       	adc	r25, r15
    27c6:	a0 1f       	adc	r26, r16
    27c8:	b1 1f       	adc	r27, r17
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	ab 83       	std	Y+3, r26	; 0x03
    27d0:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	af 81       	ldd	r26, Y+7	; 0x07
    27d8:	b8 85       	ldd	r27, Y+8	; 0x08
    27da:	2a e0       	ldi	r18, 0x0A	; 10
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__divmodsi4>
    27ea:	da 01       	movw	r26, r20
    27ec:	c9 01       	movw	r24, r18
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	af 83       	std	Y+7, r26	; 0x07
    27f4:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	af 81       	ldd	r26, Y+7	; 0x07
    27fc:	b8 85       	ldd	r27, Y+8	; 0x08
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	a1 05       	cpc	r26, r1
    2802:	b1 05       	cpc	r27, r1
    2804:	11 f6       	brne	.-124    	; 0x278a <HLCD_voidDisplayNumber+0x7e>
    2806:	23 c0       	rjmp	.+70     	; 0x284e <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	ab 81       	ldd	r26, Y+3	; 0x03
    280e:	bc 81       	ldd	r27, Y+4	; 0x04
    2810:	2a e0       	ldi	r18, 0x0A	; 10
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodsi4>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	80 5d       	subi	r24, 0xD0	; 208
    2826:	0e 94 2a 12 	call	0x2454	; 0x2454 <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	ab 81       	ldd	r26, Y+3	; 0x03
    2830:	bc 81       	ldd	r27, Y+4	; 0x04
    2832:	2a e0       	ldi	r18, 0x0A	; 10
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodsi4>
    2842:	da 01       	movw	r26, r20
    2844:	c9 01       	movw	r24, r18
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	ab 83       	std	Y+3, r26	; 0x03
    284c:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	ab 81       	ldd	r26, Y+3	; 0x03
    2854:	bc 81       	ldd	r27, Y+4	; 0x04
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	91 05       	cpc	r25, r1
    285a:	a1 05       	cpc	r26, r1
    285c:	b1 05       	cpc	r27, r1
    285e:	a1 f6       	brne	.-88     	; 0x2808 <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    2860:	28 96       	adiw	r28, 0x08	; 8
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	08 95       	ret

0000287a <HLCD_voidLCDReset>:

/*This function for clearing the LCD
 * and pointing to the first line
 * */
void HLCD_voidLCDReset(void)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	HLCD_voidSendCommand(1);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	0e 94 1a 11 	call	0x2234	; 0x2234 <HLCD_voidSendCommand>

	/*Go to First Line*/
	HLCD_voidGoTo(0, 0);
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <HLCD_voidGoTo>
}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <HKPD_u8GetPressedKey>:
 * scans the pressed key
 * return: the pressed key
 * return: 255 if no key pressed
 * */
u8 HKPD_u8GetPressedKey()
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <HKPD_u8GetPressedKey+0x6>
    289c:	00 d0       	rcall	.+0      	; 0x289e <HKPD_u8GetPressedKey+0x8>
    289e:	0f 92       	push	r0
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = 255, Col, Row;
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	8c 83       	std	Y+4, r24	; 0x04

	for(Col = 0; Col < 4; Col++)
    28a8:	1b 82       	std	Y+3, r1	; 0x03
    28aa:	3e c0       	rjmp	.+124    	; 0x2928 <HKPD_u8GetPressedKey+0x92>
	{
		/*Activate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4 , 0);
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	98 2f       	mov	r25, r24
    28b0:	9c 5f       	subi	r25, 0xFC	; 252
    28b2:	84 e4       	ldi	r24, 0x44	; 68
    28b4:	69 2f       	mov	r22, r25
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>

		/*Checks row by row*/
		for(Row = 0; Row < 4; Row++)
    28bc:	1a 82       	std	Y+2, r1	; 0x02
    28be:	26 c0       	rjmp	.+76     	; 0x290c <HKPD_u8GetPressedKey+0x76>
		{
			/*Gets row value*/
			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row));
    28c0:	84 e4       	ldi	r24, 0x44	; 68
    28c2:	6a 81       	ldd	r22, Y+2	; 0x02
    28c4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <MDIO_u8GetPinValue>
    28c8:	89 83       	std	Y+1, r24	; 0x01

			/*Check if Key is Pressed*/
			if(L_u8PinValue == 0)
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	88 23       	and	r24, r24
    28ce:	d9 f4       	brne	.+54     	; 0x2906 <HKPD_u8GetPressedKey+0x70>
			{
				/*Saves pressed key for returning it*/
				Local_u8PressedKey = G_u8KPDButtons[Row][Col];
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	48 2f       	mov	r20, r24
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	ca 01       	movw	r24, r20
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	fc 01       	movw	r30, r24
    28ec:	ee 57       	subi	r30, 0x7E	; 126
    28ee:	fe 4f       	sbci	r31, 0xFE	; 254
    28f0:	80 81       	ld	r24, Z
    28f2:	8c 83       	std	Y+4, r24	; 0x04

				/*Waiting until key gets not pressed*/
				while(MDIO_u8GetPinValue('D', Row) == 0);
    28f4:	84 e4       	ldi	r24, 0x44	; 68
    28f6:	6a 81       	ldd	r22, Y+2	; 0x02
    28f8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <MDIO_u8GetPinValue>
    28fc:	88 23       	and	r24, r24
    28fe:	d1 f3       	breq	.-12     	; 0x28f4 <HKPD_u8GetPressedKey+0x5e>

				/*return the pressed key*/
				return Local_u8PressedKey;
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	17 c0       	rjmp	.+46     	; 0x2934 <HKPD_u8GetPressedKey+0x9e>
	{
		/*Activate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4 , 0);

		/*Checks row by row*/
		for(Row = 0; Row < 4; Row++)
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	8a 83       	std	Y+2, r24	; 0x02
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	84 30       	cpi	r24, 0x04	; 4
    2910:	b8 f2       	brcs	.-82     	; 0x28c0 <HKPD_u8GetPressedKey+0x2a>
				/*return the pressed key*/
				return Local_u8PressedKey;
			}
		}
		/*Deactivate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4, 1);
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	98 2f       	mov	r25, r24
    2916:	9c 5f       	subi	r25, 0xFC	; 252
    2918:	84 e4       	ldi	r24, 0x44	; 68
    291a:	69 2f       	mov	r22, r25
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
 * */
u8 HKPD_u8GetPressedKey()
{
	u8 Local_u8PressedKey = 255, Col, Row;

	for(Col = 0; Col < 4; Col++)
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	8f 5f       	subi	r24, 0xFF	; 255
    2926:	8b 83       	std	Y+3, r24	; 0x03
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	84 30       	cpi	r24, 0x04	; 4
    292c:	08 f4       	brcc	.+2      	; 0x2930 <HKPD_u8GetPressedKey+0x9a>
    292e:	be cf       	rjmp	.-132    	; 0x28ac <HKPD_u8GetPressedKey+0x16>
		}
		/*Deactivate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4, 1);
	}
	/*returns 255 for referring that no key is pressed*/
	return Local_u8PressedKey;
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	8d 83       	std	Y+5, r24	; 0x05
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <HDCMOTOTR_voidInit>:
#define DC_MOTOR_PIN1	  0
#define DC_MOTOR_PIN2	  1


void HDCMOTOTR_voidInit(void)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1, 1);
    294e:	83 e4       	ldi	r24, 0x43	; 67
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2, 1);
    2958:	83 e4       	ldi	r24, 0x43	; 67
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	41 e0       	ldi	r20, 0x01	; 1
    295e:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    2962:	83 e4       	ldi	r24, 0x43	; 67
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    296c:	83 e4       	ldi	r24, 0x43	; 67
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
}
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <HDCMOTOR_voidRotateClockWise>:

void HDCMOTOR_voidRotateClockWise(void)
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    2984:	83 e4       	ldi	r24, 0x43	; 67
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 1);
    298e:	83 e4       	ldi	r24, 0x43	; 67
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <HDCMOTOR_voidRotateCounterClockWise>:

void HDCMOTOR_voidRotateCounterClockWise(void)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    29a6:	83 e4       	ldi	r24, 0x43	; 67
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 1);
    29b0:	83 e4       	ldi	r24, 0x43	; 67
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	41 e0       	ldi	r20, 0x01	; 1
    29b6:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
}
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <HDCMOTOR_voidStop>:

void HDCMOTOR_voidStop(void)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    29c8:	83 e4       	ldi	r24, 0x43	; 67
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    29d2:	83 e4       	ldi	r24, 0x43	; 67
    29d4:	61 e0       	ldi	r22, 0x01	; 1
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	0e 94 0d 0c 	call	0x181a	; 0x181a <MDIO_voidSetPinValue>
}
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <APP_voidDoorOpen>:

/*This function is responsible for Opening door
 * (setting servo motor angle to +90)
 * */
void APP_voidDoorOpen(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	/*Open Door*/
	HSERVO_voidSetAngle(90);
    29ea:	8a e5       	ldi	r24, 0x5A	; 90
    29ec:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <HSERVO_voidSetAngle>

	/*Reset LCD*/
	HLCD_voidLCDReset();
    29f0:	0e 94 3d 14 	call	0x287a	; 0x287a <HLCD_voidLCDReset>

	/*LCD Door Opened Message*/
	HLCD_voidSendString((s8*)"Door Opened!");
    29f4:	80 e6       	ldi	r24, 0x60	; 96
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 3a 13 	call	0x2674	; 0x2674 <HLCD_voidSendString>
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <APP_voidDoorClose>:

/*This function is responsible for Closing door
 * (setting servo motor angle to -90)
 * */
void APP_voidDoorClose(void)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
	/*Close Door*/
	HSERVO_voidSetAngle(-90);
    2a0a:	86 ea       	ldi	r24, 0xA6	; 166
    2a0c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <HSERVO_voidSetAngle>

	/*Reset LCD*/
	HLCD_voidLCDReset();
    2a10:	0e 94 3d 14 	call	0x287a	; 0x287a <HLCD_voidLCDReset>

	/*LCD Door Closed Message*/
	HLCD_voidSendString((s8*)"Door Closed!");
    2a14:	8d e6       	ldi	r24, 0x6D	; 109
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 3a 13 	call	0x2674	; 0x2674 <HLCD_voidSendString>
}
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <main>:

/*Slave 1 Code*/


int main(void)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
	/*SS Pin Output*/
	MDIO_voidSetPinDirection('B', 4, 0);
    2a2c:	82 e4       	ldi	r24, 0x42	; 66
    2a2e:	64 e0       	ldi	r22, 0x04	; 4
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>

	/*MOSI Pin*/
	MDIO_voidSetPinDirection('B', 5, 0);
    2a36:	82 e4       	ldi	r24, 0x42	; 66
    2a38:	65 e0       	ldi	r22, 0x05	; 5
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>

	/*MISO Pin*/
	MDIO_voidSetPinDirection('B', 6, 1);
    2a40:	82 e4       	ldi	r24, 0x42	; 66
    2a42:	66 e0       	ldi	r22, 0x06	; 6
    2a44:	41 e0       	ldi	r20, 0x01	; 1
    2a46:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>

	/*SCLK Pin Output*/
	MDIO_voidSetPinDirection('B', 7, 0);
    2a4a:	82 e4       	ldi	r24, 0x42	; 66
    2a4c:	67 e0       	ldi	r22, 0x07	; 7
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	0e 94 ed 0a 	call	0x15da	; 0x15da <MDIO_voidSetPinDirection>

	/*Slave SPI Init*/
	MSPI_voidSlaveInit();
    2a54:	0e 94 17 08 	call	0x102e	; 0x102e <MSPI_voidSlaveInit>

	/*LCD init*/
	HLCD_voidInit();
    2a58:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidInit>

	/*Servo Init*/
	HSERVO_voidInit();
    2a5c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <HSERVO_voidInit>

	/*Initially Close Door*/
	APP_voidDoorClose();
    2a60:	0e 94 01 15 	call	0x2a02	; 0x2a02 <APP_voidDoorClose>

	while(1)
	{
		/*Receive desired option from master*/
		u8 option = MSPI_voidTranscieve('x');
    2a64:	88 e7       	ldi	r24, 0x78	; 120
    2a66:	0e 94 2c 08 	call	0x1058	; 0x1058 <MSPI_voidTranscieve>
    2a6a:	89 83       	std	Y+1, r24	; 0x01

		if(option == DOOR_OPEN)
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	81 33       	cpi	r24, 0x31	; 49
    2a70:	19 f4       	brne	.+6      	; 0x2a78 <main+0x56>
		{
			/*Opening Door*/
			APP_voidDoorOpen();
    2a72:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <APP_voidDoorOpen>
    2a76:	f6 cf       	rjmp	.-20     	; 0x2a64 <main+0x42>
		}
		else if(option == DOOR_CLOSE)
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	82 33       	cpi	r24, 0x32	; 50
    2a7c:	99 f7       	brne	.-26     	; 0x2a64 <main+0x42>
		{
			/*Close Door*/
			APP_voidDoorClose();
    2a7e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <APP_voidDoorClose>
    2a82:	f0 cf       	rjmp	.-32     	; 0x2a64 <main+0x42>

00002a84 <__mulsi3>:
    2a84:	62 9f       	mul	r22, r18
    2a86:	d0 01       	movw	r26, r0
    2a88:	73 9f       	mul	r23, r19
    2a8a:	f0 01       	movw	r30, r0
    2a8c:	82 9f       	mul	r24, r18
    2a8e:	e0 0d       	add	r30, r0
    2a90:	f1 1d       	adc	r31, r1
    2a92:	64 9f       	mul	r22, r20
    2a94:	e0 0d       	add	r30, r0
    2a96:	f1 1d       	adc	r31, r1
    2a98:	92 9f       	mul	r25, r18
    2a9a:	f0 0d       	add	r31, r0
    2a9c:	83 9f       	mul	r24, r19
    2a9e:	f0 0d       	add	r31, r0
    2aa0:	74 9f       	mul	r23, r20
    2aa2:	f0 0d       	add	r31, r0
    2aa4:	65 9f       	mul	r22, r21
    2aa6:	f0 0d       	add	r31, r0
    2aa8:	99 27       	eor	r25, r25
    2aaa:	72 9f       	mul	r23, r18
    2aac:	b0 0d       	add	r27, r0
    2aae:	e1 1d       	adc	r30, r1
    2ab0:	f9 1f       	adc	r31, r25
    2ab2:	63 9f       	mul	r22, r19
    2ab4:	b0 0d       	add	r27, r0
    2ab6:	e1 1d       	adc	r30, r1
    2ab8:	f9 1f       	adc	r31, r25
    2aba:	bd 01       	movw	r22, r26
    2abc:	cf 01       	movw	r24, r30
    2abe:	11 24       	eor	r1, r1
    2ac0:	08 95       	ret

00002ac2 <__udivmodsi4>:
    2ac2:	a1 e2       	ldi	r26, 0x21	; 33
    2ac4:	1a 2e       	mov	r1, r26
    2ac6:	aa 1b       	sub	r26, r26
    2ac8:	bb 1b       	sub	r27, r27
    2aca:	fd 01       	movw	r30, r26
    2acc:	0d c0       	rjmp	.+26     	; 0x2ae8 <__udivmodsi4_ep>

00002ace <__udivmodsi4_loop>:
    2ace:	aa 1f       	adc	r26, r26
    2ad0:	bb 1f       	adc	r27, r27
    2ad2:	ee 1f       	adc	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	a2 17       	cp	r26, r18
    2ad8:	b3 07       	cpc	r27, r19
    2ada:	e4 07       	cpc	r30, r20
    2adc:	f5 07       	cpc	r31, r21
    2ade:	20 f0       	brcs	.+8      	; 0x2ae8 <__udivmodsi4_ep>
    2ae0:	a2 1b       	sub	r26, r18
    2ae2:	b3 0b       	sbc	r27, r19
    2ae4:	e4 0b       	sbc	r30, r20
    2ae6:	f5 0b       	sbc	r31, r21

00002ae8 <__udivmodsi4_ep>:
    2ae8:	66 1f       	adc	r22, r22
    2aea:	77 1f       	adc	r23, r23
    2aec:	88 1f       	adc	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	1a 94       	dec	r1
    2af2:	69 f7       	brne	.-38     	; 0x2ace <__udivmodsi4_loop>
    2af4:	60 95       	com	r22
    2af6:	70 95       	com	r23
    2af8:	80 95       	com	r24
    2afa:	90 95       	com	r25
    2afc:	9b 01       	movw	r18, r22
    2afe:	ac 01       	movw	r20, r24
    2b00:	bd 01       	movw	r22, r26
    2b02:	cf 01       	movw	r24, r30
    2b04:	08 95       	ret

00002b06 <__divmodsi4>:
    2b06:	97 fb       	bst	r25, 7
    2b08:	09 2e       	mov	r0, r25
    2b0a:	05 26       	eor	r0, r21
    2b0c:	0e d0       	rcall	.+28     	; 0x2b2a <__divmodsi4_neg1>
    2b0e:	57 fd       	sbrc	r21, 7
    2b10:	04 d0       	rcall	.+8      	; 0x2b1a <__divmodsi4_neg2>
    2b12:	d7 df       	rcall	.-82     	; 0x2ac2 <__udivmodsi4>
    2b14:	0a d0       	rcall	.+20     	; 0x2b2a <__divmodsi4_neg1>
    2b16:	00 1c       	adc	r0, r0
    2b18:	38 f4       	brcc	.+14     	; 0x2b28 <__divmodsi4_exit>

00002b1a <__divmodsi4_neg2>:
    2b1a:	50 95       	com	r21
    2b1c:	40 95       	com	r20
    2b1e:	30 95       	com	r19
    2b20:	21 95       	neg	r18
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	4f 4f       	sbci	r20, 0xFF	; 255
    2b26:	5f 4f       	sbci	r21, 0xFF	; 255

00002b28 <__divmodsi4_exit>:
    2b28:	08 95       	ret

00002b2a <__divmodsi4_neg1>:
    2b2a:	f6 f7       	brtc	.-4      	; 0x2b28 <__divmodsi4_exit>
    2b2c:	90 95       	com	r25
    2b2e:	80 95       	com	r24
    2b30:	70 95       	com	r23
    2b32:	61 95       	neg	r22
    2b34:	7f 4f       	sbci	r23, 0xFF	; 255
    2b36:	8f 4f       	sbci	r24, 0xFF	; 255
    2b38:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3a:	08 95       	ret

00002b3c <__prologue_saves__>:
    2b3c:	2f 92       	push	r2
    2b3e:	3f 92       	push	r3
    2b40:	4f 92       	push	r4
    2b42:	5f 92       	push	r5
    2b44:	6f 92       	push	r6
    2b46:	7f 92       	push	r7
    2b48:	8f 92       	push	r8
    2b4a:	9f 92       	push	r9
    2b4c:	af 92       	push	r10
    2b4e:	bf 92       	push	r11
    2b50:	cf 92       	push	r12
    2b52:	df 92       	push	r13
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	ca 1b       	sub	r28, r26
    2b66:	db 0b       	sbc	r29, r27
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	09 94       	ijmp

00002b74 <__epilogue_restores__>:
    2b74:	2a 88       	ldd	r2, Y+18	; 0x12
    2b76:	39 88       	ldd	r3, Y+17	; 0x11
    2b78:	48 88       	ldd	r4, Y+16	; 0x10
    2b7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b80:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b82:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b84:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b86:	b9 84       	ldd	r11, Y+9	; 0x09
    2b88:	c8 84       	ldd	r12, Y+8	; 0x08
    2b8a:	df 80       	ldd	r13, Y+7	; 0x07
    2b8c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b8e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b90:	0c 81       	ldd	r16, Y+4	; 0x04
    2b92:	1b 81       	ldd	r17, Y+3	; 0x03
    2b94:	aa 81       	ldd	r26, Y+2	; 0x02
    2b96:	b9 81       	ldd	r27, Y+1	; 0x01
    2b98:	ce 0f       	add	r28, r30
    2b9a:	d1 1d       	adc	r29, r1
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	ed 01       	movw	r28, r26
    2ba8:	08 95       	ret

00002baa <_exit>:
    2baa:	f8 94       	cli

00002bac <__stop_program>:
    2bac:	ff cf       	rjmp	.-2      	; 0x2bac <__stop_program>
