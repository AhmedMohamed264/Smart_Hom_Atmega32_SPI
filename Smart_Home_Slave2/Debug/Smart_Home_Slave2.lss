
Smart_Home_Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002b6e  00002c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  00002c1a  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017d3  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000784b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000798b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a62f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 14 	call	0x293c	; 0x293c <main>
      8a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_voidInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART_Interface.h"

void MUART_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*UART Configuration*/
	UCSRB = 0b00011000;
     b4e:	ea e2       	ldi	r30, 0x2A	; 42
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 83       	st	Z, r24
	UCSRC = 0b10000110;
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	86 e8       	ldi	r24, 0x86	; 134
     b5c:	80 83       	st	Z, r24

	/*Select Baud Rate 9600*/
	UBRRL = 51;
     b5e:	e9 e2       	ldi	r30, 0x29	; 41
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	80 83       	st	Z, r24
}
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <MUART_voidTransmit>:

void MUART_voidTransmit(u8 A_u8Data)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	0f 92       	push	r0
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	89 83       	std	Y+1, r24	; 0x01
	/*Polling until transmit buffer is empty*/
	while(GET_BIT(UCSRA, 5) == 0);
     b78:	eb e2       	ldi	r30, 0x2B	; 43
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	82 95       	swap	r24
     b80:	86 95       	lsr	r24
     b82:	87 70       	andi	r24, 0x07	; 7
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	81 70       	andi	r24, 0x01	; 1
     b8a:	90 70       	andi	r25, 0x00	; 0
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 f3       	breq	.-24     	; 0xb78 <MUART_voidTransmit+0xc>

	/*Put data In TXD to be transmitted*/
	UDR = A_u8Data;
     b90:	ec e2       	ldi	r30, 0x2C	; 44
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	80 83       	st	Z, r24
}
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <MUART_u8Recieve>:


u8 MUART_u8Recieve()
{
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
	/*Polling to wait until data is received*/
	while(GET_BIT(UCSRA, 7) == 0);
     ba8:	eb e2       	ldi	r30, 0x2B	; 43
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	88 23       	and	r24, r24
     bb0:	dc f7       	brge	.-10     	; 0xba8 <MUART_u8Recieve+0x8>

	/*Return the data received*/
	return UDR;
     bb2:	ec e2       	ldi	r30, 0x2C	; 44
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <MTIMER_voidInit>:
 * A_u8TimerMode  ---> 2 ---> Fast PWM
 * A_u8TimerMode  ---> 3 ---> Phase Correct Mode
 * */

void MTIMER_voidInit(u8 A_u8TimerMode)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <MTIMER_voidInit+0x6>
     bc4:	0f 92       	push	r0
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	89 83       	std	Y+1, r24	; 0x01
	/*Timer Mode Selection*/
	switch(A_u8TimerMode)
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3b 83       	std	Y+3, r19	; 0x03
     bd4:	2a 83       	std	Y+2, r18	; 0x02
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	91 05       	cpc	r25, r1
     bde:	61 f1       	breq	.+88     	; 0xc38 <MTIMER_voidInit+0x7a>
     be0:	2a 81       	ldd	r18, Y+2	; 0x02
     be2:	3b 81       	ldd	r19, Y+3	; 0x03
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	2c f4       	brge	.+10     	; 0xbf4 <MTIMER_voidInit+0x36>
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	9b 81       	ldd	r25, Y+3	; 0x03
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	69 f0       	breq	.+26     	; 0xc0c <MTIMER_voidInit+0x4e>
     bf2:	71 c0       	rjmp	.+226    	; 0xcd6 <MTIMER_voidInit+0x118>
     bf4:	2a 81       	ldd	r18, Y+2	; 0x02
     bf6:	3b 81       	ldd	r19, Y+3	; 0x03
     bf8:	22 30       	cpi	r18, 0x02	; 2
     bfa:	31 05       	cpc	r19, r1
     bfc:	99 f1       	breq	.+102    	; 0xc64 <MTIMER_voidInit+0xa6>
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	9b 81       	ldd	r25, Y+3	; 0x03
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <MTIMER_voidInit+0x4c>
     c08:	4a c0       	rjmp	.+148    	; 0xc9e <MTIMER_voidInit+0xe0>
     c0a:	65 c0       	rjmp	.+202    	; 0xcd6 <MTIMER_voidInit+0x118>
	{

	case 0:
		/*Normal Mode Selection*/
		CLR_BIT(TCCR0, 3);
     c0c:	a3 e5       	ldi	r26, 0x53	; 83
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e3 e5       	ldi	r30, 0x53	; 83
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
     c1a:	a3 e5       	ldi	r26, 0x53	; 83
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e3 e5       	ldi	r30, 0x53	; 83
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7b       	andi	r24, 0xBF	; 191
     c26:	8c 93       	st	X, r24

		/*Timer Overflow Interrupt Enable*/
		SET_BIT(TIMSK, 0);
     c28:	a9 e5       	ldi	r26, 0x59	; 89
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e9 e5       	ldi	r30, 0x59	; 89
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	81 60       	ori	r24, 0x01	; 1
     c34:	8c 93       	st	X, r24
     c36:	4f c0       	rjmp	.+158    	; 0xcd6 <MTIMER_voidInit+0x118>
		break;

	case 1:
		/*CTC Mode Selection*/
		SET_BIT(TCCR0, 3);
     c38:	a3 e5       	ldi	r26, 0x53	; 83
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e3 e5       	ldi	r30, 0x53	; 83
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
     c46:	a3 e5       	ldi	r26, 0x53	; 83
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e3 e5       	ldi	r30, 0x53	; 83
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8f 7b       	andi	r24, 0xBF	; 191
     c52:	8c 93       	st	X, r24

		/*CTC Interrupt Enable*/
		SET_BIT(TIMSK, 1);
     c54:	a9 e5       	ldi	r26, 0x59	; 89
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e9 e5       	ldi	r30, 0x59	; 89
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	82 60       	ori	r24, 0x02	; 2
     c60:	8c 93       	st	X, r24
     c62:	39 c0       	rjmp	.+114    	; 0xcd6 <MTIMER_voidInit+0x118>
		break;

	case 2:
		/*Fast PWM Selection*/
		SET_BIT(TCCR0, 3);
     c64:	a3 e5       	ldi	r26, 0x53	; 83
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e3 e5       	ldi	r30, 0x53	; 83
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 60       	ori	r24, 0x08	; 8
     c70:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     c72:	a3 e5       	ldi	r26, 0x53	; 83
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e3 e5       	ldi	r30, 0x53	; 83
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	80 64       	ori	r24, 0x40	; 64
     c7e:	8c 93       	st	X, r24

		/*Clear then Set*/
		CLR_BIT(TCCR0, 4);
     c80:	a3 e5       	ldi	r26, 0x53	; 83
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e3 e5       	ldi	r30, 0x53	; 83
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8f 7e       	andi	r24, 0xEF	; 239
     c8c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
     c8e:	a3 e5       	ldi	r26, 0x53	; 83
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e3 e5       	ldi	r30, 0x53	; 83
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 62       	ori	r24, 0x20	; 32
     c9a:	8c 93       	st	X, r24
     c9c:	1c c0       	rjmp	.+56     	; 0xcd6 <MTIMER_voidInit+0x118>
		break;

	case 3:
		/*Phase Correct Selection*/
		CLR_BIT(TCCR0, 3);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	87 7f       	andi	r24, 0xF7	; 247
     caa:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 64       	ori	r24, 0x40	; 64
     cb8:	8c 93       	st	X, r24

		/*Clear then Set*/
		CLR_BIT(TCCR0, 4);
     cba:	a3 e5       	ldi	r26, 0x53	; 83
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e5       	ldi	r30, 0x53	; 83
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 7e       	andi	r24, 0xEF	; 239
     cc6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	8c 93       	st	X, r24
		break;
	}
}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <MTIMER_voidSetPreload>:

void MTIMER_voidSetPreload(u8 A_u8Timer_Mode, u8 A_u8Preload)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <MTIMER_voidSetPreload+0x6>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Timer_Mode == 0)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	88 23       	and	r24, r24
     cf4:	29 f4       	brne	.+10     	; 0xd00 <MTIMER_voidSetPreload+0x1e>
		TCNT0 = A_u8Preload;
     cf6:	e2 e5       	ldi	r30, 0x52	; 82
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	80 83       	st	Z, r24
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <MTIMER_voidSetPreload+0x26>
	else
		OCR0 = A_u8Preload;
     d00:	ec e5       	ldi	r30, 0x5C	; 92
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	80 83       	st	Z, r24
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <MTIMER_voidStart>:

void MTIMER_voidStart()
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	/*Start Timer with CLk/8 prescaling*/
	CLR_BIT(TCCR0, 0);
     d1a:	a3 e5       	ldi	r26, 0x53	; 83
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e3 e5       	ldi	r30, 0x53	; 83
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 1);
     d28:	a3 e5       	ldi	r26, 0x53	; 83
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     d36:	a3 e5       	ldi	r26, 0x53	; 83
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e3 e5       	ldi	r30, 0x53	; 83
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8b 7f       	andi	r24, 0xFB	; 251
     d42:	8c 93       	st	X, r24
}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <MTIMER_voidStop>:

void MTIMER_voidStop()
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	/*Start Stop, No clock source*/
	CLR_BIT(TCCR0, 0);
     d52:	a3 e5       	ldi	r26, 0x53	; 83
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e3 e5       	ldi	r30, 0x53	; 83
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
     d60:	a3 e5       	ldi	r26, 0x53	; 83
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e3 e5       	ldi	r30, 0x53	; 83
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8d 7f       	andi	r24, 0xFD	; 253
     d6c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 2);
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8b 7f       	andi	r24, 0xFB	; 251
     d7a:	8c 93       	st	X, r24
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <MTIMER1_voidInit>:


void MTIMER1_voidInit()
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	/*Prescaler clc/8*/
	CLR_BIT(TCCR1B, 0);
     d8a:	ae e4       	ldi	r26, 0x4E	; 78
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ee e4       	ldi	r30, 0x4E	; 78
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8e 7f       	andi	r24, 0xFE	; 254
     d96:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 1);
     d98:	ae e4       	ldi	r26, 0x4E	; 78
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	ee e4       	ldi	r30, 0x4E	; 78
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	82 60       	ori	r24, 0x02	; 2
     da4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 2);
     da6:	ae e4       	ldi	r26, 0x4E	; 78
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ee e4       	ldi	r30, 0x4E	; 78
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	8c 93       	st	X, r24
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <MTIMER1_voidSetValue>:

void MTIMER1_voidSetValue(u8 A_u8Value)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u8Value;
     dc6:	ec e4       	ldi	r30, 0x4C	; 76
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
}
     dd4:	0f 90       	pop	r0
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <MTIMER1_u16Read>:


u16 MTIMER1_u16Read()
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     de4:	ec e4       	ldi	r30, 0x4C	; 76
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
}
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <MSPI_voidMasterInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"


void MSPI_voidMasterInit()
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	/*Master Selection Mode*/
	SET_BIT(SPCR, 4);
     dfa:	ad e2       	ldi	r26, 0x2D	; 45
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ed e2       	ldi	r30, 0x2D	; 45
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 61       	ori	r24, 0x10	; 16
     e06:	8c 93       	st	X, r24

	/*Clock Select Rate bit*/
	SET_BIT(SPCR, 0);
     e08:	ad e2       	ldi	r26, 0x2D	; 45
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ed e2       	ldi	r30, 0x2D	; 45
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
     e16:	ad e2       	ldi	r26, 0x2D	; 45
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ed e2       	ldi	r30, 0x2D	; 45
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8d 7f       	andi	r24, 0xFD	; 253
     e22:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 0);
     e24:	ad e2       	ldi	r26, 0x2D	; 45
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ed e2       	ldi	r30, 0x2D	; 45
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR, 6);
     e32:	ad e2       	ldi	r26, 0x2D	; 45
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ed e2       	ldi	r30, 0x2D	; 45
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 64       	ori	r24, 0x40	; 64
     e3e:	8c 93       	st	X, r24
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <MSPI_voidSlaveInit>:

void MSPI_voidSlaveInit()
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	/*Slave Selection Mode*/
	CLR_BIT(SPCR, 4);
     e4e:	ad e2       	ldi	r26, 0x2D	; 45
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ed e2       	ldi	r30, 0x2D	; 45
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8f 7e       	andi	r24, 0xEF	; 239
     e5a:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR, 6);
     e5c:	ad e2       	ldi	r26, 0x2D	; 45
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ed e2       	ldi	r30, 0x2D	; 45
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 64       	ori	r24, 0x40	; 64
     e68:	8c 93       	st	X, r24
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <MSPI_voidTranscieve>:

u8 MSPI_voidTranscieve(u8 A_u8Data)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	0f 92       	push	r0
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	89 83       	std	Y+1, r24	; 0x01
	/*Send data*/
	SPDR = A_u8Data;
     e7c:	ef e2       	ldi	r30, 0x2F	; 47
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 83       	st	Z, r24

	/*Polling waiting transfer complete*/
	while(GET_BIT(SPSR, 7) == 0);
     e84:	ee e2       	ldi	r30, 0x2E	; 46
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 23       	and	r24, r24
     e8c:	dc f7       	brge	.-10     	; 0xe84 <MSPI_voidTranscieve+0x14>

	/*Return received data*/
	return SPDR;
     e8e:	ef e2       	ldi	r30, 0x2F	; 47
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
}
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <MTWI_voidMasterInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include"I2C_Interface.h"


void MTWI_voidMasterInit(){
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	//SET clock freq 200Kbps
	TWBR = 72;
     ea4:	e0 e2       	ldi	r30, 0x20	; 32
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	88 e4       	ldi	r24, 0x48	; 72
     eaa:	80 83       	st	Z, r24

	//Clear 2bits of TWPS
	CLR_BIT(TWSR, 0);
     eac:	a1 e2       	ldi	r26, 0x21	; 33
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e2       	ldi	r30, 0x21	; 33
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8e 7f       	andi	r24, 0xFE	; 254
     eb8:	8c 93       	st	X, r24
	CLR_BIT(TWSR, 1);
     eba:	a1 e2       	ldi	r26, 0x21	; 33
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e1 e2       	ldi	r30, 0x21	; 33
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8d 7f       	andi	r24, 0xFD	; 253
     ec6:	8c 93       	st	X, r24

	//Enable TWI
	SET_BIT(TWCR, 2);
     ec8:	a6 e5       	ldi	r26, 0x56	; 86
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e6 e5       	ldi	r30, 0x56	; 86
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	84 60       	ori	r24, 0x04	; 4
     ed4:	8c 93       	st	X, r24

}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <MTWI_voidSlaveInit>:

void MTWI_voidSlaveInit(u8 A_u8SalveAddress){
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01

	//Initialize slave address;
	TWAR = (A_u8SalveAddress<<1);
     ee8:	e2 e2       	ldi	r30, 0x22	; 34
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	88 0f       	add	r24, r24
     ef0:	80 83       	st	Z, r24

	//Enable TWI
	SET_BIT(TWCR, 2);
     ef2:	a6 e5       	ldi	r26, 0x56	; 86
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e6 e5       	ldi	r30, 0x56	; 86
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	8c 93       	st	X, r24
}
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <MTWI_SendStartCondition>:

TWI_ErrStatus MTWI_SendStartCondition(){
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrorState = NoError;
     f12:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWCR, 5);
     f14:	a6 e5       	ldi	r26, 0x56	; 86
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 62       	ori	r24, 0x20	; 32
     f20:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
     f22:	a6 e5       	ldi	r26, 0x56	; 86
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e6 e5       	ldi	r30, 0x56	; 86
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	dc f7       	brge	.-10     	; 0xf30 <MTWI_SendStartCondition+0x28>

	if((TWSR & 0xf8) != 0x08){
     f3a:	e1 e2       	ldi	r30, 0x21	; 33
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 7f       	andi	r24, 0xF8	; 248
     f46:	90 70       	andi	r25, 0x00	; 0
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	91 05       	cpc	r25, r1
     f4c:	11 f0       	breq	.+4      	; 0xf52 <MTWI_SendStartCondition+0x4a>
		Local_ErrorState = StartConditionErr;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
     f52:	89 81       	ldd	r24, Y+1	; 0x01
}
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <MTWI_SendSlaveAdderssWithWrite>:





TWI_ErrStatus MTWI_SendSlaveAdderssWithWrite(u8 A_u8SalveAddress){
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <MTWI_SendSlaveAdderssWithWrite+0x6>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrStatus Local_ErrorState = NoError;
     f68:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition with low*/
	//CLR_BIT(TWCR, 5);

	/*Set slave address in MSB in Data Reg*/
	TWDR = (A_u8SalveAddress <<1);
     f6a:	e3 e2       	ldi	r30, 0x23	; 35
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 0f       	add	r24, r24
     f72:	80 83       	st	Z, r24

	/*Clear bit for write op*/
	CLR_BIT(TWDR, 0);
     f74:	a3 e2       	ldi	r26, 0x23	; 35
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e2       	ldi	r30, 0x23	; 35
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	TWCR = (1<<7)|(1<<2);
     f82:	e6 e5       	ldi	r30, 0x56	; 86
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	84 e8       	ldi	r24, 0x84	; 132
     f88:	80 83       	st	Z, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
     f8a:	e6 e5       	ldi	r30, 0x56	; 86
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 23       	and	r24, r24
     f92:	dc f7       	brge	.-10     	; 0xf8a <MTWI_SendSlaveAdderssWithWrite+0x2e>

	if((TWSR & 0xf8) != 0x18){
     f94:	e1 e2       	ldi	r30, 0x21	; 33
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 7f       	andi	r24, 0xF8	; 248
     fa0:	90 70       	andi	r25, 0x00	; 0
     fa2:	88 31       	cpi	r24, 0x18	; 24
     fa4:	91 05       	cpc	r25, r1
     fa6:	11 f0       	breq	.+4      	; 0xfac <MTWI_SendSlaveAdderssWithWrite+0x50>
		Local_ErrorState = SlaveAdderssWithWriteErr;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <MTWI_MasterWriteDataByte>:


TWI_ErrStatus MTWI_MasterWriteDataByte(u8 A_u8Data){
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <MTWI_MasterWriteDataByte+0x6>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorState = NoError;
     fc4:	19 82       	std	Y+1, r1	; 0x01

	/*Write Data on Data reg*/
	TWDR = A_u8Data;
     fc6:	e3 e2       	ldi	r30, 0x23	; 35
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
     fce:	a6 e5       	ldi	r26, 0x56	; 86
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
     fdc:	e6 e5       	ldi	r30, 0x56	; 86
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 23       	and	r24, r24
     fe4:	dc f7       	brge	.-10     	; 0xfdc <MTWI_MasterWriteDataByte+0x24>

	if((TWSR & 0xf8) != 0x28){
     fe6:	e1 e2       	ldi	r30, 0x21	; 33
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	88 7f       	andi	r24, 0xF8	; 248
     ff2:	90 70       	andi	r25, 0x00	; 0
     ff4:	88 32       	cpi	r24, 0x28	; 40
     ff6:	91 05       	cpc	r25, r1
     ff8:	11 f0       	breq	.+4      	; 0xffe <MTWI_MasterWriteDataByte+0x46>
		Local_ErrorState = MasterWriteDataErr;
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01

}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <MTWI_SLaveReading>:

TWI_ErrStatus MTWI_SLaveReading(u8 *A_pu8RecievedData){
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <MTWI_SLaveReading+0x6>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	9b 83       	std	Y+3, r25	; 0x03
    1018:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrStatus Local_ErrorState = NoError;
    101a:	19 82       	std	Y+1, r1	; 0x01

	/*Set Ack Bit*/
	SET_BIT(TWCR,6);
    101c:	a6 e5       	ldi	r26, 0x56	; 86
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 64       	ori	r24, 0x40	; 64
    1028:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
    102a:	a6 e5       	ldi	r26, 0x56	; 86
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e6 e5       	ldi	r30, 0x56	; 86
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    1038:	e6 e5       	ldi	r30, 0x56	; 86
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	88 23       	and	r24, r24
    1040:	dc f7       	brge	.-10     	; 0x1038 <MTWI_SLaveReading+0x2e>

	if((TWSR & 0xf8) != 0x60){
    1042:	e1 e2       	ldi	r30, 0x21	; 33
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	88 7f       	andi	r24, 0xF8	; 248
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	80 36       	cpi	r24, 0x60	; 96
    1052:	91 05       	cpc	r25, r1
    1054:	11 f0       	breq	.+4      	; 0x105a <MTWI_SLaveReading+0x50>
			Local_ErrorState = SlaveAdderessRecievedErr;
    1056:	84 e0       	ldi	r24, 0x04	; 4
    1058:	89 83       	std	Y+1, r24	; 0x01
	}

	//////////////////////////////

	/*Set Ack Bit*/
	SET_BIT(TWCR,6);
    105a:	a6 e5       	ldi	r26, 0x56	; 86
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e6 e5       	ldi	r30, 0x56	; 86
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag to start the prev operation*/
	SET_BIT(TWCR, 7);
    1068:	a6 e5       	ldi	r26, 0x56	; 86
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e6 e5       	ldi	r30, 0x56	; 86
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8c 93       	st	X, r24

	/*Wait Till the interrupt flag is fired and the prev operation is complete*/
	while(GET_BIT(TWCR, 7) == 0);
    1076:	e6 e5       	ldi	r30, 0x56	; 86
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 23       	and	r24, r24
    107e:	dc f7       	brge	.-10     	; 0x1076 <MTWI_SLaveReading+0x6c>

	if((TWSR & 0xf8) != 0x80){
    1080:	e1 e2       	ldi	r30, 0x21	; 33
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	88 7f       	andi	r24, 0xF8	; 248
    108c:	90 70       	andi	r25, 0x00	; 0
    108e:	80 38       	cpi	r24, 0x80	; 128
    1090:	91 05       	cpc	r25, r1
    1092:	19 f0       	breq	.+6      	; 0x109a <MTWI_SLaveReading+0x90>
		Local_ErrorState = SlaveDataRecievedErr;
    1094:	85 e0       	ldi	r24, 0x05	; 5
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <MTWI_SLaveReading+0x9c>
	}
	else{
		*A_pu8RecievedData = TWDR;
    109a:	e3 e2       	ldi	r30, 0x23	; 35
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	ea 81       	ldd	r30, Y+2	; 0x02
    10a2:	fb 81       	ldd	r31, Y+3	; 0x03
    10a4:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01


}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <MTWI_voidSendStopCondition>:

void MTWI_voidSendStopCondition(){
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62

	/*Stop Condtion on the bus*/
	SET_BIT(TWCR, 4);
    10bc:	a6 e5       	ldi	r26, 0x56	; 86
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e6 e5       	ldi	r30, 0x56	; 86
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	80 61       	ori	r24, 0x10	; 16
    10c8:	8c 93       	st	X, r24

	/*Clear Interrupt Flag*/
	SET_BIT(TWCR, 7);
    10ca:	a6 e5       	ldi	r26, 0x56	; 86
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 68       	ori	r24, 0x80	; 128
    10d6:	8c 93       	st	X, r24
}
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <MGIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Interface.h"


void MGIE_voidEnable()
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    10e6:	af e5       	ldi	r26, 0x5F	; 95
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ef e5       	ldi	r30, 0x5F	; 95
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	8c 93       	st	X, r24
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <MGIE_voidDisable>:

void MGIE_voidDisable()
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1102:	af e5       	ldi	r26, 0x5F	; 95
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ef e5       	ldi	r30, 0x5F	; 95
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 77       	andi	r24, 0x7F	; 127
    110e:	8c 93       	st	X, r24
}
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <MEXTI_voidSenseControl>:
 * 2 -----> Falling
 * 3 -----> Rising
 *
 * */
void MEXTI_voidSenseControl(u8 A_u8EXTINumber, u8 A_u8State)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	2a 97       	sbiw	r28, 0x0a	; 10
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTINumber)
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3a 87       	std	Y+10, r19	; 0x0a
    1136:	29 87       	std	Y+9, r18	; 0x09
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <MEXTI_voidSenseControl+0x2e>
    1142:	66 c0       	rjmp	.+204    	; 0x1210 <MEXTI_voidSenseControl+0xfa>
    1144:	29 85       	ldd	r18, Y+9	; 0x09
    1146:	3a 85       	ldd	r19, Y+10	; 0x0a
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <MEXTI_voidSenseControl+0x3a>
    114e:	bb c0       	rjmp	.+374    	; 0x12c6 <MEXTI_voidSenseControl+0x1b0>
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <MEXTI_voidSenseControl+0x44>
    1158:	d5 c0       	rjmp	.+426    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
	{
		case 0:
			switch(A_u8State)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	38 87       	std	Y+8, r19	; 0x08
    1162:	2f 83       	std	Y+7, r18	; 0x07
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	21 f1       	breq	.+72     	; 0x11b6 <MEXTI_voidSenseControl+0xa0>
    116e:	2f 81       	ldd	r18, Y+7	; 0x07
    1170:	38 85       	ldd	r19, Y+8	; 0x08
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <MEXTI_voidSenseControl+0x6c>
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	98 85       	ldd	r25, Y+8	; 0x08
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <MEXTI_voidSenseControl+0x82>
    1180:	c1 c0       	rjmp	.+386    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
    1182:	2f 81       	ldd	r18, Y+7	; 0x07
    1184:	38 85       	ldd	r19, Y+8	; 0x08
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	21 f1       	breq	.+72     	; 0x11d4 <MEXTI_voidSenseControl+0xbe>
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	98 85       	ldd	r25, Y+8	; 0x08
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	71 f1       	breq	.+92     	; 0x11f2 <MEXTI_voidSenseControl+0xdc>
    1196:	b6 c0       	rjmp	.+364    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
			{
				case 0:
					CLR_BIT(MCUCR, 0);
    1198:	a5 e5       	ldi	r26, 0x55	; 85
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e5       	ldi	r30, 0x55	; 85
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    11a6:	a5 e5       	ldi	r26, 0x55	; 85
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e5       	ldi	r30, 0x55	; 85
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	8c 93       	st	X, r24
    11b4:	a7 c0       	rjmp	.+334    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 0);
    11b6:	a5 e5       	ldi	r26, 0x55	; 85
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e5       	ldi	r30, 0x55	; 85
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	81 60       	ori	r24, 0x01	; 1
    11c2:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 1);
    11c4:	a5 e5       	ldi	r26, 0x55	; 85
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e5       	ldi	r30, 0x55	; 85
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8d 7f       	andi	r24, 0xFD	; 253
    11d0:	8c 93       	st	X, r24
    11d2:	98 c0       	rjmp	.+304    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 0);
    11d4:	a5 e5       	ldi	r26, 0x55	; 85
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e5 e5       	ldi	r30, 0x55	; 85
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    11e2:	a5 e5       	ldi	r26, 0x55	; 85
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e5       	ldi	r30, 0x55	; 85
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	8c 93       	st	X, r24
    11f0:	89 c0       	rjmp	.+274    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
			    break;

				case 3:
					SET_BIT(MCUCR, 0);
    11f2:	a5 e5       	ldi	r26, 0x55	; 85
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e5       	ldi	r30, 0x55	; 85
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 1);
    1200:	a5 e5       	ldi	r26, 0x55	; 85
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e5       	ldi	r30, 0x55	; 85
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	8c 93       	st	X, r24
    120e:	7a c0       	rjmp	.+244    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;
			}
		break;

		case 1:
			switch(A_u8State)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3e 83       	std	Y+6, r19	; 0x06
    1218:	2d 83       	std	Y+5, r18	; 0x05
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	21 f1       	breq	.+72     	; 0x126c <MEXTI_voidSenseControl+0x156>
    1224:	2d 81       	ldd	r18, Y+5	; 0x05
    1226:	3e 81       	ldd	r19, Y+6	; 0x06
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	2c f4       	brge	.+10     	; 0x1238 <MEXTI_voidSenseControl+0x122>
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	61 f0       	breq	.+24     	; 0x124e <MEXTI_voidSenseControl+0x138>
    1236:	66 c0       	rjmp	.+204    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
    1238:	2d 81       	ldd	r18, Y+5	; 0x05
    123a:	3e 81       	ldd	r19, Y+6	; 0x06
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	21 f1       	breq	.+72     	; 0x128a <MEXTI_voidSenseControl+0x174>
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	91 05       	cpc	r25, r1
    124a:	71 f1       	breq	.+92     	; 0x12a8 <MEXTI_voidSenseControl+0x192>
    124c:	5b c0       	rjmp	.+182    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
			{
				case 0:
					CLR_BIT(MCUCR,2);
    124e:	a5 e5       	ldi	r26, 0x55	; 85
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e5       	ldi	r30, 0x55	; 85
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8b 7f       	andi	r24, 0xFB	; 251
    125a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,3);
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	87 7f       	andi	r24, 0xF7	; 247
    1268:	8c 93       	st	X, r24
    126a:	4c c0       	rjmp	.+152    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 1:
					SET_BIT(MCUCR, 2);
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	84 60       	ori	r24, 0x04	; 4
    1278:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, 3);
    127a:	a5 e5       	ldi	r26, 0x55	; 85
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e5       	ldi	r30, 0x55	; 85
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	87 7f       	andi	r24, 0xF7	; 247
    1286:	8c 93       	st	X, r24
    1288:	3d c0       	rjmp	.+122    	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 2:
					CLR_BIT(MCUCR, 2);
    128a:	a5 e5       	ldi	r26, 0x55	; 85
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e5 e5       	ldi	r30, 0x55	; 85
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8b 7f       	andi	r24, 0xFB	; 251
    1296:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    1298:	a5 e5       	ldi	r26, 0x55	; 85
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e5       	ldi	r30, 0x55	; 85
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 60       	ori	r24, 0x08	; 8
    12a4:	8c 93       	st	X, r24
    12a6:	2e c0       	rjmp	.+92     	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;

				case 3:
					SET_BIT(MCUCR, 2);
    12a8:	a5 e5       	ldi	r26, 0x55	; 85
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e5 e5       	ldi	r30, 0x55	; 85
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	8c 93       	st	X, r24
					SET_BIT(MCUCR, 3);
    12b6:	a5 e5       	ldi	r26, 0x55	; 85
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e5 e5       	ldi	r30, 0x55	; 85
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	88 60       	ori	r24, 0x08	; 8
    12c2:	8c 93       	st	X, r24
    12c4:	1f c0       	rjmp	.+62     	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				break;
			}
		break;

		case 2:
			switch(A_u8State)
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	2b 83       	std	Y+3, r18	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	91 05       	cpc	r25, r1
    12d8:	31 f0       	breq	.+12     	; 0x12e6 <MEXTI_voidSenseControl+0x1d0>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	23 30       	cpi	r18, 0x03	; 3
    12e0:	31 05       	cpc	r19, r1
    12e2:	49 f0       	breq	.+18     	; 0x12f6 <MEXTI_voidSenseControl+0x1e0>
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
			{
				case 2: CLR_BIT(MCUCSR, 6); break;
    12e6:	a4 e5       	ldi	r26, 0x54	; 84
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e4 e5       	ldi	r30, 0x54	; 84
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7b       	andi	r24, 0xBF	; 191
    12f2:	8c 93       	st	X, r24
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <MEXTI_voidSenseControl+0x1ee>
				case 3: SET_BIT(MCUCSR, 6); break;
    12f6:	a4 e5       	ldi	r26, 0x54	; 84
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e4 e5       	ldi	r30, 0x54	; 84
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	8c 93       	st	X, r24
			}
		break;
	}
}
    1304:	2a 96       	adiw	r28, 0x0a	; 10
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <MEXTI_voidEnable>:

void MEXTI_voidEnable(u8 A_u8EXTINumber)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <MEXTI_voidEnable+0x6>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTINumber)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3b 83       	std	Y+3, r19	; 0x03
    132c:	2a 83       	std	Y+2, r18	; 0x02
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	89 f0       	breq	.+34     	; 0x135a <MEXTI_voidEnable+0x44>
    1338:	2a 81       	ldd	r18, Y+2	; 0x02
    133a:	3b 81       	ldd	r19, Y+3	; 0x03
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	a1 f0       	breq	.+40     	; 0x136a <MEXTI_voidEnable+0x54>
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	b9 f4       	brne	.+46     	; 0x1378 <MEXTI_voidEnable+0x62>
	{
		case 0: SET_BIT(GICR, 6); break;
    134a:	ab e5       	ldi	r26, 0x5B	; 91
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e5       	ldi	r30, 0x5B	; 91
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 64       	ori	r24, 0x40	; 64
    1356:	8c 93       	st	X, r24
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <MEXTI_voidEnable+0x62>

		case 1: SET_BIT(GICR, 7); break;
    135a:	ab e5       	ldi	r26, 0x5B	; 91
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	eb e5       	ldi	r30, 0x5B	; 91
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	80 68       	ori	r24, 0x80	; 128
    1366:	8c 93       	st	X, r24
    1368:	07 c0       	rjmp	.+14     	; 0x1378 <MEXTI_voidEnable+0x62>

		case 2: SET_BIT(GICR, 5); break;
    136a:	ab e5       	ldi	r26, 0x5B	; 91
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb e5       	ldi	r30, 0x5B	; 91
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 62       	ori	r24, 0x20	; 32
    1376:	8c 93       	st	X, r24
	}
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8EXTINumber)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <MEXTI_voidDisable+0x6>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTINumber)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3b 83       	std	Y+3, r19	; 0x03
    139a:	2a 83       	std	Y+2, r18	; 0x02
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	89 f0       	breq	.+34     	; 0x13c8 <MEXTI_voidDisable+0x44>
    13a6:	2a 81       	ldd	r18, Y+2	; 0x02
    13a8:	3b 81       	ldd	r19, Y+3	; 0x03
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	a1 f0       	breq	.+40     	; 0x13d8 <MEXTI_voidDisable+0x54>
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	b9 f4       	brne	.+46     	; 0x13e6 <MEXTI_voidDisable+0x62>
	{
		case 0: CLR_BIT(GICR, 6); break;
    13b8:	ab e5       	ldi	r26, 0x5B	; 91
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e5       	ldi	r30, 0x5B	; 91
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8f 7b       	andi	r24, 0xBF	; 191
    13c4:	8c 93       	st	X, r24
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <MEXTI_voidDisable+0x62>

		case 1: CLR_BIT(GICR, 7); break;
    13c8:	ab e5       	ldi	r26, 0x5B	; 91
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	eb e5       	ldi	r30, 0x5B	; 91
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8f 77       	andi	r24, 0x7F	; 127
    13d4:	8c 93       	st	X, r24
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <MEXTI_voidDisable+0x62>

		case 2: CLR_BIT(GICR, 5); break;
    13d8:	ab e5       	ldi	r26, 0x5B	; 91
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e5       	ldi	r30, 0x5B	; 91
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8f 7d       	andi	r24, 0xDF	; 223
    13e4:	8c 93       	st	X, r24
	}
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <MDIO_voidSetPinDirection>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Interface.h"


void MDIO_voidSetPinDirection(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Dir)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2d 97       	sbiw	r28, 0x0d	; 13
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	6a 83       	std	Y+2, r22	; 0x02
    140a:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinNumber < 8 && A_u8Dir < 2)
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	88 30       	cpi	r24, 0x08	; 8
    1410:	08 f0       	brcs	.+2      	; 0x1414 <MDIO_voidSetPinDirection+0x22>
    1412:	06 c1       	rjmp	.+524    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	08 f0       	brcs	.+2      	; 0x141c <MDIO_voidSetPinDirection+0x2a>
    141a:	02 c1       	rjmp	.+516    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
	{
		switch(A_u8PortNumber)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3d 87       	std	Y+13, r19	; 0x0d
    1424:	2c 87       	std	Y+12, r18	; 0x0c
    1426:	8c 85       	ldd	r24, Y+12	; 0x0c
    1428:	9d 85       	ldd	r25, Y+13	; 0x0d
    142a:	82 34       	cpi	r24, 0x42	; 66
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <MDIO_voidSetPinDirection+0x40>
    1430:	50 c0       	rjmp	.+160    	; 0x14d2 <MDIO_voidSetPinDirection+0xe0>
    1432:	2c 85       	ldd	r18, Y+12	; 0x0c
    1434:	3d 85       	ldd	r19, Y+13	; 0x0d
    1436:	23 34       	cpi	r18, 0x43	; 67
    1438:	31 05       	cpc	r19, r1
    143a:	34 f4       	brge	.+12     	; 0x1448 <MDIO_voidSetPinDirection+0x56>
    143c:	8c 85       	ldd	r24, Y+12	; 0x0c
    143e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1440:	81 34       	cpi	r24, 0x41	; 65
    1442:	91 05       	cpc	r25, r1
    1444:	71 f0       	breq	.+28     	; 0x1462 <MDIO_voidSetPinDirection+0x70>
    1446:	ec c0       	rjmp	.+472    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
    1448:	2c 85       	ldd	r18, Y+12	; 0x0c
    144a:	3d 85       	ldd	r19, Y+13	; 0x0d
    144c:	23 34       	cpi	r18, 0x43	; 67
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <MDIO_voidSetPinDirection+0x62>
    1452:	77 c0       	rjmp	.+238    	; 0x1542 <MDIO_voidSetPinDirection+0x150>
    1454:	8c 85       	ldd	r24, Y+12	; 0x0c
    1456:	9d 85       	ldd	r25, Y+13	; 0x0d
    1458:	84 34       	cpi	r24, 0x44	; 68
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <MDIO_voidSetPinDirection+0x6e>
    145e:	a9 c0       	rjmp	.+338    	; 0x15b2 <MDIO_voidSetPinDirection+0x1c0>
    1460:	df c0       	rjmp	.+446    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
		{
			case 'A':
				switch(A_u8Dir)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3b 87       	std	Y+11, r19	; 0x0b
    146a:	2a 87       	std	Y+10, r18	; 0x0a
    146c:	8a 85       	ldd	r24, Y+10	; 0x0a
    146e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	31 f0       	breq	.+12     	; 0x1480 <MDIO_voidSetPinDirection+0x8e>
    1474:	2a 85       	ldd	r18, Y+10	; 0x0a
    1476:	3b 85       	ldd	r19, Y+11	; 0x0b
    1478:	21 30       	cpi	r18, 0x01	; 1
    147a:	31 05       	cpc	r19, r1
    147c:	b1 f0       	breq	.+44     	; 0x14aa <MDIO_voidSetPinDirection+0xb8>
    147e:	d0 c0       	rjmp	.+416    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRA, A_u8PinNumber); break;
    1480:	aa e3       	ldi	r26, 0x3A	; 58
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ea e3       	ldi	r30, 0x3A	; 58
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <MDIO_voidSetPinDirection+0xac>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <MDIO_voidSetPinDirection+0xa8>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	bb c0       	rjmp	.+374    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRA, A_u8PinNumber); break;
    14aa:	aa e3       	ldi	r26, 0x3A	; 58
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ea e3       	ldi	r30, 0x3A	; 58
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <MDIO_voidSetPinDirection+0xd6>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <MDIO_voidSetPinDirection+0xd2>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	a7 c0       	rjmp	.+334    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'B':
				switch(A_u8Dir)
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	39 87       	std	Y+9, r19	; 0x09
    14da:	28 87       	std	Y+8, r18	; 0x08
    14dc:	88 85       	ldd	r24, Y+8	; 0x08
    14de:	99 85       	ldd	r25, Y+9	; 0x09
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <MDIO_voidSetPinDirection+0xfe>
    14e4:	28 85       	ldd	r18, Y+8	; 0x08
    14e6:	39 85       	ldd	r19, Y+9	; 0x09
    14e8:	21 30       	cpi	r18, 0x01	; 1
    14ea:	31 05       	cpc	r19, r1
    14ec:	b1 f0       	breq	.+44     	; 0x151a <MDIO_voidSetPinDirection+0x128>
    14ee:	98 c0       	rjmp	.+304    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRB, A_u8PinNumber); break;
    14f0:	a7 e3       	ldi	r26, 0x37	; 55
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e7 e3       	ldi	r30, 0x37	; 55
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <MDIO_voidSetPinDirection+0x11c>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <MDIO_voidSetPinDirection+0x118>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	83 c0       	rjmp	.+262    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRB, A_u8PinNumber); break;
    151a:	a7 e3       	ldi	r26, 0x37	; 55
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e7 e3       	ldi	r30, 0x37	; 55
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <MDIO_voidSetPinDirection+0x146>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <MDIO_voidSetPinDirection+0x142>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'C':
				switch(A_u8Dir)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3f 83       	std	Y+7, r19	; 0x07
    154a:	2e 83       	std	Y+6, r18	; 0x06
    154c:	8e 81       	ldd	r24, Y+6	; 0x06
    154e:	9f 81       	ldd	r25, Y+7	; 0x07
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	31 f0       	breq	.+12     	; 0x1560 <MDIO_voidSetPinDirection+0x16e>
    1554:	2e 81       	ldd	r18, Y+6	; 0x06
    1556:	3f 81       	ldd	r19, Y+7	; 0x07
    1558:	21 30       	cpi	r18, 0x01	; 1
    155a:	31 05       	cpc	r19, r1
    155c:	b1 f0       	breq	.+44     	; 0x158a <MDIO_voidSetPinDirection+0x198>
    155e:	60 c0       	rjmp	.+192    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				{
					case 0: CLR_BIT(DDRC, A_u8PinNumber); break;
    1560:	a4 e3       	ldi	r26, 0x34	; 52
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e4 e3       	ldi	r30, 0x34	; 52
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <MDIO_voidSetPinDirection+0x18c>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <MDIO_voidSetPinDirection+0x188>
    1582:	80 95       	com	r24
    1584:	84 23       	and	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	4b c0       	rjmp	.+150    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
					case 1: SET_BIT(DDRC, A_u8PinNumber); break;
    158a:	a4 e3       	ldi	r26, 0x34	; 52
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e4 e3       	ldi	r30, 0x34	; 52
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <MDIO_voidSetPinDirection+0x1b6>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <MDIO_voidSetPinDirection+0x1b2>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	37 c0       	rjmp	.+110    	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				}
				break;

			case 'D':
				switch(A_u8Dir)
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3d 83       	std	Y+5, r19	; 0x05
    15ba:	2c 83       	std	Y+4, r18	; 0x04
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <MDIO_voidSetPinDirection+0x1de>
    15c4:	2c 81       	ldd	r18, Y+4	; 0x04
    15c6:	3d 81       	ldd	r19, Y+5	; 0x05
    15c8:	21 30       	cpi	r18, 0x01	; 1
    15ca:	31 05       	cpc	r19, r1
    15cc:	b1 f0       	breq	.+44     	; 0x15fa <MDIO_voidSetPinDirection+0x208>
    15ce:	28 c0       	rjmp	.+80     	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
				{
						case 0: CLR_BIT(DDRD, A_u8PinNumber); break;
    15d0:	a1 e3       	ldi	r26, 0x31	; 49
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e1 e3       	ldi	r30, 0x31	; 49
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <MDIO_voidSetPinDirection+0x1fc>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <MDIO_voidSetPinDirection+0x1f8>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	13 c0       	rjmp	.+38     	; 0x1620 <MDIO_voidSetPinDirection+0x22e>
						case 1: SET_BIT(DDRD, A_u8PinNumber); break;
    15fa:	a1 e3       	ldi	r26, 0x31	; 49
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e1 e3       	ldi	r30, 0x31	; 49
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <MDIO_voidSetPinDirection+0x226>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <MDIO_voidSetPinDirection+0x222>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1620:	2d 96       	adiw	r28, 0x0d	; 13
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8PinValue)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	2d 97       	sbiw	r28, 0x0d	; 13
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
    164a:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8PinNumber < 8  && A_u8PinValue < 2)
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	08 f0       	brcs	.+2      	; 0x1654 <MDIO_voidSetPinValue+0x22>
    1652:	06 c1       	rjmp	.+524    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	82 30       	cpi	r24, 0x02	; 2
    1658:	08 f0       	brcs	.+2      	; 0x165c <MDIO_voidSetPinValue+0x2a>
    165a:	02 c1       	rjmp	.+516    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
	{
		switch(A_u8PortNumber)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 87       	std	Y+13, r19	; 0x0d
    1664:	2c 87       	std	Y+12, r18	; 0x0c
    1666:	8c 85       	ldd	r24, Y+12	; 0x0c
    1668:	9d 85       	ldd	r25, Y+13	; 0x0d
    166a:	82 34       	cpi	r24, 0x42	; 66
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <MDIO_voidSetPinValue+0x40>
    1670:	50 c0       	rjmp	.+160    	; 0x1712 <MDIO_voidSetPinValue+0xe0>
    1672:	2c 85       	ldd	r18, Y+12	; 0x0c
    1674:	3d 85       	ldd	r19, Y+13	; 0x0d
    1676:	23 34       	cpi	r18, 0x43	; 67
    1678:	31 05       	cpc	r19, r1
    167a:	34 f4       	brge	.+12     	; 0x1688 <MDIO_voidSetPinValue+0x56>
    167c:	8c 85       	ldd	r24, Y+12	; 0x0c
    167e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1680:	81 34       	cpi	r24, 0x41	; 65
    1682:	91 05       	cpc	r25, r1
    1684:	71 f0       	breq	.+28     	; 0x16a2 <MDIO_voidSetPinValue+0x70>
    1686:	ec c0       	rjmp	.+472    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
    1688:	2c 85       	ldd	r18, Y+12	; 0x0c
    168a:	3d 85       	ldd	r19, Y+13	; 0x0d
    168c:	23 34       	cpi	r18, 0x43	; 67
    168e:	31 05       	cpc	r19, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <MDIO_voidSetPinValue+0x62>
    1692:	77 c0       	rjmp	.+238    	; 0x1782 <MDIO_voidSetPinValue+0x150>
    1694:	8c 85       	ldd	r24, Y+12	; 0x0c
    1696:	9d 85       	ldd	r25, Y+13	; 0x0d
    1698:	84 34       	cpi	r24, 0x44	; 68
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <MDIO_voidSetPinValue+0x6e>
    169e:	a9 c0       	rjmp	.+338    	; 0x17f2 <MDIO_voidSetPinValue+0x1c0>
    16a0:	df c0       	rjmp	.+446    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
		{
			case 'A':
				switch(A_u8PinValue)
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3b 87       	std	Y+11, r19	; 0x0b
    16aa:	2a 87       	std	Y+10, r18	; 0x0a
    16ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	31 f0       	breq	.+12     	; 0x16c0 <MDIO_voidSetPinValue+0x8e>
    16b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    16b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    16b8:	21 30       	cpi	r18, 0x01	; 1
    16ba:	31 05       	cpc	r19, r1
    16bc:	b1 f0       	breq	.+44     	; 0x16ea <MDIO_voidSetPinValue+0xb8>
    16be:	d0 c0       	rjmp	.+416    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTA, A_u8PinNumber); break;
    16c0:	ab e3       	ldi	r26, 0x3B	; 59
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <MDIO_voidSetPinValue+0xac>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <MDIO_voidSetPinValue+0xa8>
    16e2:	80 95       	com	r24
    16e4:	84 23       	and	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	bb c0       	rjmp	.+374    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTA, A_u8PinNumber); break;
    16ea:	ab e3       	ldi	r26, 0x3B	; 59
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e3       	ldi	r30, 0x3B	; 59
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <MDIO_voidSetPinValue+0xd6>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <MDIO_voidSetPinValue+0xd2>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	a7 c0       	rjmp	.+334    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case'B':
				switch(A_u8PinValue)
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	39 87       	std	Y+9, r19	; 0x09
    171a:	28 87       	std	Y+8, r18	; 0x08
    171c:	88 85       	ldd	r24, Y+8	; 0x08
    171e:	99 85       	ldd	r25, Y+9	; 0x09
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	31 f0       	breq	.+12     	; 0x1730 <MDIO_voidSetPinValue+0xfe>
    1724:	28 85       	ldd	r18, Y+8	; 0x08
    1726:	39 85       	ldd	r19, Y+9	; 0x09
    1728:	21 30       	cpi	r18, 0x01	; 1
    172a:	31 05       	cpc	r19, r1
    172c:	b1 f0       	breq	.+44     	; 0x175a <MDIO_voidSetPinValue+0x128>
    172e:	98 c0       	rjmp	.+304    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTB, A_u8PinNumber); break;
    1730:	a8 e3       	ldi	r26, 0x38	; 56
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <MDIO_voidSetPinValue+0x11c>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <MDIO_voidSetPinValue+0x118>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	83 c0       	rjmp	.+262    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTB, A_u8PinNumber); break;
    175a:	a8 e3       	ldi	r26, 0x38	; 56
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e8 e3       	ldi	r30, 0x38	; 56
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <MDIO_voidSetPinValue+0x146>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <MDIO_voidSetPinValue+0x142>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	6f c0       	rjmp	.+222    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case 'C':
				switch(A_u8PinValue)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3f 83       	std	Y+7, r19	; 0x07
    178a:	2e 83       	std	Y+6, r18	; 0x06
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	31 f0       	breq	.+12     	; 0x17a0 <MDIO_voidSetPinValue+0x16e>
    1794:	2e 81       	ldd	r18, Y+6	; 0x06
    1796:	3f 81       	ldd	r19, Y+7	; 0x07
    1798:	21 30       	cpi	r18, 0x01	; 1
    179a:	31 05       	cpc	r19, r1
    179c:	b1 f0       	breq	.+44     	; 0x17ca <MDIO_voidSetPinValue+0x198>
    179e:	60 c0       	rjmp	.+192    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTC, A_u8PinNumber); break;
    17a0:	a5 e3       	ldi	r26, 0x35	; 53
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e5 e3       	ldi	r30, 0x35	; 53
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <MDIO_voidSetPinValue+0x18c>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <MDIO_voidSetPinValue+0x188>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	4b c0       	rjmp	.+150    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTC, A_u8PinNumber); break;
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <MDIO_voidSetPinValue+0x1b6>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <MDIO_voidSetPinValue+0x1b2>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	37 c0       	rjmp	.+110    	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				}
				break;

			case 'D':
				switch(A_u8PinValue)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	3d 83       	std	Y+5, r19	; 0x05
    17fa:	2c 83       	std	Y+4, r18	; 0x04
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	31 f0       	breq	.+12     	; 0x1810 <MDIO_voidSetPinValue+0x1de>
    1804:	2c 81       	ldd	r18, Y+4	; 0x04
    1806:	3d 81       	ldd	r19, Y+5	; 0x05
    1808:	21 30       	cpi	r18, 0x01	; 1
    180a:	31 05       	cpc	r19, r1
    180c:	b1 f0       	breq	.+44     	; 0x183a <MDIO_voidSetPinValue+0x208>
    180e:	28 c0       	rjmp	.+80     	; 0x1860 <MDIO_voidSetPinValue+0x22e>
				{
					case 0: CLR_BIT(PORTD, A_u8PinNumber); break;
    1810:	a2 e3       	ldi	r26, 0x32	; 50
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <MDIO_voidSetPinValue+0x1fc>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <MDIO_voidSetPinValue+0x1f8>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	13 c0       	rjmp	.+38     	; 0x1860 <MDIO_voidSetPinValue+0x22e>
					case 1: SET_BIT(PORTD, A_u8PinNumber); break;
    183a:	a2 e3       	ldi	r26, 0x32	; 50
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e2 e3       	ldi	r30, 0x32	; 50
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <MDIO_voidSetPinValue+0x226>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <MDIO_voidSetPinValue+0x222>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
				}
				break;
		}
	}

}
    1860:	2d 96       	adiw	r28, 0x0d	; 13
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <MDIO_voidSetPortDirection+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <MDIO_voidSetPortDirection+0x8>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNumber)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3c 83       	std	Y+4, r19	; 0x04
    188a:	2b 83       	std	Y+3, r18	; 0x03
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	82 34       	cpi	r24, 0x42	; 66
    1892:	91 05       	cpc	r25, r1
    1894:	d9 f0       	breq	.+54     	; 0x18cc <MDIO_voidSetPortDirection+0x5a>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	23 34       	cpi	r18, 0x43	; 67
    189c:	31 05       	cpc	r19, r1
    189e:	34 f4       	brge	.+12     	; 0x18ac <MDIO_voidSetPortDirection+0x3a>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	81 34       	cpi	r24, 0x41	; 65
    18a6:	91 05       	cpc	r25, r1
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <MDIO_voidSetPortDirection+0x50>
    18aa:	1e c0       	rjmp	.+60     	; 0x18e8 <MDIO_voidSetPortDirection+0x76>
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	23 34       	cpi	r18, 0x43	; 67
    18b2:	31 05       	cpc	r19, r1
    18b4:	81 f0       	breq	.+32     	; 0x18d6 <MDIO_voidSetPortDirection+0x64>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	84 34       	cpi	r24, 0x44	; 68
    18bc:	91 05       	cpc	r25, r1
    18be:	81 f0       	breq	.+32     	; 0x18e0 <MDIO_voidSetPortDirection+0x6e>
    18c0:	13 c0       	rjmp	.+38     	; 0x18e8 <MDIO_voidSetPortDirection+0x76>
	{
		case 'A': DDRA = A_u8Dir; break;
    18c2:	ea e3       	ldi	r30, 0x3A	; 58
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	80 83       	st	Z, r24
    18ca:	0e c0       	rjmp	.+28     	; 0x18e8 <MDIO_voidSetPortDirection+0x76>

		case 'B': DDRB = A_u8Dir; break;
    18cc:	e7 e3       	ldi	r30, 0x37	; 55
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	80 83       	st	Z, r24
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <MDIO_voidSetPortDirection+0x76>

		case 'C': DDRC = A_u8Dir; break;
    18d6:	e4 e3       	ldi	r30, 0x34	; 52
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	80 83       	st	Z, r24
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <MDIO_voidSetPortDirection+0x76>

		case 'D': DDRD = A_u8Dir; break;
    18e0:	e1 e3       	ldi	r30, 0x31	; 49
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 83       	st	Z, r24
	}
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNumber, u8 A_u8PortValue)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <MDIO_voidSetPortValue+0x6>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <MDIO_voidSetPortValue+0x8>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNumber)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	82 34       	cpi	r24, 0x42	; 66
    1916:	91 05       	cpc	r25, r1
    1918:	d9 f0       	breq	.+54     	; 0x1950 <MDIO_voidSetPortValue+0x5a>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	23 34       	cpi	r18, 0x43	; 67
    1920:	31 05       	cpc	r19, r1
    1922:	34 f4       	brge	.+12     	; 0x1930 <MDIO_voidSetPortValue+0x3a>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	81 34       	cpi	r24, 0x41	; 65
    192a:	91 05       	cpc	r25, r1
    192c:	61 f0       	breq	.+24     	; 0x1946 <MDIO_voidSetPortValue+0x50>
    192e:	1e c0       	rjmp	.+60     	; 0x196c <MDIO_voidSetPortValue+0x76>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	23 34       	cpi	r18, 0x43	; 67
    1936:	31 05       	cpc	r19, r1
    1938:	81 f0       	breq	.+32     	; 0x195a <MDIO_voidSetPortValue+0x64>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	84 34       	cpi	r24, 0x44	; 68
    1940:	91 05       	cpc	r25, r1
    1942:	81 f0       	breq	.+32     	; 0x1964 <MDIO_voidSetPortValue+0x6e>
    1944:	13 c0       	rjmp	.+38     	; 0x196c <MDIO_voidSetPortValue+0x76>
	{
		case 'A': PORTA = A_u8PortValue; break;
    1946:	eb e3       	ldi	r30, 0x3B	; 59
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	80 83       	st	Z, r24
    194e:	0e c0       	rjmp	.+28     	; 0x196c <MDIO_voidSetPortValue+0x76>

		case 'B': PORTB = A_u8PortValue; break;
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	80 83       	st	Z, r24
    1958:	09 c0       	rjmp	.+18     	; 0x196c <MDIO_voidSetPortValue+0x76>

		case 'C': PORTC = A_u8PortValue; break;
    195a:	e5 e3       	ldi	r30, 0x35	; 53
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
    1962:	04 c0       	rjmp	.+8      	; 0x196c <MDIO_voidSetPortValue+0x76>

		case 'D': PORTD = A_u8PortValue; break;
    1964:	e2 e3       	ldi	r30, 0x32	; 50
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
	}
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <MDIO_u8GetPinValue>:

/* return 0 1 */
u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <MDIO_u8GetPinValue+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <MDIO_u8GetPinValue+0x8>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	if(A_u8PinNumber < 8)
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	08 f0       	brcs	.+2      	; 0x1994 <MDIO_u8GetPinValue+0x1a>
    1992:	68 c0       	rjmp	.+208    	; 0x1a64 <MDIO_u8GetPinValue+0xea>
	{
		switch(A_u8PortNumber)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3d 83       	std	Y+5, r19	; 0x05
    199c:	2c 83       	std	Y+4, r18	; 0x04
    199e:	4c 81       	ldd	r20, Y+4	; 0x04
    19a0:	5d 81       	ldd	r21, Y+5	; 0x05
    19a2:	42 34       	cpi	r20, 0x42	; 66
    19a4:	51 05       	cpc	r21, r1
    19a6:	41 f1       	breq	.+80     	; 0x19f8 <MDIO_u8GetPinValue+0x7e>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	83 34       	cpi	r24, 0x43	; 67
    19ae:	91 05       	cpc	r25, r1
    19b0:	34 f4       	brge	.+12     	; 0x19be <MDIO_u8GetPinValue+0x44>
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	21 34       	cpi	r18, 0x41	; 65
    19b8:	31 05       	cpc	r19, r1
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <MDIO_u8GetPinValue+0x5a>
    19bc:	55 c0       	rjmp	.+170    	; 0x1a68 <MDIO_u8GetPinValue+0xee>
    19be:	4c 81       	ldd	r20, Y+4	; 0x04
    19c0:	5d 81       	ldd	r21, Y+5	; 0x05
    19c2:	43 34       	cpi	r20, 0x43	; 67
    19c4:	51 05       	cpc	r21, r1
    19c6:	51 f1       	breq	.+84     	; 0x1a1c <MDIO_u8GetPinValue+0xa2>
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	84 34       	cpi	r24, 0x44	; 68
    19ce:	91 05       	cpc	r25, r1
    19d0:	b9 f1       	breq	.+110    	; 0x1a40 <MDIO_u8GetPinValue+0xc6>
    19d2:	4a c0       	rjmp	.+148    	; 0x1a68 <MDIO_u8GetPinValue+0xee>
		{
			case 'A': Local_u8Result = GET_BIT(PINA, A_u8PinNumber); break;
    19d4:	e9 e3       	ldi	r30, 0x39	; 57
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a9 01       	movw	r20, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <MDIO_u8GetPinValue+0x72>
    19e8:	55 95       	asr	r21
    19ea:	47 95       	ror	r20
    19ec:	8a 95       	dec	r24
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <MDIO_u8GetPinValue+0x6e>
    19f0:	ca 01       	movw	r24, r20
    19f2:	81 70       	andi	r24, 0x01	; 1
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	38 c0       	rjmp	.+112    	; 0x1a68 <MDIO_u8GetPinValue+0xee>
			case 'B': Local_u8Result = GET_BIT(PINB, A_u8PinNumber); break;
    19f8:	e6 e3       	ldi	r30, 0x36	; 54
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a9 01       	movw	r20, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <MDIO_u8GetPinValue+0x96>
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <MDIO_u8GetPinValue+0x92>
    1a14:	ca 01       	movw	r24, r20
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	26 c0       	rjmp	.+76     	; 0x1a68 <MDIO_u8GetPinValue+0xee>
			case 'C': Local_u8Result = GET_BIT(PINC, A_u8PinNumber); break;
    1a1c:	e3 e3       	ldi	r30, 0x33	; 51
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <MDIO_u8GetPinValue+0xba>
    1a30:	55 95       	asr	r21
    1a32:	47 95       	ror	r20
    1a34:	8a 95       	dec	r24
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <MDIO_u8GetPinValue+0xb6>
    1a38:	ca 01       	movw	r24, r20
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <MDIO_u8GetPinValue+0xee>
			case 'D': Local_u8Result = GET_BIT(PIND, A_u8PinNumber); break;
    1a40:	e0 e3       	ldi	r30, 0x30	; 48
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a9 01       	movw	r20, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <MDIO_u8GetPinValue+0xde>
    1a54:	55 95       	asr	r21
    1a56:	47 95       	ror	r20
    1a58:	8a 95       	dec	r24
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <MDIO_u8GetPinValue+0xda>
    1a5c:	ca 01       	movw	r24, r20
    1a5e:	81 70       	andi	r24, 0x01	; 1
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <MDIO_u8GetPinValue+0xee>
		}
	}
	else
	{
		Local_u8Result = 255;
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <MADC_voidInit>:
 * AVCC  	--- 1
 * Internal --- 2
 */

void MADC_voidInit(u8 A_u8Aref)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <MADC_voidInit+0x6>
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	89 83       	std	Y+1, r24	; 0x01
	/*AREF Selection*/
	switch(A_u8Aref)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	3b 83       	std	Y+3, r19	; 0x03
    1a90:	2a 83       	std	Y+2, r18	; 0x02
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	c1 f0       	breq	.+48     	; 0x1acc <MADC_voidInit+0x52>
    1a9c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a9e:	3b 81       	ldd	r19, Y+3	; 0x03
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	11 f1       	breq	.+68     	; 0x1aea <MADC_voidInit+0x70>
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	61 f5       	brne	.+88     	; 0x1b06 <MADC_voidInit+0x8c>
	{
	case 0:
		CLR_BIT(ADMUX, 6);
    1aae:	a7 e2       	ldi	r26, 0x27	; 39
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e2       	ldi	r30, 0x27	; 39
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7b       	andi	r24, 0xBF	; 191
    1aba:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, 7);
    1abc:	a7 e2       	ldi	r26, 0x27	; 39
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e7 e2       	ldi	r30, 0x27	; 39
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8f 77       	andi	r24, 0x7F	; 127
    1ac8:	8c 93       	st	X, r24
    1aca:	1d c0       	rjmp	.+58     	; 0x1b06 <MADC_voidInit+0x8c>
		break;
	case 1:
		SET_BIT(ADMUX, 6);
    1acc:	a7 e2       	ldi	r26, 0x27	; 39
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e7 e2       	ldi	r30, 0x27	; 39
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 64       	ori	r24, 0x40	; 64
    1ad8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, 7);
    1ada:	a7 e2       	ldi	r26, 0x27	; 39
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e7 e2       	ldi	r30, 0x27	; 39
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	8c 93       	st	X, r24
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <MADC_voidInit+0x8c>
		break;
	case 2:
		SET_BIT(ADMUX, 6);
    1aea:	a7 e2       	ldi	r26, 0x27	; 39
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e7 e2       	ldi	r30, 0x27	; 39
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 64       	ori	r24, 0x40	; 64
    1af6:	8c 93       	st	X, r24
		SET_BIT(ADMUX, 7);
    1af8:	a7 e2       	ldi	r26, 0x27	; 39
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e2       	ldi	r30, 0x27	; 39
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 68       	ori	r24, 0x80	; 128
    1b04:	8c 93       	st	X, r24
		break;
	}

	/*Left Adjust*/
	SET_BIT(ADMUX, 5);
    1b06:	a7 e2       	ldi	r26, 0x27	; 39
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e7 e2       	ldi	r30, 0x27	; 39
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	80 62       	ori	r24, 0x20	; 32
    1b12:	8c 93       	st	X, r24

	/*128 prescaler*/
	SET_BIT(ADCSRA, 0);
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    1b22:	a6 e2       	ldi	r26, 0x26	; 38
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e6 e2       	ldi	r30, 0x26	; 38
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	82 60       	ori	r24, 0x02	; 2
    1b2e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
    1b30:	a6 e2       	ldi	r26, 0x26	; 38
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e6 e2       	ldi	r30, 0x26	; 38
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	84 60       	ori	r24, 0x04	; 4
    1b3c:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADCSRA, 7);
    1b3e:	a6 e2       	ldi	r26, 0x26	; 38
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e6 e2       	ldi	r30, 0x26	; 38
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 68       	ori	r24, 0x80	; 128
    1b4a:	8c 93       	st	X, r24
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <MADC_u8GetChannelReading>:

u8 MADC_u8GetChannelReading(u8 A_u8Channel)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
	/*Channel Selection*/
	ADMUX &= 0b11100000;
    1b64:	a7 e2       	ldi	r26, 0x27	; 39
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e7 e2       	ldi	r30, 0x27	; 39
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 7e       	andi	r24, 0xE0	; 224
    1b70:	8c 93       	st	X, r24
	ADMUX |= A_u8Channel;
    1b72:	a7 e2       	ldi	r26, 0x27	; 39
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e7 e2       	ldi	r30, 0x27	; 39
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	90 81       	ld	r25, Z
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	89 2b       	or	r24, r25
    1b80:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA, 6);
    1b82:	a6 e2       	ldi	r26, 0x26	; 38
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e6 e2       	ldi	r30, 0x26	; 38
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 64       	ori	r24, 0x40	; 64
    1b8e:	8c 93       	st	X, r24

	/*Waiting conversion*/
	while(GET_BIT(ADCSRA, 4) == 0);
    1b90:	e6 e2       	ldi	r30, 0x26	; 38
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	82 95       	swap	r24
    1b98:	8f 70       	andi	r24, 0x0F	; 15
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	81 70       	andi	r24, 0x01	; 1
    1ba0:	90 70       	andi	r25, 0x00	; 0
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	a9 f3       	breq	.-22     	; 0x1b90 <MADC_u8GetChannelReading+0x38>

	/*Clear ADC Flag*/
	SET_BIT(ADCSRA, 4);
    1ba6:	a6 e2       	ldi	r26, 0x26	; 38
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e6 e2       	ldi	r30, 0x26	; 38
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 61       	ori	r24, 0x10	; 16
    1bb2:	8c 93       	st	X, r24

	/*Return result*/
	return ADCH;
    1bb4:	e5 e2       	ldi	r30, 0x25	; 37
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
}
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <HLCD_voidInit>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"


void HLCD_voidInit()
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	e8 97       	sbiw	r28, 0x38	; 56
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
	/*DATA PORTD as Output*/
	MDIO_voidSetPortDirection('D', 255); // PORTA Output
    1bd6:	84 e4       	ldi	r24, 0x44	; 68
    1bd8:	6f ef       	ldi	r22, 0xFF	; 255
    1bda:	0e 94 39 0c 	call	0x1872	; 0x1872 <MDIO_voidSetPortDirection>

	/*Control pins output */
	MDIO_voidSetPinDirection('C', 0, 1); // PA0 Output
    1bde:	83 e4       	ldi	r24, 0x43	; 67
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('C', 1, 1); // PA1 Output
    1be8:	83 e4       	ldi	r24, 0x43	; 67
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection('C', 2, 1); // PA2 Output
    1bf2:	83 e4       	ldi	r24, 0x43	; 67
    1bf4:	62 e0       	ldi	r22, 0x02	; 2
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a8 ef       	ldi	r26, 0xF8	; 248
    1c02:	b1 e4       	ldi	r27, 0x41	; 65
    1c04:	8d ab       	std	Y+53, r24	; 0x35
    1c06:	9e ab       	std	Y+54, r25	; 0x36
    1c08:	af ab       	std	Y+55, r26	; 0x37
    1c0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c10:	8f a9       	ldd	r24, Y+55	; 0x37
    1c12:	98 ad       	ldd	r25, Y+56	; 0x38
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a ef       	ldi	r20, 0xFA	; 250
    1c1a:	54 e4       	ldi	r21, 0x44	; 68
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	89 ab       	std	Y+49, r24	; 0x31
    1c26:	9a ab       	std	Y+50, r25	; 0x32
    1c28:	ab ab       	std	Y+51, r26	; 0x33
    1c2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e8       	ldi	r20, 0x80	; 128
    1c3a:	5f e3       	ldi	r21, 0x3F	; 63
    1c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c40:	88 23       	and	r24, r24
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <HLCD_voidInit+0x8c>
		__ticks = 1;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	98 ab       	std	Y+48, r25	; 0x30
    1c4a:	8f a7       	std	Y+47, r24	; 0x2f
    1c4c:	3f c0       	rjmp	.+126    	; 0x1ccc <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c50:	7a a9       	ldd	r23, Y+50	; 0x32
    1c52:	8b a9       	ldd	r24, Y+51	; 0x33
    1c54:	9c a9       	ldd	r25, Y+52	; 0x34
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	4c f5       	brge	.+82     	; 0x1cb8 <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c66:	6d a9       	ldd	r22, Y+53	; 0x35
    1c68:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e2       	ldi	r20, 0x20	; 32
    1c74:	51 e4       	ldi	r21, 0x41	; 65
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	98 ab       	std	Y+48, r25	; 0x30
    1c8c:	8f a7       	std	Y+47, r24	; 0x2f
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <HLCD_voidInit+0xec>
    1c90:	88 ec       	ldi	r24, 0xC8	; 200
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9e a7       	std	Y+46, r25	; 0x2e
    1c96:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <HLCD_voidInit+0xda>
    1ca0:	9e a7       	std	Y+46, r25	; 0x2e
    1ca2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	98 ab       	std	Y+48, r25	; 0x30
    1cac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	69 f7       	brne	.-38     	; 0x1c90 <HLCD_voidInit+0xce>
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cba:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	98 ab       	std	Y+48, r25	; 0x30
    1cca:	8f a7       	std	Y+47, r24	; 0x2f
    1ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cce:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd0:	9c a7       	std	Y+44, r25	; 0x2c
    1cd2:	8b a7       	std	Y+43, r24	; 0x2b
    1cd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <HLCD_voidInit+0x116>
    1cdc:	9c a7       	std	Y+44, r25	; 0x2c
    1cde:	8b a7       	std	Y+43, r24	; 0x2b

	/*Power ON delay 30ms*/
	_delay_ms(31);
	/*Function Set Command Send*/
	HLCD_voidSendCommand(0x38);
    1ce0:	88 e3       	ldi	r24, 0x38	; 56
    1ce2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <HLCD_voidSendCommand>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e8       	ldi	r26, 0x80	; 128
    1cec:	bf e3       	ldi	r27, 0x3F	; 63
    1cee:	8f a3       	std	Y+39, r24	; 0x27
    1cf0:	98 a7       	std	Y+40, r25	; 0x28
    1cf2:	a9 a7       	std	Y+41, r26	; 0x29
    1cf4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a ef       	ldi	r20, 0xFA	; 250
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8b a3       	std	Y+35, r24	; 0x23
    1d10:	9c a3       	std	Y+36, r25	; 0x24
    1d12:	ad a3       	std	Y+37, r26	; 0x25
    1d14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d16:	6b a1       	ldd	r22, Y+35	; 0x23
    1d18:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <HLCD_voidInit+0x176>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <HLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    1d38:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <HLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6f a1       	ldd	r22, Y+39	; 0x27
    1d52:	78 a5       	ldd	r23, Y+40	; 0x28
    1d54:	89 a5       	ldd	r24, Y+41	; 0x29
    1d56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9a a3       	std	Y+34, r25	; 0x22
    1d76:	89 a3       	std	Y+33, r24	; 0x21
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <HLCD_voidInit+0x1d6>
    1d7a:	88 ec       	ldi	r24, 0xC8	; 200
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	98 a3       	std	Y+32, r25	; 0x20
    1d80:	8f 8f       	std	Y+31, r24	; 0x1f
    1d82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d84:	98 a1       	ldd	r25, Y+32	; 0x20
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <HLCD_voidInit+0x1c4>
    1d8a:	98 a3       	std	Y+32, r25	; 0x20
    1d8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d90:	9a a1       	ldd	r25, Y+34	; 0x22
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9a a3       	std	Y+34, r25	; 0x22
    1d96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <HLCD_voidInit+0x1b8>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <HLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6b a1       	ldd	r22, Y+35	; 0x23
    1da4:	7c a1       	ldd	r23, Y+36	; 0x24
    1da6:	8d a1       	ldd	r24, Y+37	; 0x25
    1da8:	9e a1       	ldd	r25, Y+38	; 0x26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9a a3       	std	Y+34, r25	; 0x22
    1db4:	89 a3       	std	Y+33, r24	; 0x21
    1db6:	89 a1       	ldd	r24, Y+33	; 0x21
    1db8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dba:	9e 8f       	std	Y+30, r25	; 0x1e
    1dbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1dbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <HLCD_voidInit+0x200>
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Function Set Delay*/
	_delay_ms(1);
	/*Display On/Off Command Send*/
	HLCD_voidSendCommand(0x0C); // use 0x0F for blinking cursor
    1dca:	8c e0       	ldi	r24, 0x0C	; 12
    1dcc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <HLCD_voidSendCommand>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	89 8f       	std	Y+25, r24	; 0x19
    1dda:	9a 8f       	std	Y+26, r25	; 0x1a
    1ddc:	ab 8f       	std	Y+27, r26	; 0x1b
    1dde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	69 8d       	ldd	r22, Y+25	; 0x19
    1de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8d 8b       	std	Y+21, r24	; 0x15
    1dfa:	9e 8b       	std	Y+22, r25	; 0x16
    1dfc:	af 8b       	std	Y+23, r26	; 0x17
    1dfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <HLCD_voidInit+0x260>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <HLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    1e22:	6d 89       	ldd	r22, Y+21	; 0x15
    1e24:	7e 89       	ldd	r23, Y+22	; 0x16
    1e26:	8f 89       	ldd	r24, Y+23	; 0x17
    1e28:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <HLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9c 8b       	std	Y+20, r25	; 0x14
    1e60:	8b 8b       	std	Y+19, r24	; 0x13
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <HLCD_voidInit+0x2c0>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9a 8b       	std	Y+18, r25	; 0x12
    1e6a:	89 8b       	std	Y+17, r24	; 0x11
    1e6c:	89 89       	ldd	r24, Y+17	; 0x11
    1e6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <HLCD_voidInit+0x2ae>
    1e74:	9a 8b       	std	Y+18, r25	; 0x12
    1e76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8b 89       	ldd	r24, Y+19	; 0x13
    1e84:	9c 89       	ldd	r25, Y+20	; 0x14
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <HLCD_voidInit+0x2a2>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <HLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e90:	8f 89       	ldd	r24, Y+23	; 0x17
    1e92:	98 8d       	ldd	r25, Y+24	; 0x18
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	98 8b       	std	Y+16, r25	; 0x10
    1ea6:	8f 87       	std	Y+15, r24	; 0x0f
    1ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eaa:	98 89       	ldd	r25, Y+16	; 0x10
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <HLCD_voidInit+0x2ea>
    1eb0:	98 8b       	std	Y+16, r25	; 0x10
    1eb2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Display On/Off Delay*/
	_delay_ms(1);
	/*Dispaly Clear Command Send*/
	HLCD_voidSendCommand(0x01);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <HLCD_voidSendCommand>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e8       	ldi	r26, 0x80	; 128
    1ec0:	bf e3       	ldi	r27, 0x3F	; 63
    1ec2:	8b 87       	std	Y+11, r24	; 0x0b
    1ec4:	9c 87       	std	Y+12, r25	; 0x0c
    1ec6:	ad 87       	std	Y+13, r26	; 0x0d
    1ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a ef       	ldi	r20, 0xFA	; 250
    1ed8:	54 e4       	ldi	r21, 0x44	; 68
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	8f 83       	std	Y+7, r24	; 0x07
    1ee4:	98 87       	std	Y+8, r25	; 0x08
    1ee6:	a9 87       	std	Y+9, r26	; 0x09
    1ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <HLCD_voidInit+0x34a>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <HLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    1f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0e:	78 85       	ldd	r23, Y+8	; 0x08
    1f10:	89 85       	ldd	r24, Y+9	; 0x09
    1f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <HLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <HLCD_voidInit+0x3aa>
    1f4e:	88 ec       	ldi	r24, 0xC8	; 200
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9c 83       	std	Y+4, r25	; 0x04
    1f54:	8b 83       	std	Y+3, r24	; 0x03
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <HLCD_voidInit+0x398>
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <HLCD_voidInit+0x38c>
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <HLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <HLCD_voidInit+0x3d4>
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
	/*Display Clear Delay*/
	_delay_ms(1);
	/*Entery Set*/
	HLCD_voidSendCommand(0x06);
    1f9e:	86 e0       	ldi	r24, 0x06	; 6
    1fa0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <HLCD_voidSendCommand>
}
    1fa4:	e8 96       	adiw	r28, 0x38	; 56
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	6d 97       	sbiw	r28, 0x1d	; 29
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Initialize control pins RS/RW*/
	MDIO_voidSetPinValue('C', 0, 0); // Sending Command
    1fcc:	83 e4       	ldi	r24, 0x43	; 67
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 1, 0); // RW = 0 (Writing on LCD)
    1fd6:	83 e4       	ldi	r24, 0x43	; 67
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>

	/*Write command on data pins*/
	MDIO_voidSetPortValue('D', A_u8Cmd);
    1fe0:	84 e4       	ldi	r24, 0x44	; 68
    1fe2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fe4:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>

	/*Pulse the Enable*/
	MDIO_voidSetPinValue('C', 2, 1); // EN High
    1fe8:	83 e4       	ldi	r24, 0x43	; 67
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 e8       	ldi	r26, 0x80	; 128
    1ff8:	bf e3       	ldi	r27, 0x3F	; 63
    1ffa:	89 8f       	std	Y+25, r24	; 0x19
    1ffc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffe:	ab 8f       	std	Y+27, r26	; 0x1b
    2000:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2002:	69 8d       	ldd	r22, Y+25	; 0x19
    2004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a ef       	ldi	r20, 0xFA	; 250
    2010:	54 e4       	ldi	r21, 0x44	; 68
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	8d 8b       	std	Y+21, r24	; 0x15
    201c:	9e 8b       	std	Y+22, r25	; 0x16
    201e:	af 8b       	std	Y+23, r26	; 0x17
    2020:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2022:	6d 89       	ldd	r22, Y+21	; 0x15
    2024:	7e 89       	ldd	r23, Y+22	; 0x16
    2026:	8f 89       	ldd	r24, Y+23	; 0x17
    2028:	98 8d       	ldd	r25, Y+24	; 0x18
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2036:	88 23       	and	r24, r24
    2038:	2c f4       	brge	.+10     	; 0x2044 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	8b 8b       	std	Y+19, r24	; 0x13
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	4c f5       	brge	.+82     	; 0x20ae <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205c:	69 8d       	ldd	r22, Y+25	; 0x19
    205e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2060:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2062:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e2       	ldi	r20, 0x20	; 32
    206a:	51 e4       	ldi	r21, 0x41	; 65
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9c 8b       	std	Y+20, r25	; 0x14
    2082:	8b 8b       	std	Y+19, r24	; 0x13
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <HLCD_voidSendCommand+0xee>
    2086:	88 ec       	ldi	r24, 0xC8	; 200
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9a 8b       	std	Y+18, r25	; 0x12
    208c:	89 8b       	std	Y+17, r24	; 0x11
    208e:	89 89       	ldd	r24, Y+17	; 0x11
    2090:	9a 89       	ldd	r25, Y+18	; 0x12
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <HLCD_voidSendCommand+0xdc>
    2096:	9a 8b       	std	Y+18, r25	; 0x12
    2098:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	9c 89       	ldd	r25, Y+20	; 0x14
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	69 f7       	brne	.-38     	; 0x2086 <HLCD_voidSendCommand+0xd0>
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9c 8b       	std	Y+20, r25	; 0x14
    20c0:	8b 8b       	std	Y+19, r24	; 0x13
    20c2:	8b 89       	ldd	r24, Y+19	; 0x13
    20c4:	9c 89       	ldd	r25, Y+20	; 0x14
    20c6:	98 8b       	std	Y+16, r25	; 0x10
    20c8:	8f 87       	std	Y+15, r24	; 0x0f
    20ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    20cc:	98 89       	ldd	r25, Y+16	; 0x10
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <HLCD_voidSendCommand+0x118>
    20d2:	98 8b       	std	Y+16, r25	; 0x10
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('C', 2, 0); // EN Low
    20d6:	83 e4       	ldi	r24, 0x43	; 67
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e8       	ldi	r26, 0x80	; 128
    20e6:	bf e3       	ldi	r27, 0x3F	; 63
    20e8:	8b 87       	std	Y+11, r24	; 0x0b
    20ea:	9c 87       	std	Y+12, r25	; 0x0c
    20ec:	ad 87       	std	Y+13, r26	; 0x0d
    20ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a ef       	ldi	r20, 0xFA	; 250
    20fe:	54 e4       	ldi	r21, 0x44	; 68
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8f 83       	std	Y+7, r24	; 0x07
    210a:	98 87       	std	Y+8, r25	; 0x08
    210c:	a9 87       	std	Y+9, r26	; 0x09
    210e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	57 e4       	ldi	r21, 0x47	; 71
    2142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	4c f5       	brge	.+82     	; 0x219c <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	6b 85       	ldd	r22, Y+11	; 0x0b
    214c:	7c 85       	ldd	r23, Y+12	; 0x0c
    214e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2150:	9e 85       	ldd	r25, Y+14	; 0x0e
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <HLCD_voidSendCommand+0x1dc>
    2174:	88 ec       	ldi	r24, 0xC8	; 200
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <HLCD_voidSendCommand+0x1ca>
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <HLCD_voidSendCommand+0x1be>
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <HLCD_voidSendCommand+0x206>
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    21c4:	6d 96       	adiw	r28, 0x1d	; 29
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	6d 97       	sbiw	r28, 0x1d	; 29
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Initialize control pins RS/RW*/
	MDIO_voidSetPinValue('C', 0, 1); // Sending Data (RS High)
    21ec:	83 e4       	ldi	r24, 0x43	; 67
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 1, 0); // RW = 0 (Writing on LCD)
    21f6:	83 e4       	ldi	r24, 0x43	; 67
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>

	/*Write command on data pins*/
	MDIO_voidSetPortValue('D', A_u8Data);
    2200:	84 e4       	ldi	r24, 0x44	; 68
    2202:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2204:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>

	/*Pulse the Enable*/
	MDIO_voidSetPinValue('C', 2, 1); // EN High
    2208:	83 e4       	ldi	r24, 0x43	; 67
    220a:	62 e0       	ldi	r22, 0x02	; 2
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 e8       	ldi	r26, 0x80	; 128
    2218:	bf e3       	ldi	r27, 0x3F	; 63
    221a:	89 8f       	std	Y+25, r24	; 0x19
    221c:	9a 8f       	std	Y+26, r25	; 0x1a
    221e:	ab 8f       	std	Y+27, r26	; 0x1b
    2220:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	69 8d       	ldd	r22, Y+25	; 0x19
    2224:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8d 8b       	std	Y+21, r24	; 0x15
    223c:	9e 8b       	std	Y+22, r25	; 0x16
    223e:	af 8b       	std	Y+23, r26	; 0x17
    2240:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2242:	6d 89       	ldd	r22, Y+21	; 0x15
    2244:	7e 89       	ldd	r23, Y+22	; 0x16
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9c 8b       	std	Y+20, r25	; 0x14
    2260:	8b 8b       	std	Y+19, r24	; 0x13
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2264:	6d 89       	ldd	r22, Y+21	; 0x15
    2266:	7e 89       	ldd	r23, Y+22	; 0x16
    2268:	8f 89       	ldd	r24, Y+23	; 0x17
    226a:	98 8d       	ldd	r25, Y+24	; 0x18
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	69 8d       	ldd	r22, Y+25	; 0x19
    227e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9c 8b       	std	Y+20, r25	; 0x14
    22a2:	8b 8b       	std	Y+19, r24	; 0x13
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <HLCD_voidSendData+0xee>
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9a 8b       	std	Y+18, r25	; 0x12
    22ac:	89 8b       	std	Y+17, r24	; 0x11
    22ae:	89 89       	ldd	r24, Y+17	; 0x11
    22b0:	9a 89       	ldd	r25, Y+18	; 0x12
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <HLCD_voidSendData+0xdc>
    22b6:	9a 8b       	std	Y+18, r25	; 0x12
    22b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9c 8b       	std	Y+20, r25	; 0x14
    22c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8b 89       	ldd	r24, Y+19	; 0x13
    22c6:	9c 89       	ldd	r25, Y+20	; 0x14
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <HLCD_voidSendData+0xd0>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6d 89       	ldd	r22, Y+21	; 0x15
    22d0:	7e 89       	ldd	r23, Y+22	; 0x16
    22d2:	8f 89       	ldd	r24, Y+23	; 0x17
    22d4:	98 8d       	ldd	r25, Y+24	; 0x18
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9c 8b       	std	Y+20, r25	; 0x14
    22e0:	8b 8b       	std	Y+19, r24	; 0x13
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	98 8b       	std	Y+16, r25	; 0x10
    22e8:	8f 87       	std	Y+15, r24	; 0x0f
    22ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ec:	98 89       	ldd	r25, Y+16	; 0x10
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <HLCD_voidSendData+0x118>
    22f2:	98 8b       	std	Y+16, r25	; 0x10
    22f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue('C', 2, 0); // EN Low
    22f6:	83 e4       	ldi	r24, 0x43	; 67
    22f8:	62 e0       	ldi	r22, 0x02	; 2
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e8       	ldi	r26, 0x80	; 128
    2306:	bf e3       	ldi	r27, 0x3F	; 63
    2308:	8b 87       	std	Y+11, r24	; 0x0b
    230a:	9c 87       	std	Y+12, r25	; 0x0c
    230c:	ad 87       	std	Y+13, r26	; 0x0d
    230e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8f 83       	std	Y+7, r24	; 0x07
    232a:	98 87       	std	Y+8, r25	; 0x08
    232c:	a9 87       	std	Y+9, r26	; 0x09
    232e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6b 85       	ldd	r22, Y+11	; 0x0b
    236c:	7c 85       	ldd	r23, Y+12	; 0x0c
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	9e 85       	ldd	r25, Y+14	; 0x0e
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <HLCD_voidSendData+0x1dc>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <HLCD_voidSendData+0x1ca>
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <HLCD_voidSendData+0x1be>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <HLCD_voidSendData+0x206>
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23e4:	6d 96       	adiw	r28, 0x1d	; 29
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <HLCD_voidSendString>:

void HLCD_voidSendString(s8 *A_u8String)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <HLCD_voidSendString+0x6>
    23fc:	0f 92       	push	r0
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9b 83       	std	Y+3, r25	; 0x03
    2404:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <HLCD_voidSendString+0x30>
	while(A_u8String[i] != '\0')
	{
		HLCD_voidSendData(A_u8String[i]);
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	fc 01       	movw	r30, r24
    2416:	e2 0f       	add	r30, r18
    2418:	f3 1f       	adc	r31, r19
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <HLCD_voidSendData>
		i++;
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_voidSendString(s8 *A_u8String)
{
	u8 i = 0;
	while(A_u8String[i] != '\0')
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	9b 81       	ldd	r25, Y+3	; 0x03
    2430:	fc 01       	movw	r30, r24
    2432:	e2 0f       	add	r30, r18
    2434:	f3 1f       	adc	r31, r19
    2436:	80 81       	ld	r24, Z
    2438:	88 23       	and	r24, r24
    243a:	39 f7       	brne	.-50     	; 0x240a <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(A_u8String[i]);
		i++;
	}
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <HLCD_voidGoTo>:

void HLCD_voidGoTo(u8 A_u8Row, u8 A_u8Col)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <HLCD_voidGoTo+0x6>
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	8a 83       	std	Y+2, r24	; 0x02
    2456:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DdramAddress;
	if(A_u8Row < 2 && A_u8Col < 16) // Check for wrong arguments
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	90 f4       	brcc	.+36     	; 0x2482 <HLCD_voidGoTo+0x3a>
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	80 31       	cpi	r24, 0x10	; 16
    2462:	78 f4       	brcc	.+30     	; 0x2482 <HLCD_voidGoTo+0x3a>
	{
		if(A_u8Row == 0) // check if it is the first row
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	88 23       	and	r24, r24
    2468:	19 f4       	brne	.+6      	; 0x2470 <HLCD_voidGoTo+0x28>
			L_u8DdramAddress = 0x00 + A_u8Col; // first address + required column
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <HLCD_voidGoTo+0x2e>
		else
			L_u8DdramAddress = 0x40 + A_u8Col; // second line address + required column
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	80 5c       	subi	r24, 0xC0	; 192
    2474:	89 83       	std	Y+1, r24	; 0x01

		SET_BIT(L_u8DdramAddress, 7); // Datasheet required Set Bit for the command to  work
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	80 68       	ori	r24, 0x80	; 128
    247a:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(L_u8DdramAddress); // Send finalized address to LCD
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <HLCD_voidSendCommand>
	}
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    248e:	ef 92       	push	r14
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	28 97       	sbiw	r28, 0x08	; 8
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	6d 83       	std	Y+5, r22	; 0x05
    24ac:	7e 83       	std	Y+6, r23	; 0x06
    24ae:	8f 83       	std	Y+7, r24	; 0x07
    24b0:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a0 e0       	ldi	r26, 0x00	; 0
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	ab 83       	std	Y+3, r26	; 0x03
    24c0:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	af 81       	ldd	r26, Y+7	; 0x07
    24c8:	b8 85       	ldd	r27, Y+8	; 0x08
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	a1 05       	cpc	r26, r1
    24ce:	b1 05       	cpc	r27, r1
    24d0:	19 f4       	brne	.+6      	; 0x24d8 <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    24d2:	80 e3       	ldi	r24, 0x30	; 48
    24d4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	af 81       	ldd	r26, Y+7	; 0x07
    24de:	b8 85       	ldd	r27, Y+8	; 0x08
    24e0:	bb 23       	and	r27, r27
    24e2:	0c f0       	brlt	.+2      	; 0x24e6 <HLCD_voidDisplayNumber+0x58>
    24e4:	49 c0       	rjmp	.+146    	; 0x2578 <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    24e6:	8d e2       	ldi	r24, 0x2D	; 45
    24e8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <HLCD_voidSendData>
		A_s32Number *=-1;
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	af 81       	ldd	r26, Y+7	; 0x07
    24f2:	b8 85       	ldd	r27, Y+8	; 0x08
    24f4:	b0 95       	com	r27
    24f6:	a0 95       	com	r26
    24f8:	90 95       	com	r25
    24fa:	81 95       	neg	r24
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	af 4f       	sbci	r26, 0xFF	; 255
    2500:	bf 4f       	sbci	r27, 0xFF	; 255
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	af 83       	std	Y+7, r26	; 0x07
    2508:	b8 87       	std	Y+8, r27	; 0x08
    250a:	36 c0       	rjmp	.+108    	; 0x2578 <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	ab 81       	ldd	r26, Y+3	; 0x03
    2512:	bc 81       	ldd	r27, Y+4	; 0x04
    2514:	2a e0       	ldi	r18, 0x0A	; 10
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__mulsi3>
    2524:	7b 01       	movw	r14, r22
    2526:	8c 01       	movw	r16, r24
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	af 81       	ldd	r26, Y+7	; 0x07
    252e:	b8 85       	ldd	r27, Y+8	; 0x08
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodsi4>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8e 0d       	add	r24, r14
    2546:	9f 1d       	adc	r25, r15
    2548:	a0 1f       	adc	r26, r16
    254a:	b1 1f       	adc	r27, r17
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	ab 83       	std	Y+3, r26	; 0x03
    2552:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	af 81       	ldd	r26, Y+7	; 0x07
    255a:	b8 85       	ldd	r27, Y+8	; 0x08
    255c:	2a e0       	ldi	r18, 0x0A	; 10
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__divmodsi4>
    256c:	da 01       	movw	r26, r20
    256e:	c9 01       	movw	r24, r18
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	af 83       	std	Y+7, r26	; 0x07
    2576:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	af 81       	ldd	r26, Y+7	; 0x07
    257e:	b8 85       	ldd	r27, Y+8	; 0x08
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	a1 05       	cpc	r26, r1
    2584:	b1 05       	cpc	r27, r1
    2586:	11 f6       	brne	.-124    	; 0x250c <HLCD_voidDisplayNumber+0x7e>
    2588:	23 c0       	rjmp	.+70     	; 0x25d0 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	ab 81       	ldd	r26, Y+3	; 0x03
    2590:	bc 81       	ldd	r27, Y+4	; 0x04
    2592:	2a e0       	ldi	r18, 0x0A	; 10
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__udivmodsi4>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	80 5d       	subi	r24, 0xD0	; 208
    25a8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	ab 81       	ldd	r26, Y+3	; 0x03
    25b2:	bc 81       	ldd	r27, Y+4	; 0x04
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__udivmodsi4>
    25c4:	da 01       	movw	r26, r20
    25c6:	c9 01       	movw	r24, r18
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	ab 83       	std	Y+3, r26	; 0x03
    25ce:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	ab 81       	ldd	r26, Y+3	; 0x03
    25d6:	bc 81       	ldd	r27, Y+4	; 0x04
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	91 05       	cpc	r25, r1
    25dc:	a1 05       	cpc	r26, r1
    25de:	b1 05       	cpc	r27, r1
    25e0:	a1 f6       	brne	.-88     	; 0x258a <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    25e2:	28 96       	adiw	r28, 0x08	; 8
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	08 95       	ret

000025fc <HLCD_voidLCDReset>:

/*This function for clearing the LCD
 * and pointing to the first line
 * */
void HLCD_voidLCDReset(void)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	/*Clear LCD*/
	HLCD_voidSendCommand(1);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <HLCD_voidSendCommand>

	/*Go to First Line*/
	HLCD_voidGoTo(0, 0);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	0e 94 24 12 	call	0x2448	; 0x2448 <HLCD_voidGoTo>
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <HKPD_u8GetPressedKey>:
 * scans the pressed key
 * return: the pressed key
 * return: 255 if no key pressed
 * */
u8 HKPD_u8GetPressedKey()
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	00 d0       	rcall	.+0      	; 0x261e <HKPD_u8GetPressedKey+0x6>
    261e:	00 d0       	rcall	.+0      	; 0x2620 <HKPD_u8GetPressedKey+0x8>
    2620:	0f 92       	push	r0
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = 255, Col, Row;
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	8c 83       	std	Y+4, r24	; 0x04

	for(Col = 0; Col < 4; Col++)
    262a:	1b 82       	std	Y+3, r1	; 0x03
    262c:	3e c0       	rjmp	.+124    	; 0x26aa <HKPD_u8GetPressedKey+0x92>
	{
		/*Activate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4 , 0);
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	98 2f       	mov	r25, r24
    2632:	9c 5f       	subi	r25, 0xFC	; 252
    2634:	84 e4       	ldi	r24, 0x44	; 68
    2636:	69 2f       	mov	r22, r25
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>

		/*Checks row by row*/
		for(Row = 0; Row < 4; Row++)
    263e:	1a 82       	std	Y+2, r1	; 0x02
    2640:	26 c0       	rjmp	.+76     	; 0x268e <HKPD_u8GetPressedKey+0x76>
		{
			/*Gets row value*/
			u8 L_u8PinValue = MDIO_u8GetPinValue('D', (Row));
    2642:	84 e4       	ldi	r24, 0x44	; 68
    2644:	6a 81       	ldd	r22, Y+2	; 0x02
    2646:	0e 94 bd 0c 	call	0x197a	; 0x197a <MDIO_u8GetPinValue>
    264a:	89 83       	std	Y+1, r24	; 0x01

			/*Check if Key is Pressed*/
			if(L_u8PinValue == 0)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	88 23       	and	r24, r24
    2650:	d9 f4       	brne	.+54     	; 0x2688 <HKPD_u8GetPressedKey+0x70>
			{
				/*Saves pressed key for returning it*/
				Local_u8PressedKey = G_u8KPDButtons[Row][Col];
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	48 2f       	mov	r20, r24
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	ca 01       	movw	r24, r20
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	82 0f       	add	r24, r18
    266a:	93 1f       	adc	r25, r19
    266c:	fc 01       	movw	r30, r24
    266e:	e8 59       	subi	r30, 0x98	; 152
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	8c 83       	std	Y+4, r24	; 0x04

				/*Waiting until key gets not pressed*/
				while(MDIO_u8GetPinValue('D', Row) == 0);
    2676:	84 e4       	ldi	r24, 0x44	; 68
    2678:	6a 81       	ldd	r22, Y+2	; 0x02
    267a:	0e 94 bd 0c 	call	0x197a	; 0x197a <MDIO_u8GetPinValue>
    267e:	88 23       	and	r24, r24
    2680:	d1 f3       	breq	.-12     	; 0x2676 <HKPD_u8GetPressedKey+0x5e>

				/*return the pressed key*/
				return Local_u8PressedKey;
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	17 c0       	rjmp	.+46     	; 0x26b6 <HKPD_u8GetPressedKey+0x9e>
	{
		/*Activate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4 , 0);

		/*Checks row by row*/
		for(Row = 0; Row < 4; Row++)
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	8a 83       	std	Y+2, r24	; 0x02
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	84 30       	cpi	r24, 0x04	; 4
    2692:	b8 f2       	brcs	.-82     	; 0x2642 <HKPD_u8GetPressedKey+0x2a>
				/*return the pressed key*/
				return Local_u8PressedKey;
			}
		}
		/*Deactivate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4, 1);
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	98 2f       	mov	r25, r24
    2698:	9c 5f       	subi	r25, 0xFC	; 252
    269a:	84 e4       	ldi	r24, 0x44	; 68
    269c:	69 2f       	mov	r22, r25
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
 * */
u8 HKPD_u8GetPressedKey()
{
	u8 Local_u8PressedKey = 255, Col, Row;

	for(Col = 0; Col < 4; Col++)
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	84 30       	cpi	r24, 0x04	; 4
    26ae:	08 f4       	brcc	.+2      	; 0x26b2 <HKPD_u8GetPressedKey+0x9a>
    26b0:	be cf       	rjmp	.-132    	; 0x262e <HKPD_u8GetPressedKey+0x16>
		}
		/*Deactivate Current Column*/
		MDIO_voidSetPinValue('D', Col + 4, 1);
	}
	/*returns 255 for referring that no key is pressed*/
	return Local_u8PressedKey;
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <HDCMOTOTR_voidInit>:
#define DC_MOTOR_PIN1	  0
#define DC_MOTOR_PIN2	  1


void HDCMOTOTR_voidInit(void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1, 1);
    26d0:	83 e4       	ldi	r24, 0x43	; 67
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2, 1);
    26da:	83 e4       	ldi	r24, 0x43	; 67
    26dc:	61 e0       	ldi	r22, 0x01	; 1
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    26e4:	83 e4       	ldi	r24, 0x43	; 67
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    26ee:	83 e4       	ldi	r24, 0x43	; 67
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <HDCMOTOR_voidRotateClockWise>:

void HDCMOTOR_voidRotateClockWise(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    2706:	83 e4       	ldi	r24, 0x43	; 67
    2708:	61 e0       	ldi	r22, 0x01	; 1
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 1);
    2710:	83 e4       	ldi	r24, 0x43	; 67
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
}
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <HDCMOTOR_voidRotateCounterClockWise>:

void HDCMOTOR_voidRotateCounterClockWise(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    2728:	83 e4       	ldi	r24, 0x43	; 67
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 1);
    2732:	83 e4       	ldi	r24, 0x43	; 67
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <HDCMOTOR_voidStop>:

void HDCMOTOR_voidStop(void)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, 0);
    274a:	83 e4       	ldi	r24, 0x43	; 67
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, 0);
    2754:	83 e4       	ldi	r24, 0x43	; 67
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <APP_voidReadTemperature>:

/*This function is responisble for
 * Reading Temperature using ADC
 * */
void APP_voidReadTemperature(void)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <APP_voidReadTemperature+0x6>
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	/*ADC Read LM35 (Channel 0)*/
	u8 L_u8Reading = MADC_u8GetChannelReading(0);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <MADC_u8GetChannelReading>
    2776:	8b 83       	std	Y+3, r24	; 0x03

	/*Calculate Milli Voltage*/
	u16 L_u16MilliVolt = (u16)(((u32)L_u8Reading * 5000UL) / 256UL);
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	28 e8       	ldi	r18, 0x88	; 136
    2784:	33 e1       	ldi	r19, 0x13	; 19
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__mulsi3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	89 2f       	mov	r24, r25
    2798:	9a 2f       	mov	r25, r26
    279a:	ab 2f       	mov	r26, r27
    279c:	bb 27       	eor	r27, r27
    279e:	9a 83       	std	Y+2, r25	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01

	/*Calculate Temperature*/
	G_u8Temp = L_u16MilliVolt / 10;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	b9 01       	movw	r22, r18
    27ac:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__udivmodhi4>
    27b0:	cb 01       	movw	r24, r22
    27b2:	80 93 79 00 	sts	0x0079, r24
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <APP_voidUpdateFanStatus>:

/*This function is responsible for
 * Turning On/off fan based on temperature*/
void APP_voidUpdateFanStatus(void)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
	/*if temp >= threshold, Fan turns On*/
	if(G_u8Temp >= TEMPERATURE_THRESHOLD)
    27ca:	80 91 79 00 	lds	r24, 0x0079
    27ce:	8e 31       	cpi	r24, 0x1E	; 30
    27d0:	30 f0       	brcs	.+12     	; 0x27de <APP_voidUpdateFanStatus+0x1c>
		MDIO_voidSetPinValue('A', 2, 1);
    27d2:	81 e4       	ldi	r24, 0x41	; 65
    27d4:	62 e0       	ldi	r22, 0x02	; 2
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
    27dc:	05 c0       	rjmp	.+10     	; 0x27e8 <APP_voidUpdateFanStatus+0x26>
	else
		MDIO_voidSetPinValue('A', 2, 0);
    27de:	81 e4       	ldi	r24, 0x41	; 65
    27e0:	62 e0       	ldi	r22, 0x02	; 2
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
}
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <APP_voidReadLDR>:

/*This function reads LDR Value*/
void APP_voidReadLDR(void)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
	/*LDR Read Value*/
	/*Get ADC 1 Channel Reading*/
	G_u8LDRReading = MADC_u8GetChannelReading(1);
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <MADC_u8GetChannelReading>
    27fc:	80 93 7a 00 	sts	0x007A, r24
}
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <APP_voidAdjustLEDSOn>:
/*This function maps the LDR value
 * to another value in decimal
 * that turns of number of leds based on LDR range
 * */
void APP_voidAdjustLEDSOn(void)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
	/*Adjust LEDS Status*/
	if(G_u8LDRReading < 40)
    280e:	80 91 7a 00 	lds	r24, 0x007A
    2812:	88 32       	cpi	r24, 0x28	; 40
    2814:	28 f4       	brcc	.+10     	; 0x2820 <APP_voidAdjustLEDSOn+0x1a>
	{
		MDIO_voidSetPortValue('C', 31); // All leds on
    2816:	83 e4       	ldi	r24, 0x43	; 67
    2818:	6f e1       	ldi	r22, 0x1F	; 31
    281a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>
    281e:	3c c0       	rjmp	.+120    	; 0x2898 <APP_voidAdjustLEDSOn+0x92>
	}
	else if(G_u8LDRReading >= 40 && G_u8LDRReading < 80)
    2820:	80 91 7a 00 	lds	r24, 0x007A
    2824:	88 32       	cpi	r24, 0x28	; 40
    2826:	48 f0       	brcs	.+18     	; 0x283a <APP_voidAdjustLEDSOn+0x34>
    2828:	80 91 7a 00 	lds	r24, 0x007A
    282c:	80 35       	cpi	r24, 0x50	; 80
    282e:	28 f4       	brcc	.+10     	; 0x283a <APP_voidAdjustLEDSOn+0x34>
	{
		MDIO_voidSetPortValue('C', 15); // 4 leds on
    2830:	83 e4       	ldi	r24, 0x43	; 67
    2832:	6f e0       	ldi	r22, 0x0F	; 15
    2834:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>
    2838:	2f c0       	rjmp	.+94     	; 0x2898 <APP_voidAdjustLEDSOn+0x92>
	}
	else if(G_u8LDRReading >= 80 && G_u8LDRReading < 120)
    283a:	80 91 7a 00 	lds	r24, 0x007A
    283e:	80 35       	cpi	r24, 0x50	; 80
    2840:	48 f0       	brcs	.+18     	; 0x2854 <APP_voidAdjustLEDSOn+0x4e>
    2842:	80 91 7a 00 	lds	r24, 0x007A
    2846:	88 37       	cpi	r24, 0x78	; 120
    2848:	28 f4       	brcc	.+10     	; 0x2854 <APP_voidAdjustLEDSOn+0x4e>
	{
		MDIO_voidSetPortValue('C', 7); // 3 leds on
    284a:	83 e4       	ldi	r24, 0x43	; 67
    284c:	67 e0       	ldi	r22, 0x07	; 7
    284e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>
    2852:	22 c0       	rjmp	.+68     	; 0x2898 <APP_voidAdjustLEDSOn+0x92>
	}
	else if(G_u8LDRReading >= 120 && G_u8LDRReading < 160)
    2854:	80 91 7a 00 	lds	r24, 0x007A
    2858:	88 37       	cpi	r24, 0x78	; 120
    285a:	48 f0       	brcs	.+18     	; 0x286e <APP_voidAdjustLEDSOn+0x68>
    285c:	80 91 7a 00 	lds	r24, 0x007A
    2860:	80 3a       	cpi	r24, 0xA0	; 160
    2862:	28 f4       	brcc	.+10     	; 0x286e <APP_voidAdjustLEDSOn+0x68>
	{
		MDIO_voidSetPortValue('C', 3); // 2 leds on
    2864:	83 e4       	ldi	r24, 0x43	; 67
    2866:	63 e0       	ldi	r22, 0x03	; 3
    2868:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>
    286c:	15 c0       	rjmp	.+42     	; 0x2898 <APP_voidAdjustLEDSOn+0x92>
	}
	else if(G_u8LDRReading >= 160 && G_u8LDRReading < 200)
    286e:	80 91 7a 00 	lds	r24, 0x007A
    2872:	80 3a       	cpi	r24, 0xA0	; 160
    2874:	48 f0       	brcs	.+18     	; 0x2888 <APP_voidAdjustLEDSOn+0x82>
    2876:	80 91 7a 00 	lds	r24, 0x007A
    287a:	88 3c       	cpi	r24, 0xC8	; 200
    287c:	28 f4       	brcc	.+10     	; 0x2888 <APP_voidAdjustLEDSOn+0x82>
	{
		MDIO_voidSetPortValue('C', 1); // 1 led on
    287e:	83 e4       	ldi	r24, 0x43	; 67
    2880:	61 e0       	ldi	r22, 0x01	; 1
    2882:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>
    2886:	08 c0       	rjmp	.+16     	; 0x2898 <APP_voidAdjustLEDSOn+0x92>
	}
	else if(G_u8LDRReading >= 240)
    2888:	80 91 7a 00 	lds	r24, 0x007A
    288c:	80 3f       	cpi	r24, 0xF0	; 240
    288e:	20 f0       	brcs	.+8      	; 0x2898 <APP_voidAdjustLEDSOn+0x92>
	{
		MDIO_voidSetPortValue('C', 0); // all leds off
    2890:	83 e4       	ldi	r24, 0x43	; 67
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MDIO_voidSetPortValue>
	}
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <APP_voidCheckMasterCode>:

/*This function is responsible for checking the
 * Code received from master that updates Rooms Light status*/
void APP_voidCheckMasterCode(u8 A_u8Code)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <APP_voidCheckMasterCode+0x6>
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	89 83       	std	Y+1, r24	; 0x01
	/*Check Option received*/
	switch(A_u8Code)
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	3b 83       	std	Y+3, r19	; 0x03
    28b4:	2a 83       	std	Y+2, r18	; 0x02
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ba:	82 33       	cpi	r24, 0x32	; 50
    28bc:	91 05       	cpc	r25, r1
    28be:	d1 f0       	breq	.+52     	; 0x28f4 <APP_voidCheckMasterCode+0x56>
    28c0:	2a 81       	ldd	r18, Y+2	; 0x02
    28c2:	3b 81       	ldd	r19, Y+3	; 0x03
    28c4:	23 33       	cpi	r18, 0x33	; 51
    28c6:	31 05       	cpc	r19, r1
    28c8:	34 f4       	brge	.+12     	; 0x28d6 <APP_voidCheckMasterCode+0x38>
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	81 33       	cpi	r24, 0x31	; 49
    28d0:	91 05       	cpc	r25, r1
    28d2:	61 f0       	breq	.+24     	; 0x28ec <APP_voidCheckMasterCode+0x4e>
    28d4:	18 c0       	rjmp	.+48     	; 0x2906 <APP_voidCheckMasterCode+0x68>
    28d6:	2a 81       	ldd	r18, Y+2	; 0x02
    28d8:	3b 81       	ldd	r19, Y+3	; 0x03
    28da:	23 33       	cpi	r18, 0x33	; 51
    28dc:	31 05       	cpc	r19, r1
    28de:	69 f0       	breq	.+26     	; 0x28fa <APP_voidCheckMasterCode+0x5c>
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	84 33       	cpi	r24, 0x34	; 52
    28e6:	91 05       	cpc	r25, r1
    28e8:	61 f0       	breq	.+24     	; 0x2902 <APP_voidCheckMasterCode+0x64>
    28ea:	0d c0       	rjmp	.+26     	; 0x2906 <APP_voidCheckMasterCode+0x68>
	{
		case ROOM_1_LIGHT_ON:
			G_u8Room1Led = 1; // Room 1 LED On Option
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	80 93 7b 00 	sts	0x007B, r24
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <APP_voidCheckMasterCode+0x68>
			break;

		case ROOM_1_LIGHT_OFF:
			G_u8Room1Led = 0; // Room 1 LED Off Option
    28f4:	10 92 7b 00 	sts	0x007B, r1
    28f8:	06 c0       	rjmp	.+12     	; 0x2906 <APP_voidCheckMasterCode+0x68>
			break;

		case ROOM_2_LIGHT_ON:
			G_u8Room2Led = 1; // Room 2 LED On Option
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	80 93 78 00 	sts	0x0078, r24
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <APP_voidCheckMasterCode+0x68>
			break;

		case ROOM_2_LIGHT_OFF:
			G_u8Room2Led = 0; // Room 2 LED Off Option
    2902:	10 92 78 00 	sts	0x0078, r1
			break;
	}
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <APP_voidUpdateRoomsLight>:

/*This function Send high/low signal
 * to the Light if rooms based on code received
 * from master controller*/
void APP_voidUpdateRoomsLight(void)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue('C', 5, G_u8Room1Led);
    291a:	90 91 7b 00 	lds	r25, 0x007B
    291e:	83 e4       	ldi	r24, 0x43	; 67
    2920:	65 e0       	ldi	r22, 0x05	; 5
    2922:	49 2f       	mov	r20, r25
    2924:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue('C', 6, G_u8Room2Led);
    2928:	90 91 78 00 	lds	r25, 0x0078
    292c:	83 e4       	ldi	r24, 0x43	; 67
    292e:	66 e0       	ldi	r22, 0x06	; 6
    2930:	49 2f       	mov	r20, r25
    2932:	0e 94 19 0b 	call	0x1632	; 0x1632 <MDIO_voidSetPinValue>
}
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <main>:
#include "APP.h"

/*Slave 2 Code*/

int main(void)
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	/*SS Pin Output*/
	MDIO_voidSetPinDirection('B', 4, 0);
    2944:	82 e4       	ldi	r24, 0x42	; 66
    2946:	64 e0       	ldi	r22, 0x04	; 4
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>

	/*MOSI Pin*/
	MDIO_voidSetPinDirection('B', 5, 0);
    294e:	82 e4       	ldi	r24, 0x42	; 66
    2950:	65 e0       	ldi	r22, 0x05	; 5
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>

	/*MISO Pin*/
	MDIO_voidSetPinDirection('B', 6, 1);
    2958:	82 e4       	ldi	r24, 0x42	; 66
    295a:	66 e0       	ldi	r22, 0x06	; 6
    295c:	41 e0       	ldi	r20, 0x01	; 1
    295e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>

	/*SCLK Pin Output*/
	MDIO_voidSetPinDirection('B', 7, 0);
    2962:	82 e4       	ldi	r24, 0x42	; 66
    2964:	67 e0       	ldi	r22, 0x07	; 7
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>

	/*Slave SPI Init*/
	MSPI_voidSlaveInit();
    296c:	0e 94 23 07 	call	0xe46	; 0xe46 <MSPI_voidSlaveInit>

	/*Enable SPI Interrupt*/
	SET_BIT(SPCR, 7);
    2970:	ad e2       	ldi	r26, 0x2D	; 45
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ed e2       	ldi	r30, 0x2D	; 45
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	80 68       	ori	r24, 0x80	; 128
    297c:	8c 93       	st	X, r24

	/*Enable Global Interrupt*/
	sei();
    297e:	78 94       	sei

	/*ADC Init*/
	MDIO_voidSetPinDirection('A', 0, 0);
    2980:	81 e4       	ldi	r24, 0x41	; 65
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>
	MADC_voidInit(0);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <MADC_voidInit>

	/*Fan DC Motor Pin Output*/
	MDIO_voidSetPinDirection('A', 2, 1);
    2990:	81 e4       	ldi	r24, 0x41	; 65
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>

	/*LDR Pin Input*/
	MDIO_voidSetPinDirection('A', 1, 0);
    299a:	81 e4       	ldi	r24, 0x41	; 65
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MDIO_voidSetPinDirection>

	/*LEDS Port Output (PORTC)*/
	MDIO_voidSetPortDirection('C', 255);
    29a4:	83 e4       	ldi	r24, 0x43	; 67
    29a6:	6f ef       	ldi	r22, 0xFF	; 255
    29a8:	0e 94 39 0c 	call	0x1872	; 0x1872 <MDIO_voidSetPortDirection>

	while(1)
	{
		/*Read Current Temperature value in celsius*/
		APP_voidReadTemperature();
    29ac:	0e 94 b2 13 	call	0x2764	; 0x2764 <APP_voidReadTemperature>

		/*Update Fan Status (on/off) based on temperature*/
		APP_voidUpdateFanStatus();
    29b0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <APP_voidUpdateFanStatus>

		/*Read current LDR Value*/
		APP_voidReadLDR();
    29b4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <APP_voidReadLDR>

		/*Adjust the number of LEDs on based on LDR Value*/
		APP_voidAdjustLEDSOn();
    29b8:	0e 94 03 14 	call	0x2806	; 0x2806 <APP_voidAdjustLEDSOn>

		/*Update Rooms Light based on code received from Master*/
		APP_voidUpdateRoomsLight();
    29bc:	0e 94 89 14 	call	0x2912	; 0x2912 <APP_voidUpdateRoomsLight>
    29c0:	f5 cf       	rjmp	.-22     	; 0x29ac <main+0x70>

000029c2 <__vector_12>:
	}
}

ISR(SPI_STC_vect)
{
    29c2:	1f 92       	push	r1
    29c4:	0f 92       	push	r0
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	0f 92       	push	r0
    29ca:	11 24       	eor	r1, r1
    29cc:	2f 93       	push	r18
    29ce:	3f 93       	push	r19
    29d0:	4f 93       	push	r20
    29d2:	5f 93       	push	r21
    29d4:	6f 93       	push	r22
    29d6:	7f 93       	push	r23
    29d8:	8f 93       	push	r24
    29da:	9f 93       	push	r25
    29dc:	af 93       	push	r26
    29de:	bf 93       	push	r27
    29e0:	ef 93       	push	r30
    29e2:	ff 93       	push	r31
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	/*Check Option received*/
	APP_voidCheckMasterCode(SPDR);
    29ec:	ef e2       	ldi	r30, 0x2F	; 47
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	0e 94 4f 14 	call	0x289e	; 0x289e <APP_voidCheckMasterCode>
}
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	ff 91       	pop	r31
    29fc:	ef 91       	pop	r30
    29fe:	bf 91       	pop	r27
    2a00:	af 91       	pop	r26
    2a02:	9f 91       	pop	r25
    2a04:	8f 91       	pop	r24
    2a06:	7f 91       	pop	r23
    2a08:	6f 91       	pop	r22
    2a0a:	5f 91       	pop	r21
    2a0c:	4f 91       	pop	r20
    2a0e:	3f 91       	pop	r19
    2a10:	2f 91       	pop	r18
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <__mulsi3>:
    2a1c:	62 9f       	mul	r22, r18
    2a1e:	d0 01       	movw	r26, r0
    2a20:	73 9f       	mul	r23, r19
    2a22:	f0 01       	movw	r30, r0
    2a24:	82 9f       	mul	r24, r18
    2a26:	e0 0d       	add	r30, r0
    2a28:	f1 1d       	adc	r31, r1
    2a2a:	64 9f       	mul	r22, r20
    2a2c:	e0 0d       	add	r30, r0
    2a2e:	f1 1d       	adc	r31, r1
    2a30:	92 9f       	mul	r25, r18
    2a32:	f0 0d       	add	r31, r0
    2a34:	83 9f       	mul	r24, r19
    2a36:	f0 0d       	add	r31, r0
    2a38:	74 9f       	mul	r23, r20
    2a3a:	f0 0d       	add	r31, r0
    2a3c:	65 9f       	mul	r22, r21
    2a3e:	f0 0d       	add	r31, r0
    2a40:	99 27       	eor	r25, r25
    2a42:	72 9f       	mul	r23, r18
    2a44:	b0 0d       	add	r27, r0
    2a46:	e1 1d       	adc	r30, r1
    2a48:	f9 1f       	adc	r31, r25
    2a4a:	63 9f       	mul	r22, r19
    2a4c:	b0 0d       	add	r27, r0
    2a4e:	e1 1d       	adc	r30, r1
    2a50:	f9 1f       	adc	r31, r25
    2a52:	bd 01       	movw	r22, r26
    2a54:	cf 01       	movw	r24, r30
    2a56:	11 24       	eor	r1, r1
    2a58:	08 95       	ret

00002a5a <__udivmodhi4>:
    2a5a:	aa 1b       	sub	r26, r26
    2a5c:	bb 1b       	sub	r27, r27
    2a5e:	51 e1       	ldi	r21, 0x11	; 17
    2a60:	07 c0       	rjmp	.+14     	; 0x2a70 <__udivmodhi4_ep>

00002a62 <__udivmodhi4_loop>:
    2a62:	aa 1f       	adc	r26, r26
    2a64:	bb 1f       	adc	r27, r27
    2a66:	a6 17       	cp	r26, r22
    2a68:	b7 07       	cpc	r27, r23
    2a6a:	10 f0       	brcs	.+4      	; 0x2a70 <__udivmodhi4_ep>
    2a6c:	a6 1b       	sub	r26, r22
    2a6e:	b7 0b       	sbc	r27, r23

00002a70 <__udivmodhi4_ep>:
    2a70:	88 1f       	adc	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	5a 95       	dec	r21
    2a76:	a9 f7       	brne	.-22     	; 0x2a62 <__udivmodhi4_loop>
    2a78:	80 95       	com	r24
    2a7a:	90 95       	com	r25
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	08 95       	ret

00002a82 <__udivmodsi4>:
    2a82:	a1 e2       	ldi	r26, 0x21	; 33
    2a84:	1a 2e       	mov	r1, r26
    2a86:	aa 1b       	sub	r26, r26
    2a88:	bb 1b       	sub	r27, r27
    2a8a:	fd 01       	movw	r30, r26
    2a8c:	0d c0       	rjmp	.+26     	; 0x2aa8 <__udivmodsi4_ep>

00002a8e <__udivmodsi4_loop>:
    2a8e:	aa 1f       	adc	r26, r26
    2a90:	bb 1f       	adc	r27, r27
    2a92:	ee 1f       	adc	r30, r30
    2a94:	ff 1f       	adc	r31, r31
    2a96:	a2 17       	cp	r26, r18
    2a98:	b3 07       	cpc	r27, r19
    2a9a:	e4 07       	cpc	r30, r20
    2a9c:	f5 07       	cpc	r31, r21
    2a9e:	20 f0       	brcs	.+8      	; 0x2aa8 <__udivmodsi4_ep>
    2aa0:	a2 1b       	sub	r26, r18
    2aa2:	b3 0b       	sbc	r27, r19
    2aa4:	e4 0b       	sbc	r30, r20
    2aa6:	f5 0b       	sbc	r31, r21

00002aa8 <__udivmodsi4_ep>:
    2aa8:	66 1f       	adc	r22, r22
    2aaa:	77 1f       	adc	r23, r23
    2aac:	88 1f       	adc	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	1a 94       	dec	r1
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <__udivmodsi4_loop>
    2ab4:	60 95       	com	r22
    2ab6:	70 95       	com	r23
    2ab8:	80 95       	com	r24
    2aba:	90 95       	com	r25
    2abc:	9b 01       	movw	r18, r22
    2abe:	ac 01       	movw	r20, r24
    2ac0:	bd 01       	movw	r22, r26
    2ac2:	cf 01       	movw	r24, r30
    2ac4:	08 95       	ret

00002ac6 <__divmodsi4>:
    2ac6:	97 fb       	bst	r25, 7
    2ac8:	09 2e       	mov	r0, r25
    2aca:	05 26       	eor	r0, r21
    2acc:	0e d0       	rcall	.+28     	; 0x2aea <__divmodsi4_neg1>
    2ace:	57 fd       	sbrc	r21, 7
    2ad0:	04 d0       	rcall	.+8      	; 0x2ada <__divmodsi4_neg2>
    2ad2:	d7 df       	rcall	.-82     	; 0x2a82 <__udivmodsi4>
    2ad4:	0a d0       	rcall	.+20     	; 0x2aea <__divmodsi4_neg1>
    2ad6:	00 1c       	adc	r0, r0
    2ad8:	38 f4       	brcc	.+14     	; 0x2ae8 <__divmodsi4_exit>

00002ada <__divmodsi4_neg2>:
    2ada:	50 95       	com	r21
    2adc:	40 95       	com	r20
    2ade:	30 95       	com	r19
    2ae0:	21 95       	neg	r18
    2ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ae6:	5f 4f       	sbci	r21, 0xFF	; 255

00002ae8 <__divmodsi4_exit>:
    2ae8:	08 95       	ret

00002aea <__divmodsi4_neg1>:
    2aea:	f6 f7       	brtc	.-4      	; 0x2ae8 <__divmodsi4_exit>
    2aec:	90 95       	com	r25
    2aee:	80 95       	com	r24
    2af0:	70 95       	com	r23
    2af2:	61 95       	neg	r22
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	8f 4f       	sbci	r24, 0xFF	; 255
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	08 95       	ret

00002afc <__prologue_saves__>:
    2afc:	2f 92       	push	r2
    2afe:	3f 92       	push	r3
    2b00:	4f 92       	push	r4
    2b02:	5f 92       	push	r5
    2b04:	6f 92       	push	r6
    2b06:	7f 92       	push	r7
    2b08:	8f 92       	push	r8
    2b0a:	9f 92       	push	r9
    2b0c:	af 92       	push	r10
    2b0e:	bf 92       	push	r11
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	ff 92       	push	r15
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	ca 1b       	sub	r28, r26
    2b26:	db 0b       	sbc	r29, r27
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	09 94       	ijmp

00002b34 <__epilogue_restores__>:
    2b34:	2a 88       	ldd	r2, Y+18	; 0x12
    2b36:	39 88       	ldd	r3, Y+17	; 0x11
    2b38:	48 88       	ldd	r4, Y+16	; 0x10
    2b3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b40:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b42:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b44:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b46:	b9 84       	ldd	r11, Y+9	; 0x09
    2b48:	c8 84       	ldd	r12, Y+8	; 0x08
    2b4a:	df 80       	ldd	r13, Y+7	; 0x07
    2b4c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b50:	0c 81       	ldd	r16, Y+4	; 0x04
    2b52:	1b 81       	ldd	r17, Y+3	; 0x03
    2b54:	aa 81       	ldd	r26, Y+2	; 0x02
    2b56:	b9 81       	ldd	r27, Y+1	; 0x01
    2b58:	ce 0f       	add	r28, r30
    2b5a:	d1 1d       	adc	r29, r1
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	ed 01       	movw	r28, r26
    2b68:	08 95       	ret

00002b6a <_exit>:
    2b6a:	f8 94       	cli

00002b6c <__stop_program>:
    2b6c:	ff cf       	rjmp	.-2      	; 0x2b6c <__stop_program>
